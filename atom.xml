<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hui Yang&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-10T00:04:17.160Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨辉</name>
    <email>619771478@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring源码解读</title>
    <link href="http://yoursite.com/2017/10/10/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>http://yoursite.com/2017/10/10/Spring源码解读/</id>
    <published>2017-10-09T23:44:25.000Z</published>
    <updated>2017-10-10T00:04:17.160Z</updated>
    
    <content type="html"><![CDATA[<p>IoC容器和AOP是Spring的kernel(核心)</p>
<h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><p><strong>依赖控制反转</strong>：把控制权从具体业务对象手中转交到平台或框架中；<br><strong>依赖注入方式</strong>：接口注入、setter注入、构造器注入；在Spring IoC设计中，setter注入、构造器注入是最主要的注入方式；<br>    <img src="/uploads/spring7.jpg" alt=""><br><a id="more"></a><br><strong>使用IoC容器步骤</strong>：</p>
<ol>
<li>创建IoC配置文件的抽象资源，这个抽象资源包含了BeanDefinition的定义信息。</li>
<li>创建一个BeanFactory，这里使用DefaultListableBeanFactory。</li>
<li>创建一个载入BeanDefinition的读取器，这里使用XmlBeanDefinitionReader来载入XML文件形式的BeanDefinition，通过一个回调配置给BeanFactory。</li>
<li>从定义好的资源位置读入配置信息，具体的解析过程由XmlBeanDefinitionReader来完成。完成整个载入和注册Bean定义之后，需要的IoC容器就建立起来了。这个时候就可以直接使用Ioc容器了。</li>
</ol>
<p><strong>IoC容器的启动</strong>：BeanDefinition的Resource<strong>定位</strong>、<strong>载入</strong>和<strong>注册</strong>。<br>IoC容器启动的过程中一般不包含Bean依赖注入的实现，在IoC的设计中Bean定义的载入和依赖注入是两个独立的过程。依赖注入一般发生在应用第一次通过getBean向容器索取Bean的时候。但是如果我们对某个Bean设置了lazyinit属性，那么这个Bean的依赖注入在IoC容器初始化时就预先完成了，不需要等到第一次使用getBean才触发。</p>
<p>通过以下代码作为入口来解析Spring源码：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">springTest</span> <span class="params">()</span> </span>&#123;</div><div class="line">		XmlBeanFactory bf = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">"beanFactory.xml"</span>));</div><div class="line">		SpringTest bean  = (SpringTest)bf.getBean(<span class="string">"springTest"</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>ClassPathResource的创建<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">ClassPathResource</span>(<span class="string">"beanFactory.xml"</span>)</div><div class="line"></div><div class="line"><span class="built_in">this</span>(path, (ClassLoader) <span class="literal">null</span>);<span class="comment">//使用默认的classLoader</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> ClassPathResource(<span class="keyword">String</span> path, ClassLoader classLoader) &#123;</div><div class="line">           Assert.notNull(path, <span class="string">"Path must not be null"</span>);</div><div class="line">           <span class="keyword">String</span> pathToUse = StringUtils.cleanPath(path);</div><div class="line">           <span class="keyword">if</span> (pathToUse.startsWith(<span class="string">"/"</span>)) &#123;</div><div class="line">                pathToUse = pathToUse.substring(<span class="number">1</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="built_in">this</span>.path = pathToUse;</div><div class="line">           <span class="built_in">this</span>.classLoader = (classLoader != <span class="literal">null</span> ? classLoader : <span class="type">ClassUtils</span>.getDefaultClassLoader());</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">"beanFactory.xml"</span>));</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">XmlBeanFactory</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">           <span class="keyword">this</span>(resource, <span class="keyword">null</span>);</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">XmlBeanFactory</span><span class="params">(Resource resource, BeanFactory parentBeanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">           <span class="keyword">super</span>(parentBeanFactory);<span class="comment">//goto DefaultListableBeanFactory</span></div><div class="line">           <span class="keyword">this</span>.reader.loadBeanDefinitions(resource);<span class="comment">//这个是核心，资源加载的真正实现</span></div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//DefaultListableBeanFactory</span></div><div class="line"><span class="keyword">public</span> DefaultListableBeanFactory(BeanFactory parentBeanFactory) &#123;</div><div class="line">           <span class="keyword">super</span>(parentBeanFactory);<span class="comment">//goto AbstractAutowireCapableBeanFactory</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">//AbstractAutowireCapableBeanFactory</span></div><div class="line"><span class="keyword">public</span> AbstractAutowireCapableBeanFactory(BeanFactory parentBeanFactory) &#123;</div><div class="line">           <span class="keyword">this</span>();<span class="comment">//这个也比较重要 goto AbstractAutowireCapableBeanFactory</span></div><div class="line">           setParentBeanFactory(parentBeanFactory);</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">//AbstractAutowireCapableBeanFactory</span></div><div class="line"><span class="keyword">public</span> AbstractAutowireCapableBeanFactory() &#123;</div><div class="line">           <span class="keyword">super</span>();</div><div class="line">           <span class="comment">//忽略给定接口的自动装配功能</span></div><div class="line">           ignoreDependencyInterface(BeanNameAware.<span class="keyword">class</span>);</div><div class="line">           ignoreDependencyInterface(BeanFactoryAware.<span class="keyword">class</span>);</div><div class="line">           ignoreDependencyInterface(BeanClassLoaderAware.<span class="keyword">class</span>);</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>当A中有属性B，那么当Spring在获取A的Bean的时候，如果B还没有初始化，那么Spring会自动初始化B，这也是Spring提供的一个重要特性。但是，某些情况下，B不会被初始化，其中一种情况就是B实现了BeanNameAware接口(自动装配时，忽略给定的依赖接口)。</p>
<p><strong>加载Bean</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//private final XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(this);</span></div><div class="line"><span class="keyword">this</span>.reader.loadBeanDefinitions(resource);  <span class="comment">//核心，资源加载的真正实现</span></div></pre></td></tr></table></figure></p>
<p>这句代码是整个资源加载的切入点：过程<br>1.封装资源文件    //new EncodedResource(resource)<br>2.获取输入流：从Resource中获取对应的InputStream并构造InputSource<br>3.通过构造的InputSource实例和Resource实例继续调用函数doLoadBeanDefinitions。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//XmlBeanDefinitionReader</span></div><div class="line">@<span class="function">Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span>(<span class="params">Resource resource</span>) throws BeanDefinitionStoreException &#123;</div><div class="line">     <span class="keyword">return</span> loadBeanDefinitions(<span class="keyword">new</span> EncodedResource(resource));  <span class="comment">//EncodedResource对资源文件的编码进行处理</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//XmlBeanDefinitionReader</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span>(<span class="params">EncodedResource encodedResource</span>) throws BeanDefinitionStoreException </span>&#123;</div><div class="line">       Assert.notNull(encodedResource, <span class="string">"EncodedResource must not be null"</span>);</div><div class="line">       <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">            logger.info(<span class="string">"Loading XML bean definitions from "</span> + encodedResource.getResource());</div><div class="line">       &#125;</div><div class="line">       Set&lt;EncodedResource&gt; currentResources = <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.<span class="keyword">get</span>();</div><div class="line">       <span class="keyword">if</span> (currentResources == <span class="literal">null</span>) &#123;</div><div class="line">            currentResources = <span class="keyword">new</span> HashSet&lt;EncodedResource&gt;(<span class="number">4</span>);</div><div class="line">            <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.<span class="keyword">set</span>(currentResources);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (!currentResources.<span class="keyword">add</span>(encodedResource)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">                       <span class="string">"Detected cyclic loading of "</span> + encodedResource + <span class="string">" - check your import definitions!"</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">            InputStream inputStream = encodedResource.getResource().getInputStream();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                 InputSource inputSource = <span class="keyword">new</span> InputSource(inputStream);</div><div class="line">                 <span class="keyword">if</span> (encodedResource.getEncoding() != <span class="literal">null</span>) &#123;</div><div class="line">                      inputSource.setEncoding(encodedResource.getEncoding());</div><div class="line">                 &#125;</div><div class="line">                 <span class="comment">//核心,从这儿继续往下看</span></div><div class="line">                 <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">finally</span> &#123;</div><div class="line">                 inputStream.close();</div><div class="line">            &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">                       <span class="string">"IOException parsing XML document from "</span> + encodedResource.getResource(), ex);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">finally</span> &#123;</div><div class="line">            currentResources.<span class="keyword">remove</span>(encodedResource);</div><div class="line">            <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</div><div class="line">                 <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.<span class="keyword">remove</span>();</div><div class="line">            &#125;</div><div class="line">       &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//XmlBeanDefinitionReader</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span></div><div class="line">                <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//加载XML文件并得到对应的Document</span></div><div class="line">                Document doc = doLoadDocument(inputSource, resource); </div><div class="line">                <span class="comment">//根据返回的Document注册Bean信息</span></div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">registerBeanDefinitions</span><span class="params">(doc, resource)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> ex;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (SAXParseException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</div><div class="line">                           <span class="string">"Line "</span> + ex.getLineNumber() + <span class="string">" in XML document from "</span> + resource + <span class="string">" is invalid"</span>, ex);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (SAXException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</div><div class="line">                           <span class="string">"XML document from "</span> + resource + <span class="string">" is invalid"</span>, ex);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (ParserConfigurationException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</div><div class="line">                           <span class="string">"Parser configuration exception parsing XML from "</span> + resource, ex);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</div><div class="line">                           <span class="string">"IOException parsing XML document from "</span> + resource, ex);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</div><div class="line">                           <span class="string">"Unexpected exception parsing XML document from "</span> + resource, ex);</div><div class="line">           &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">//XmlBeanDefinitionReader</span></div><div class="line"><span class="keyword">protected</span> <span class="function">Document <span class="title">doLoadDocument</span><span class="params">(InputSource inputSource, Resource resource)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.documentLoader.loadDocument(inputSource, getEntityResolver(), <span class="keyword">this</span>.errorHandler,</div><div class="line">                     getValidationModeForResource(resource), isNamespaceAware());</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>上述代码只做了3件事，支撑着Spring容器部分<strong>基础实现</strong>：<br>1.获取对XML文件的验证模式：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">getValidationModeForResource</span><span class="params">(resource)</span></span></div></pre></td></tr></table></figure></p>
<p>2.加载XML文件并得到对应的Document<br><figure class="highlight plain"><figcaption><span>doc = doLoadDocument(inputSource, resource);```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3.根据返回的Document注册Bean信息</div></pre></td></tr></table></figure></p>
<p>return registerBeanDefinitions(doc, resource);<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"><span class="comment">//对XML文件的验证</span></div><div class="line"><span class="comment">//XmlBeanDefinitionReader</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">int</span> <span class="title">getValidationModeForResource</span><span class="params">(Resource resource)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> validationModeToUse = getValidationMode();</div><div class="line">      <span class="comment">//如果手动指定了验证模式,则使用指定的验证模式</span></div><div class="line">      <span class="keyword">if</span> (validationModeToUse != VALIDATION_AUTO) &#123;</div><div class="line">           <span class="keyword">return</span> validationModeToUse;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//如果未指定则使用自动检测</span></div><div class="line">      <span class="keyword">int</span> detectedMode = detectValidationMode(resource);</div><div class="line">      <span class="keyword">if</span> (detectedMode != VALIDATION_AUTO) &#123;</div><div class="line">           <span class="keyword">return</span> detectedMode;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Hmm, we didn't get a clear indication... Let's assume XSD,</span></div><div class="line">      <span class="comment">// since apparently no DTD declaration has been found up until</span></div><div class="line">      <span class="comment">// detection stopped (before finding the document's root tag).</span></div><div class="line">      <span class="keyword">return</span> VALIDATION_XSD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//XmlBeanDefinitionReader</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">int</span> <span class="title">detectValidationMode</span><span class="params">(Resource resource)</span> </span>&#123;</div><div class="line">           <span class="keyword">if</span> (resource.isOpen()) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">                           <span class="string">"Passed-in Resource ["</span> + resource + <span class="string">"] contains an open stream: "</span> +</div><div class="line">                           <span class="string">"cannot determine validation mode automatically. Either pass in a Resource "</span> +</div><div class="line">                           <span class="string">"that is able to create fresh streams, or explicitly specify the validationMode "</span> +</div><div class="line">                           <span class="string">"on your XmlBeanDefinitionReader instance."</span>);</div><div class="line">           &#125;</div><div class="line">           InputStream inputStream;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">                inputStream = resource.getInputStream();</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">                           <span class="string">"Unable to determine validation mode for ["</span> + resource + <span class="string">"]: cannot open InputStream. "</span> +</div><div class="line">                           <span class="string">"Did you attempt to load directly from a SAX InputSource without specifying the "</span> +</div><div class="line">                           <span class="string">"validationMode on your XmlBeanDefinitionReader instance?"</span>, ex);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.validationModeDetector.detectValidationMode(inputStream);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">"Unable to determine validation mode for ["</span> +</div><div class="line">                           resource + <span class="string">"]: an error occurred whilst reading from the InputStream."</span>, ex);</div><div class="line">           &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">//XmlValidationModeDetector</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">detectValidationMode</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">           <span class="comment">// Peek into the file to look for DOCTYPE.</span></div><div class="line">           BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">boolean</span> isDtdValidated = <span class="keyword">false</span>;</div><div class="line">                String content;</div><div class="line">                <span class="keyword">while</span> ((content = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                     content = consumeCommentTokens(content);</div><div class="line">                     <span class="comment">//如果读取的行是空或注释则略过</span></div><div class="line">                     <span class="keyword">if</span> (<span class="keyword">this</span>.inComment || !StringUtils.hasText(content)) &#123;</div><div class="line">                           <span class="keyword">continue</span>;</div><div class="line">                     &#125;</div><div class="line">                     <span class="keyword">if</span> (hasDoctype(content)) &#123;</div><div class="line">                           isDtdValidated = <span class="keyword">true</span>;</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                     &#125;</div><div class="line">                     <span class="keyword">if</span> (hasOpeningTag(content)) &#123;</div><div class="line">                           <span class="comment">// End of meaningful data...</span></div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> (isDtdValidated ? VALIDATION_DTD : VALIDATION_XSD);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (CharConversionException ex) &#123;</div><div class="line">                <span class="comment">// Choked on some character encoding...</span></div><div class="line">                <span class="comment">// Leave the decision up to the caller.</span></div><div class="line">                <span class="keyword">return</span> VALIDATION_AUTO;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">finally</span> &#123;</div><div class="line">                reader.close();</div><div class="line">           &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载XML文件并得到对应的Document</span></div><div class="line"><span class="comment">//DefaultDocumentLoader</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function">Document <span class="title">loadDocument</span><span class="params">(InputSource inputSource, EntityResolver entityResolver,</span></span></div><div class="line">           ErrorHandler errorHandler, <span class="keyword">int</span> validationMode, <span class="keyword">boolean</span> namespaceAware) <span class="keyword">throws</span> Exception &#123;</div><div class="line">      DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware);</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">           logger.debug(<span class="string">"Using JAXP provider ["</span> + factory.getClass().getName() + <span class="string">"]"</span>);</div><div class="line">      &#125;</div><div class="line">      DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler);</div><div class="line">      <span class="function"><span class="keyword">return</span> builder.<span class="title">parse</span><span class="params">(inputSource)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据返回的Document注册Bean信息</span></div><div class="line"><span class="comment">//XmlBeanDefinitionReader</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span>(<span class="params">Document doc, Resource resource</span>) throws BeanDefinitionStoreException </span>&#123;</div><div class="line">      <span class="comment">//使用BeanDefinitionDocumentReader实例化BeanDefinitionDocumentReader</span></div><div class="line">      BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</div><div class="line">      <span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</div><div class="line">      <span class="comment">//加载及注册bean</span></div><div class="line">      documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</div><div class="line">      <span class="comment">//记录本次加载的BeanDefinition个数</span></div><div class="line">      <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//DefaultBeanDefinitionDocumentReader</span></div><div class="line">@<span class="function">Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span>(<span class="params">Document doc, XmlReaderContext readerContext</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.readerContext = readerContext;</div><div class="line">      logger.debug(<span class="string">"Loading bean definitions"</span>);</div><div class="line">      Element root = doc.getDocumentElement();</div><div class="line">      <span class="comment">//核心逻辑的底部</span></div><div class="line">      doRegisterBeanDefinitions(root);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//DefaultBeanDefinitionDocumentReader</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span>(<span class="params">Element root</span>) </span>&#123;</div><div class="line">      <span class="comment">// Any nested &lt;beans&gt; elements will cause recursion in this method. In</span></div><div class="line">      <span class="comment">// order to propagate and preserve &lt;beans&gt; default-* attributes correctly,</span></div><div class="line">      <span class="comment">// keep track of the current (parent) delegate, which may be null. Create</span></div><div class="line">      <span class="comment">// the new (child) delegate with a reference to the parent for fallback purposes,</span></div><div class="line">      <span class="comment">// then ultimately reset this.delegate back to its original (parent) reference.</span></div><div class="line">      <span class="comment">// this behavior emulates a stack of delegates without actually necessitating one.</span></div><div class="line">      BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.<span class="keyword">delegate</span>;</div><div class="line">      <span class="keyword">this</span>.<span class="keyword">delegate</span> = createDelegate(getReaderContext(), root, parent);</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.<span class="keyword">delegate</span>.isDefaultNamespace(root)) &#123;</div><div class="line">           String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</div><div class="line">           <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</div><div class="line">                String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</div><div class="line">                           profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</div><div class="line">                <span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</div><div class="line">                      <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                           logger.info(<span class="string">"Skipped XML bean definition file due to specified profiles ["</span> + profileSpec +</div><div class="line">                                      <span class="string">"] not matching: "</span> + getReaderContext().getResource());</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      preProcessXml(root);</div><div class="line">      <span class="comment">//解析并注册BeanDefinitions</span></div><div class="line">      parseBeanDefinitions(root, <span class="keyword">this</span>.<span class="keyword">delegate</span>);</div><div class="line">      postProcessXml(root);</div><div class="line">      <span class="keyword">this</span>.<span class="keyword">delegate</span> = parent;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//DefaultBeanDefinitionDocumentReader</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span>(<span class="params">Element root, BeanDefinitionParserDelegate <span class="keyword">delegate</span></span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">delegate</span>.isDefaultNamespace(root)) &#123;<span class="comment">//默认标签</span></div><div class="line">			NodeList nl = root.getChildNodes();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</div><div class="line">				Node node = nl.item(i);</div><div class="line">				<span class="keyword">if</span> (node instanceof Element) &#123;</div><div class="line">					Element ele = (Element) node;</div><div class="line">					<span class="keyword">if</span> (<span class="keyword">delegate</span>.isDefaultNamespace(ele)) &#123;</div><div class="line">					    <span class="comment">//默认标签的核心</span></div><div class="line">						parseDefaultElement(ele, <span class="keyword">delegate</span>);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						<span class="keyword">delegate</span>.parseCustomElement(ele);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;<span class="comment">//自定义标签</span></div><div class="line">			<span class="keyword">delegate</span>.parseCustomElement(root);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"><span class="comment">//DefaultBeanDefinitionDocumentReader</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span>(<span class="params">Element ele, BeanDefinitionParserDelegate <span class="keyword">delegate</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</div><div class="line">        importBeanDefinitionResource(ele);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</div><div class="line">        processAliasRegistration(ele);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;<span class="comment">//Bean标签的解析及注册;只讲这块的代码</span></div><div class="line">        processBeanDefinition(ele, <span class="keyword">delegate</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</div><div class="line">        <span class="comment">// recurse</span></div><div class="line">        doRegisterBeanDefinitions(ele);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//DefaultBeanDefinitionDocumentReader</span></div><div class="line"><span class="comment">//Bean标签的解析及注册：对Bean标签的解析最为复杂也最为重要</span></div><div class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span>(<span class="params">Element ele, BeanDefinitionParserDelegate <span class="keyword">delegate</span></span>) </span>&#123;</div><div class="line">           <span class="comment">//元素解析,class、name、id等</span></div><div class="line">           BeanDefinitionHolder bdHolder = <span class="keyword">delegate</span>.parseBeanDefinitionElement(ele);</div><div class="line">           <span class="keyword">if</span> (bdHolder != <span class="literal">null</span>) &#123;</div><div class="line">                <span class="comment">//对自定义标签解析</span></div><div class="line">                bdHolder = <span class="keyword">delegate</span>.decorateBeanDefinitionIfRequired(ele, bdHolder);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                     <span class="comment">// Register the final decorated instance.</span></div><div class="line">                    <span class="comment">//对解析后的 bdHolder进行注册</span></div><div class="line">                    BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</div><div class="line">                     getReaderContext().error(<span class="string">"Failed to register bean definition with name '"</span> +</div><div class="line">                                bdHolder.getBeanName() + <span class="string">"'"</span>, ele, ex);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// Send registration event.</span></div><div class="line">                <span class="comment">//发出响应事件</span></div><div class="line">                getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</div><div class="line">           &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p><strong>过程</strong>：</p>
<ol>
<li>首先委托<code>BeanDefinitionParserDelegate</code>类的<code>parseBeanDefinitionElement</code>方法进行元素解析，返回<code>BeanDefinitionHolder</code>类型的实例<code>bdHolder</code>，经过这个方法后，<code>bdHolder</code>实例已经包含我们配置文件中配置的各种属性了，例如<code>class</code>、<code>name</code>、<code>id</code>之类的属性。</li>
<li>当返回的<code>bdHolder</code>不为空的情况下若存在默认标签的子节点下再有自定义属性，还需要再次对自定义标签进行解析。</li>
<li>解析完成后，需要对解析后的 <code>bdHolder</code>进行注册，同样注册操作委托给了<code>BeanDefinitionReaderUtils</code>的<code>registerBeanDefinition</code>方法。</li>
<li>最后发出响应事件，通知相关的监听器，这个<code>bean</code>已经加载完成了：<code>fireComponentRegistered</code>。</li>
</ol>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">//<span class="keyword">BeanDefinitionParserDelegate</span></div><div class="line"><span class="symbol">public</span> <span class="keyword">BeanDefinitionHolder </span>parseBeanDefinitionElement(Element ele) &#123;</div><div class="line">           return parseBeanDefinitionElement(ele, null)<span class="comment">;</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">//<span class="keyword">BeanDefinitionParserDelegate</span></div><div class="line"><span class="symbol">public</span> <span class="keyword">BeanDefinitionHolder </span>parseBeanDefinitionElement(Element ele, <span class="keyword">BeanDefinition </span>containingBean) &#123;</div><div class="line">           //解析id属性</div><div class="line">           <span class="keyword">String </span>id = ele.getAttribute(ID_ATTRIBUTE)<span class="comment">;</span></div><div class="line">           //解析name属性</div><div class="line">           <span class="keyword">String </span>nameAttr = ele.getAttribute(NAME_ATTRIBUTE)<span class="comment">;</span></div><div class="line">           //分割name属性</div><div class="line">           List&lt;<span class="keyword">String&gt; </span>aliases = new ArrayList&lt;<span class="keyword">String&gt;();</span></div><div class="line">           <span class="meta">if</span> (<span class="keyword">StringUtils.hasLength(nameAttr)) </span>&#123;</div><div class="line">                <span class="keyword">String[] </span>nameArr = <span class="keyword">StringUtils.tokenizeToStringArray(nameAttr, </span><span class="keyword">MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span></div><div class="line">                aliases.<span class="keyword">addAll(Arrays.asList(nameArr));</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">String </span><span class="keyword">beanName </span>= id<span class="comment">;</span></div><div class="line">           <span class="meta">if</span> (!<span class="keyword">StringUtils.hasText(beanName) </span>&amp;&amp; !aliases.isEmpty()) &#123;</div><div class="line">                <span class="keyword">beanName </span>= aliases.remove(<span class="number">0</span>)<span class="comment">;</span></div><div class="line">                <span class="meta">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                     logger.debug(<span class="string">"No XML 'id' specified - using '"</span> + <span class="keyword">beanName </span>+</div><div class="line">                                <span class="string">"' as bean name and "</span> + aliases + <span class="string">" as aliases"</span>)<span class="comment">;</span></div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="meta">if</span> (containingBean == null) &#123;</div><div class="line">                checkNameUniqueness(<span class="keyword">beanName, </span>aliases, ele)<span class="comment">;</span></div><div class="line">           &#125;</div><div class="line">           //解析默认元素，下面贴出这块代码</div><div class="line">           AbstractBeanDefinition <span class="keyword">beanDefinition </span>= parseBeanDefinitionElement(ele, <span class="keyword">beanName, </span>containingBean)<span class="comment">;</span></div><div class="line">           <span class="meta">if</span> (<span class="keyword">beanDefinition </span>!= null) &#123;</div><div class="line">                <span class="meta">if</span> (!<span class="keyword">StringUtils.hasText(beanName)) </span>&#123;</div><div class="line">                     try &#123;</div><div class="line">                           //如果不存在<span class="keyword">BeanName，那么根据Spring中提供的命名规则为当前Bean生成对应的beanName</span></div><div class="line">                           <span class="meta">if</span> (containingBean != null) &#123;</div><div class="line">                                <span class="keyword">beanName </span>= <span class="keyword">BeanDefinitionReaderUtils.generateBeanName(</span></div><div class="line">                                           <span class="keyword">beanDefinition, </span>this.readerContext.getRegistry(), true)<span class="comment">;</span></div><div class="line">                           &#125;</div><div class="line">                           <span class="meta">else</span> &#123;</div><div class="line">                                <span class="keyword">beanName </span>= this.readerContext.generateBeanName(<span class="keyword">beanDefinition);</span></div><div class="line">                                // Register an <span class="meta">alias</span> for the plain <span class="keyword">bean </span>class name, <span class="meta">if</span> still possible,</div><div class="line">                                // <span class="meta">if</span> the generator returned the class name plus a suffix.</div><div class="line">                                // This is expected for Spring <span class="number">1</span>.<span class="number">2</span>/<span class="number">2</span>.<span class="number">0</span> <span class="keyword">backwards </span>compatibility.</div><div class="line">                                <span class="keyword">String </span><span class="keyword">beanClassName </span>= <span class="keyword">beanDefinition.getBeanClassName();</span></div><div class="line">                                <span class="meta">if</span> (<span class="keyword">beanClassName </span>!= null &amp;&amp;</div><div class="line">                                          <span class="keyword">beanName.startsWith(beanClassName) </span>&amp;&amp; <span class="keyword">beanName.length() </span>&gt; <span class="keyword">beanClassName.length() </span>&amp;&amp;</div><div class="line">                                          !this.readerContext.getRegistry().<span class="keyword">isBeanNameInUse(beanClassName)) </span>&#123;</div><div class="line">                                     aliases.<span class="keyword">add(beanClassName);</span></div><div class="line">                                &#125;</div><div class="line">                           &#125;</div><div class="line">                           <span class="meta">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                                logger.debug(<span class="string">"Neither XML 'id' nor 'name' specified - "</span> +</div><div class="line">                                           <span class="string">"using generated bean name ["</span> + <span class="keyword">beanName </span>+ <span class="string">"]"</span>)<span class="comment">;</span></div><div class="line">                           &#125;</div><div class="line">                     &#125;</div><div class="line">                     catch (Exception ex) &#123;</div><div class="line">                           error(ex.getMessage(), ele)<span class="comment">;</span></div><div class="line">                           return null<span class="comment">;</span></div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">String[] </span>aliasesArray = <span class="keyword">StringUtils.toStringArray(aliases);</span></div><div class="line">                return new <span class="keyword">BeanDefinitionHolder(beanDefinition, </span><span class="keyword">beanName, </span>aliasesArray)<span class="comment">;</span></div><div class="line">           &#125;</div><div class="line">           return null<span class="comment">;</span></div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<ol>
<li>提取元素中的id以及name属性。</li>
<li>进一步解析其他所有属性并统一封装至GenericBeanDefinition类型的实例中。</li>
<li>如果检测到bean没有beanName，那么使用默认规则为此bean生成beanName。</li>
<li>将获取到的信息封装到BeanDefinitionHolder实例中。<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="keyword">public</span> <span class="function">AbstractBeanDefinition <span class="title">parseBeanDefinitionElement</span><span class="params">(</span></span></div><div class="line">                Element ele, String beanName, BeanDefinition containingBean) &#123;</div><div class="line">           <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> BeanEntry(beanName));</div><div class="line">           String className = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</div><div class="line">                className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">                String parent = <span class="keyword">null</span>;</div><div class="line">                <span class="comment">//如果有parent属性，就拿到parent属性</span></div><div class="line">                <span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</div><div class="line">                     parent = ele.getAttribute(PARENT_ATTRIBUTE);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//创建用于承载属性的AbstractBeanDefinition类型的GenericBeanDefinition</span></div><div class="line">                AbstractBeanDefinition bd = createBeanDefinition(className, parent);</div><div class="line"></div><div class="line">                <span class="comment">//对element所有元素属性进行解析</span></div><div class="line">                parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</div><div class="line">                bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</div><div class="line"></div><div class="line">                <span class="comment">//解析元数据</span></div><div class="line">                parseMetaElements(ele, bd);</div><div class="line">                <span class="comment">//解析lookup-method属性</span></div><div class="line">                parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</div><div class="line">                <span class="comment">//replaced-method属性</span></div><div class="line">                parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</div><div class="line"></div><div class="line">                <span class="comment">//解析构造函数参数</span></div><div class="line">                parseConstructorArgElements(ele, bd);</div><div class="line">                <span class="comment">//解析property子元素</span></div><div class="line">                parsePropertyElements(ele, bd);</div><div class="line">                <span class="comment">//解析qualifier子元素</span></div><div class="line">                parseQualifierElements(ele, bd);</div><div class="line">                bd.setResource(<span class="keyword">this</span>.readerContext.getResource());</div><div class="line">                bd.setSource(extractSource(ele));</div><div class="line">                <span class="keyword">return</span> bd;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">                <span class="keyword">error</span>(<span class="string">"Bean class ["</span> + className + <span class="string">"] not found"</span>, ele, ex);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (NoClassDefFoundError err) &#123;</div><div class="line">                <span class="keyword">error</span>(<span class="string">"Class that bean class ["</span> + className + <span class="string">"] depends on not found"</span>, ele, err);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">                <span class="keyword">error</span>(<span class="string">"Unexpected failure during bean definition parsing"</span>, ele, ex);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="keyword">this</span>.parseState.pop();</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Spring通过BeanDefinition将配置文件中的<bean>配置信息转换为容器的内部表示，并将这些BeanDefinition注册到BeanDefinitionRegistry中。Spring容器的BeanDefinitionRegistry就像是Spring配置信息的内存数据库，主要以map的形式保存，后续操作直接从BeanDefinitionRegistry读取配置信息。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">//<span class="keyword">BeanDefinitionParserDelegate</span></div><div class="line">//对element所有元素属性进行解析</div><div class="line"><span class="symbol">public</span> AbstractBeanDefinition parseBeanDefinitionAttributes(Element ele, <span class="keyword">String </span><span class="keyword">beanName,</span></div><div class="line">                <span class="keyword">BeanDefinition </span>containingBean, AbstractBeanDefinition <span class="keyword">bd) </span>&#123;</div><div class="line">           <span class="meta">if</span> (ele.hasAttribute(SINGLETON_ATTRIBUTE)) &#123;</div><div class="line">                error(<span class="string">"Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration"</span>, ele)<span class="comment">;</span></div><div class="line">           &#125;</div><div class="line">           <span class="meta">else</span> <span class="meta">if</span> (ele.hasAttribute(SCOPE_ATTRIBUTE)) &#123;</div><div class="line">                <span class="keyword">bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE));</span></div><div class="line">           &#125;</div><div class="line">           <span class="meta">else</span> <span class="meta">if</span> (containingBean != null) &#123;</div><div class="line">                // Take default from containing <span class="keyword">bean </span>in case of an inner <span class="keyword">bean </span>definition.</div><div class="line">                <span class="keyword">bd.setScope(containingBean.getScope());</span></div><div class="line">           &#125;</div><div class="line">           <span class="meta">if</span> (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) &#123;</div><div class="line">                <span class="keyword">bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)));</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">String </span>lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE)<span class="comment">;</span></div><div class="line">           <span class="meta">if</span> (DEFAULT_VALUE.equals(lazyInit)) &#123;</div><div class="line">                lazyInit = this.defaults.getLazyInit()<span class="comment">;</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">bd.setLazyInit(TRUE_VALUE.equals(lazyInit));</span></div><div class="line">           <span class="keyword">String </span>autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE)<span class="comment">;</span></div><div class="line">           <span class="keyword">bd.setAutowireMode(getAutowireMode(autowire));</span></div><div class="line">           <span class="keyword">String </span>dependencyCheck = ele.getAttribute(DEPENDENCY_CHECK_ATTRIBUTE)<span class="comment">;</span></div><div class="line">          <span class="keyword">bd.setDependencyCheck(getDependencyCheck(dependencyCheck));</span></div><div class="line">           <span class="meta">if</span> (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) &#123;</div><div class="line">                <span class="keyword">String </span>dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE)<span class="comment">;</span></div><div class="line">                <span class="keyword">bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, </span><span class="keyword">MULTI_VALUE_ATTRIBUTE_DELIMITERS));</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">String </span>autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE)<span class="comment">;</span></div><div class="line">           <span class="meta">if</span> (<span class="string">""</span>.equals(autowireCandidate) <span class="title">||</span> DEFAULT_VALUE.equals(autowireCandidate)) &#123;</div><div class="line">                <span class="keyword">String </span>candidatePattern = this.defaults.getAutowireCandidates()<span class="comment">;</span></div><div class="line">                <span class="meta">if</span> (candidatePattern != null) &#123;</div><div class="line">                     <span class="keyword">String[] </span>patterns = <span class="keyword">StringUtils.commaDelimitedListToStringArray(candidatePattern);</span></div><div class="line">                     <span class="keyword">bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, </span><span class="keyword">beanName));</span></div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="meta">else</span> &#123;</div><div class="line">                <span class="keyword">bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate));</span></div><div class="line">           &#125;</div><div class="line">           <span class="meta">if</span> (ele.hasAttribute(PRIMARY_ATTRIBUTE)) &#123;</div><div class="line">                <span class="keyword">bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)));</span></div><div class="line">           &#125;</div><div class="line">           <span class="meta">if</span> (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) &#123;</div><div class="line">                <span class="keyword">String </span>initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE)<span class="comment">;</span></div><div class="line">                <span class="meta">if</span> (!<span class="string">""</span>.equals(initMethodName)) &#123;</div><div class="line">                     <span class="keyword">bd.setInitMethodName(initMethodName);</span></div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="meta">else</span> &#123;</div><div class="line">                <span class="meta">if</span> (this.defaults.getInitMethod() != null) &#123;</div><div class="line">                     <span class="keyword">bd.setInitMethodName(this.defaults.getInitMethod());</span></div><div class="line">                     <span class="keyword">bd.setEnforceInitMethod(false);</span></div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="meta">if</span> (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) &#123;</div><div class="line">                <span class="keyword">String </span>destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE)<span class="comment">;</span></div><div class="line">                <span class="keyword">bd.setDestroyMethodName(destroyMethodName);</span></div><div class="line">           &#125;</div><div class="line">           <span class="meta">else</span> &#123;</div><div class="line">                <span class="meta">if</span> (this.defaults.getDestroyMethod() != null) &#123;</div><div class="line">                     <span class="keyword">bd.setDestroyMethodName(this.defaults.getDestroyMethod());</span></div><div class="line">                     <span class="keyword">bd.setEnforceDestroyMethod(false);</span></div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="meta">if</span> (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) &#123;</div><div class="line">                <span class="keyword">bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE));</span></div><div class="line">           &#125;</div><div class="line">           <span class="meta">if</span> (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) &#123;</div><div class="line">                <span class="keyword">bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE));</span></div><div class="line">           &#125;</div><div class="line">           return <span class="keyword">bd;</span></div><div class="line">     &#125;</div></pre></td></tr></table></figure></bean></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="comment">//对构造函数的解析</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">parseConstructorArgElements</span><span class="params">(Element beanEle, BeanDefinition bd)</span> </span>&#123;</div><div class="line">           NodeList nl = beanEle.getChildNodes();</div><div class="line">           <span class="comment">//这里有个遍历，对每个构造器参数都解析并放到bd 中</span></div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</div><div class="line">                Node node = nl.item(i);</div><div class="line">                <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) &#123;</div><div class="line">                     parseConstructorArgElement((Element) node, bd);</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">parseConstructorArgElement</span><span class="params">(Element ele, BeanDefinition bd)</span> </span>&#123;</div><div class="line">           <span class="comment">//提取index属性</span></div><div class="line">           String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE);</div><div class="line">           <span class="comment">//提取type属性</span></div><div class="line">           String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE);</div><div class="line">           <span class="comment">//提取name属性</span></div><div class="line">           String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</div><div class="line">           <span class="keyword">if</span> (StringUtils.hasLength(indexAttr)) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                     <span class="keyword">int</span> index = Integer.parseInt(indexAttr);</div><div class="line">                     <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line">                           <span class="keyword">error</span>(<span class="string">"'index' cannot be lower than 0"</span>, ele);</div><div class="line">                     &#125;</div><div class="line">                     <span class="keyword">else</span> &#123;</div><div class="line">                           <span class="keyword">try</span> &#123;</div><div class="line">                                <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> ConstructorArgumentEntry(index));</div><div class="line">                                <span class="comment">//对构造函数中子元素的解析</span></div><div class="line">                                Object value = parsePropertyValue(ele, bd, <span class="keyword">null</span>);</div><div class="line">                                ConstructorArgumentValues.ValueHolder valueHolder = <span class="keyword">new</span> ConstructorArgumentValues.ValueHolder(value);</div><div class="line">                                <span class="keyword">if</span> (StringUtils.hasLength(typeAttr)) &#123;</div><div class="line">                                     valueHolder.setType(typeAttr);</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</div><div class="line">                                     valueHolder.setName(nameAttr);</div><div class="line">                                &#125;</div><div class="line">                                valueHolder.setSource(extractSource(ele));</div><div class="line">                                <span class="keyword">if</span> (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) &#123;</div><div class="line">                                     <span class="keyword">error</span>(<span class="string">"Ambiguous constructor-arg entries for index "</span> + index, ele);</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">else</span> &#123;</div><div class="line">                                     bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder);</div><div class="line">                                &#125;</div><div class="line">                           &#125;</div><div class="line">                           <span class="keyword">finally</span> &#123;</div><div class="line">                                <span class="keyword">this</span>.parseState.pop();</div><div class="line">                           &#125;</div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (NumberFormatException ex) &#123;</div><div class="line">                     <span class="keyword">error</span>(<span class="string">"Attribute 'index' of tag 'constructor-arg' must be an integer"</span>, ele);</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                     <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> ConstructorArgumentEntry());</div><div class="line">                     Object value = parsePropertyValue(ele, bd, <span class="keyword">null</span>);</div><div class="line">                     ConstructorArgumentValues.ValueHolder valueHolder = <span class="keyword">new</span> ConstructorArgumentValues.ValueHolder(value);</div><div class="line">                     <span class="keyword">if</span> (StringUtils.hasLength(typeAttr)) &#123;</div><div class="line">                           valueHolder.setType(typeAttr);</div><div class="line">                     &#125;</div><div class="line">                     <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</div><div class="line">                           valueHolder.setName(nameAttr);</div><div class="line">                     &#125;</div><div class="line">                     valueHolder.setSource(extractSource(ele));</div><div class="line">                     bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">finally</span> &#123;</div><div class="line">                     <span class="keyword">this</span>.parseState.pop();</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="comment">//对构造函数中子元素的解析：</span></div><div class="line">     <span class="keyword">public</span> <span class="function">Object <span class="title">parsePropertyValue</span><span class="params">(Element ele, BeanDefinition bd, String propertyName)</span> </span>&#123;</div><div class="line">           String elementName = (propertyName != <span class="keyword">null</span>) ?</div><div class="line">                                <span class="string">"&lt;property&gt; element for property '"</span> + propertyName + <span class="string">"'"</span> :</div><div class="line">                                <span class="string">"&lt;constructor-arg&gt; element"</span>;</div><div class="line">           <span class="comment">// Should only have one child element: ref, value, list, etc.</span></div><div class="line">           NodeList nl = ele.getChildNodes();</div><div class="line">           Element subElement = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</div><div class="line">                Node node = nl.item(i);</div><div class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT) &amp;&amp;</div><div class="line">                           !nodeNameEquals(node, META_ELEMENT)) &#123;</div><div class="line">                     <span class="comment">// Child element is what we're looking for.</span></div><div class="line">                     <span class="comment">// 一个属性只能对应一种类型:ref、value、list等</span></div><div class="line">                     <span class="keyword">if</span> (subElement != <span class="keyword">null</span>) &#123;</div><div class="line">                           <span class="keyword">error</span>(elementName + <span class="string">" must not contain more than one sub-element"</span>, ele);</div><div class="line">                     &#125;</div><div class="line">                     <span class="keyword">else</span> &#123;</div><div class="line">                           subElement = (Element) node;</div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">boolean</span> hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE);</div><div class="line">           <span class="keyword">boolean</span> hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE);</div><div class="line">           <span class="keyword">if</span> ((hasRefAttribute &amp;&amp; hasValueAttribute) ||</div><div class="line">                     ((hasRefAttribute || hasValueAttribute) &amp;&amp; subElement != <span class="keyword">null</span>)) &#123;</div><div class="line">                <span class="keyword">error</span>(elementName +</div><div class="line">                           <span class="string">" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element"</span>, ele);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (hasRefAttribute) &#123;</div><div class="line">                String refName = ele.getAttribute(REF_ATTRIBUTE);</div><div class="line">                <span class="keyword">if</span> (!StringUtils.hasText(refName)) &#123;</div><div class="line">                     <span class="keyword">error</span>(elementName + <span class="string">" contains empty 'ref' attribute"</span>, ele);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//ref属性的处理</span></div><div class="line">                RuntimeBeanReference ref = <span class="keyword">new</span> RuntimeBeanReference(refName);</div><div class="line">                ref.setSource(extractSource(ele));</div><div class="line">                <span class="keyword">return</span> ref;</div><div class="line">           &#125;</div><div class="line">           <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(hasValueAttribute)</span> </span>&#123;</div><div class="line">                <span class="comment">//value属性的处理</span></div><div class="line">                TypedStringValue valueHolder = <span class="keyword">new</span> TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));</div><div class="line">                valueHolder.setSource(extractSource(ele));</div><div class="line">                <span class="keyword">return</span> valueHolder;</div><div class="line">           &#125;</div><div class="line">           <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(subElement != <span class="keyword">null</span>)</span> </span>&#123;</div><div class="line">                <span class="comment">//子元素的处理(比如map)</span></div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">parsePropertySubElement</span><span class="params">(subElement, bd)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Neither child element nor "ref" or "value" attribute found.</span></div><div class="line">                <span class="comment">//即没有ref又没有value也没有子元素</span></div><div class="line">                <span class="keyword">error</span>(elementName + <span class="string">" must specify a ref or value"</span>, ele);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">           &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>ref:<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="function"><span class="keyword">constructor</span>-<span class="title">arg</span> <span class="title">ref</span>="<span class="title">a</span>" &gt;</span></div></pre></td></tr></table></figure></p>
<p>value:<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="function"><span class="keyword">constructor</span>-<span class="title">arg</span> <span class="title">value</span>="<span class="title">a</span>" &gt;</span></div></pre></td></tr></table></figure></p>
<p>子元素：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="function"><span class="keyword">constructor</span>-<span class="title">arg</span> &gt;</span></div><div class="line">     &lt;<span class="title">map</span>&gt;</div><div class="line">          &lt;<span class="title">entry</span> <span class="title">key</span>="<span class="title">key</span>" <span class="title">value</span>="<span class="title">value</span>" /&gt;</div><div class="line">     &lt;/<span class="title">map</span>&gt;</div><div class="line">&lt;/<span class="title">constructor</span>-<span class="title">arg</span> &gt;</div></pre></td></tr></table></figure></p>
<p>子元素的处理(比如map)具体实现：实现了所有可支持子类的分类处理<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="keyword">public</span> <span class="function">Object <span class="title">parsePropertySubElement</span><span class="params">(Element ele, BeanDefinition bd)</span> </span>&#123;</div><div class="line">           <span class="function"><span class="keyword">return</span> <span class="title">parsePropertySubElement</span><span class="params">(ele, bd, <span class="keyword">null</span>)</span></span>;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="keyword">public</span> <span class="function">Object <span class="title">parsePropertySubElement</span><span class="params">(Element ele, BeanDefinition bd, String defaultValueType)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isDefaultNamespace(ele)) &#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">parseNestedCustomElement</span><span class="params">(ele, bd)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</div><div class="line">                BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd);</div><div class="line">                <span class="keyword">if</span> (nestedBd != <span class="keyword">null</span>) &#123;</div><div class="line">                     nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> nestedBd;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, REF_ELEMENT)) &#123;</div><div class="line">                <span class="comment">// A generic reference to any name of any bean.</span></div><div class="line">                String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE);</div><div class="line">                <span class="keyword">boolean</span> toParent = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</div><div class="line">                     <span class="comment">// A reference to the id of another bean in the same XML file.</span></div><div class="line">                     refName = ele.getAttribute(LOCAL_REF_ATTRIBUTE);</div><div class="line">                     <span class="keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</div><div class="line">                           <span class="comment">// A reference to the id of another bean in a parent context.</span></div><div class="line">                           refName = ele.getAttribute(PARENT_REF_ATTRIBUTE);</div><div class="line">                           toParent = <span class="keyword">true</span>;</div><div class="line">                           <span class="keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</div><div class="line">                                <span class="keyword">error</span>(<span class="string">"'bean', 'local' or 'parent' is required for &lt;ref&gt; element"</span>, ele);</div><div class="line">                                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                           &#125;</div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!StringUtils.hasText(refName)) &#123;</div><div class="line">                     <span class="keyword">error</span>(<span class="string">"&lt;ref&gt; element contains empty target attribute"</span>, ele);</div><div class="line">                     <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                RuntimeBeanReference ref = <span class="keyword">new</span> RuntimeBeanReference(refName, toParent);</div><div class="line">                ref.setSource(extractSource(ele));</div><div class="line">                <span class="keyword">return</span> ref;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, IDREF_ELEMENT)) &#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">parseIdRefElement</span><span class="params">(ele)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, VALUE_ELEMENT)) &#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">parseValueElement</span><span class="params">(ele, defaultValueType)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, NULL_ELEMENT)) &#123;</div><div class="line">                <span class="comment">// It's a distinguished null value. Let's wrap it in a TypedStringValue</span></div><div class="line">                <span class="comment">// object in order to preserve the source location.</span></div><div class="line">                TypedStringValue nullHolder = <span class="keyword">new</span> TypedStringValue(<span class="keyword">null</span>);</div><div class="line">                nullHolder.setSource(extractSource(ele));</div><div class="line">                <span class="keyword">return</span> nullHolder;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, ARRAY_ELEMENT)) &#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">parseArrayElement</span><span class="params">(ele, bd)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, LIST_ELEMENT)) &#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">parseListElement</span><span class="params">(ele, bd)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, SET_ELEMENT)) &#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">parseSetElement</span><span class="params">(ele, bd)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, MAP_ELEMENT)) &#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">parseMapElement</span><span class="params">(ele, bd)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, PROPS_ELEMENT)) &#123;</div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">parsePropsElement</span><span class="params">(ele)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">error</span>(<span class="string">"Unknown property sub-element: ["</span> + ele.getNodeName() + <span class="string">"]"</span>, ele);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">           &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="comment">//对属性的解析</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parsePropertyElements</span><span class="params">(Element beanEle, BeanDefinition bd)</span> </span>&#123;</div><div class="line">           NodeList nl = beanEle.getChildNodes();</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</div><div class="line">                Node node = nl.item(i);</div><div class="line">                <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, PROPERTY_ELEMENT)) &#123;</div><div class="line">                    <span class="comment">//对属性的解析</span></div><div class="line">                     parsePropertyElement((Element) node, bd);</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"test"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"test.TestClass"</span>&gt;</div><div class="line">     <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testStr"</span> <span class="attr">value</span>=<span class="string">"aaa"</span>/&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">parsePropertyElement</span><span class="params">(Element ele, BeanDefinition bd)</span> </span>&#123;</div><div class="line">           <span class="comment">//获取配置元素中name的值</span></div><div class="line">           String propertyName = ele.getAttribute(NAME_ATTRIBUTE);</div><div class="line">           <span class="keyword">if</span> (!StringUtils.hasLength(propertyName)) &#123;</div><div class="line">                <span class="keyword">error</span>(<span class="string">"Tag 'property' must have a 'name' attribute"</span>, ele);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> PropertyEntry(propertyName));</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//不允许多次对同一属性配置</span></div><div class="line">                <span class="keyword">if</span> (bd.getPropertyValues().contains(propertyName)) &#123;</div><div class="line">                     <span class="keyword">error</span>(<span class="string">"Multiple 'property' definitions for property '"</span> + propertyName + <span class="string">"'"</span>, ele);</div><div class="line">                     <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//和构造函数的解析用了同一个方法</span></div><div class="line">                Object val = parsePropertyValue(ele, bd, propertyName);</div><div class="line">                PropertyValue pv = <span class="keyword">new</span> PropertyValue(propertyName, val);</div><div class="line">                parseMetaElements(ele, pv);</div><div class="line">                pv.setSource(extractSource(ele));</div><div class="line">                bd.getPropertyValues().addPropertyValue(pv);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="keyword">this</span>.parseState.pop();</div><div class="line">           &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p><strong>至此我们完成了对XML文档到GenericBeanDefinition的转换。</strong></p>
<p>接下来看一下默认标签中自定义标签(这里的自定义类型是属性)的解析：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="keyword">public</span> <span class="function">BeanDefinitionHolder <span class="title">decorateBeanDefinitionIfRequired</span><span class="params">(Element ele, BeanDefinitionHolder definitionHolder)</span> </span>&#123;</div><div class="line">           <span class="function"><span class="keyword">return</span> <span class="title">decorateBeanDefinitionIfRequired</span><span class="params">(ele, definitionHolder, <span class="keyword">null</span>)</span></span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="keyword">public</span> <span class="function">BeanDefinitionHolder <span class="title">decorateBeanDefinitionIfRequired</span><span class="params">(</span></span></div><div class="line">                Element ele, BeanDefinitionHolder definitionHolder, BeanDefinition containingBd) &#123;</div><div class="line">           BeanDefinitionHolder finalDefinition = definitionHolder;</div><div class="line">           <span class="comment">// Decorate based on custom attributes first.</span></div><div class="line">           <span class="comment">//遍历所有的属性，看看是否有适用于修饰的属性</span></div><div class="line">           NamedNodeMap attributes = ele.getAttributes();</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attributes.getLength(); i++) &#123;</div><div class="line">                Node node = attributes.item(i);</div><div class="line">                finalDefinition = decorateIfRequired(node, finalDefinition, containingBd);</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// Decorate based on custom nested elements.</span></div><div class="line">           <span class="comment">//遍历所有的子节点，看看是否有适用于修饰的子元素</span></div><div class="line">           NodeList children = ele.getChildNodes();</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.getLength(); i++) &#123;</div><div class="line">                Node node = children.item(i);</div><div class="line">                <span class="keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;</div><div class="line">                     finalDefinition = decorateIfRequired(node, finalDefinition, containingBd);</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> finalDefinition;</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">//BeanDefinitionParserDelegate</span></div><div class="line"><span class="keyword">public</span> <span class="function">BeanDefinitionHolder <span class="title">decorateIfRequired</span><span class="params">(</span></span></div><div class="line">                Node node, BeanDefinitionHolder originalDef, BeanDefinition containingBd) &#123;</div><div class="line"></div><div class="line">                         <span class="comment">//获取自定义标签的命名空间</span></div><div class="line">           String namespaceUri = getNamespaceURI(node);</div><div class="line">           <span class="comment">//对于非默认标签进行修饰</span></div><div class="line">           <span class="keyword">if</span> (!isDefaultNamespace(namespaceUri)) &#123;</div><div class="line">                <span class="comment">//根据命名空间找到对应的处理器</span></div><div class="line">                NamespaceHandler <span class="keyword">handler</span> = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">handler</span> != <span class="keyword">null</span>) &#123;</div><div class="line">                     <span class="keyword">return</span> <span class="keyword">handler</span>.decorate(node, originalDef, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (namespaceUri != <span class="keyword">null</span> &amp;&amp; namespaceUri.startsWith(<span class="string">"http://www.springframework.org/"</span>)) &#123;</div><div class="line">                     <span class="keyword">error</span>(<span class="string">"Unable to locate Spring NamespaceHandler for XML schema namespace ["</span> + namespaceUri + <span class="string">"]"</span>, node);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                     <span class="comment">// A custom namespace, not to be handled by Spring - maybe "xml:...".</span></div><div class="line">                     <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                           logger.debug(<span class="string">"No Spring NamespaceHandler found for XML schema namespace ["</span> + namespaceUri + <span class="string">"]"</span>);</div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> originalDef;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p><strong>自此，对xml的解析和修饰已经完成，接下来就是注册了：</strong><br>入口：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//DefaultBeanDefinitionDocumentReader</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span>(<span class="params">Element ele, BeanDefinitionParserDelegate <span class="keyword">delegate</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</div><div class="line">        importBeanDefinitionResource(ele);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</div><div class="line">        processAliasRegistration(ele);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;<span class="comment">//Bean标签的解析及注册;只讲这块的代码</span></div><div class="line">        processBeanDefinition(ele, <span class="keyword">delegate</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</div><div class="line">        <span class="comment">// recurse</span></div><div class="line">        doRegisterBeanDefinitions(ele);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//DefaultBeanDefinitionDocumentReader</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span>(<span class="params">Element ele, BeanDefinitionParserDelegate <span class="keyword">delegate</span></span>) </span>&#123;</div><div class="line">		BeanDefinitionHolder bdHolder = <span class="keyword">delegate</span>.parseBeanDefinitionElement(ele);</div><div class="line">		<span class="keyword">if</span> (bdHolder != <span class="literal">null</span>) &#123;</div><div class="line">			bdHolder = <span class="keyword">delegate</span>.decorateBeanDefinitionIfRequired(ele, bdHolder);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// Register the final decorated instance.</span></div><div class="line">				<span class="comment">//注册</span></div><div class="line">				BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</div><div class="line">				getReaderContext().error(<span class="string">"Failed to register bean definition with name '"</span> +</div><div class="line">						bdHolder.getBeanName() + <span class="string">"'"</span>, ele, ex);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// Send registration event.</span></div><div class="line">			getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"><span class="comment">//BeanDefinitionReaderUtils</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span>(<span class="params"></span></span></div><div class="line">                BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</div><div class="line">                throws BeanDefinitionStoreException &#123;</div><div class="line">           <span class="comment">// Register bean definition under primary name.</span></div><div class="line">           <span class="comment">//使用beanName做唯一标识注册</span></div><div class="line">           String beanName = definitionHolder.getBeanName();</div><div class="line">           registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</div><div class="line">           <span class="comment">// Register aliases for bean name, if any.</span></div><div class="line">           <span class="comment">//注册所有的别名,下面会列出代码</span></div><div class="line">           String[] aliases = definitionHolder.getAliases();</div><div class="line">           <span class="keyword">if</span> (aliases != <span class="literal">null</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (String <span class="keyword">alias</span> : aliases) &#123;</div><div class="line">                     registry.registerAlias(beanName, <span class="keyword">alias</span>);</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<p>解析的beanDefinition都会被注册到beanDefinitionRegistry类型的实例registry中，对beanDefinition的注册分为了2部分，beanName的注册和别名的注册。<br>通过beanName注册beanDefinition：将beanDefinition直接放入到map中，以beanName为key。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//DefaultListableBeanFactory</span></div><div class="line"><span class="meta">@Override</span></div><div class="line">     <span class="keyword">public</span> void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</div><div class="line">                throws BeanDefinitionStoreException &#123;</div><div class="line">           Assert.hasText(beanName, <span class="string">"Bean name must not be empty"</span>);</div><div class="line">           Assert.notNull(beanDefinition, <span class="string">"BeanDefinition must not be null"</span>);</div><div class="line">           <span class="keyword">if</span> (beanDefinition instanceof AbstractBeanDefinition) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                     ((AbstractBeanDefinition) beanDefinition).validate();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</div><div class="line">                     <span class="keyword">throw</span> new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</div><div class="line">                                <span class="string">"Validation of bean definition failed"</span>, ex);</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           BeanDefinition oldBeanDefinition;</div><div class="line"></div><div class="line">                         <span class="comment">//this.beanDefinitionMap ： ConcurrentHashMap   线程安全的Map</span></div><div class="line">           oldBeanDefinition = <span class="keyword">this</span>.beanDefinitionMap.<span class="keyword">get</span>(beanName);</div><div class="line">           <span class="comment">//处理注册已经注册的beanName情况</span></div><div class="line">           <span class="keyword">if</span> (oldBeanDefinition != <span class="literal">null</span>) &#123;</div><div class="line">                <span class="comment">//如果对应的beanName已经注册且在配置中配置了bean不允许被覆盖，则抛出异常。</span></div><div class="line">                <span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</div><div class="line">                     <span class="keyword">throw</span> new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</div><div class="line">                                <span class="string">"Cannot register bean definition ["</span> + beanDefinition + <span class="string">"] for bean '"</span> + beanName +</div><div class="line">                                <span class="string">"': There is already ["</span> + oldBeanDefinition + <span class="string">"] bound."</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</div><div class="line">                     <span class="comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></div><div class="line">                     <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</div><div class="line">                           <span class="keyword">this</span>.logger.warn(<span class="string">"Overriding user-defined bean definition for bean '"</span> + beanName +</div><div class="line">                                     <span class="string">"' with a framework-generated bean definition: replacing ["</span> +</div><div class="line">                                     oldBeanDefinition + <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(oldBeanDefinition)) &#123;</div><div class="line">                     <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</div><div class="line">                           <span class="keyword">this</span>.logger.info(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</div><div class="line">                                     <span class="string">"' with a different definition: replacing ["</span> + oldBeanDefinition +</div><div class="line">                                     <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                     <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</div><div class="line">                           <span class="keyword">this</span>.logger.debug(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</div><div class="line">                                     <span class="string">"' with an equivalent definition: replacing ["</span> + oldBeanDefinition +</div><div class="line">                                     <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//注册beanDefinition</span></div><div class="line">                <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</div><div class="line">                     <span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></div><div class="line">                     <span class="comment">//会存在并发访问情况</span></div><div class="line">                     synchronized (<span class="keyword">this</span>.beanDefinitionMap) &#123;</div><div class="line">                           <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</div><div class="line">                           List&lt;String&gt; updatedDefinitions = new ArrayList&lt;String&gt;(<span class="keyword">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</div><div class="line">                          updatedDefinitions.addAll(<span class="keyword">this</span>.beanDefinitionNames);</div><div class="line">                           updatedDefinitions.add(beanName);</div><div class="line">                           <span class="keyword">this</span>.beanDefinitionNames = updatedDefinitions;</div><div class="line">                           <span class="keyword">if</span> (<span class="keyword">this</span>.manualSingletonNames.contains(beanName)) &#123;</div><div class="line">                                Set&lt;String&gt; updatedSingletons = new LinkedHashSet&lt;String&gt;(<span class="keyword">this</span>.manualSingletonNames);</div><div class="line">                                updatedSingletons.remove(beanName);</div><div class="line">                                <span class="keyword">this</span>.manualSingletonNames = updatedSingletons;</div><div class="line">                           &#125;</div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                     <span class="comment">// Still in startup registration phase</span></div><div class="line">                     <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</div><div class="line">                     <span class="keyword">this</span>.beanDefinitionNames.add(beanName);</div><div class="line">                     <span class="keyword">this</span>.manualSingletonNames.remove(beanName);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>.frozenBeanDefinitionNames = <span class="literal">null</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (oldBeanDefinition != <span class="literal">null</span> || containsSingleton(beanName)) &#123;</div><div class="line">                <span class="comment">//重置所有beanName对应的缓存</span></div><div class="line">                resetBeanDefinition(beanName);</div><div class="line">           &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<p>对beanName的注册处理方式上，主要有以下几个步骤：</p>
<ol>
<li>对AbstractBeanDefinition 的校验。</li>
<li>加入map缓存。</li>
<li>清除解析之前留下的对应的beanName的缓存。</li>
</ol>
<p><strong>通过别名注册beanDefinition</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//SimpleAliasRegistry</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerAlias</span>(<span class="params">String name, String <span class="keyword">alias</span></span>) </span>&#123;</div><div class="line">           Assert.hasText(name, <span class="string">"'name' must not be empty"</span>);</div><div class="line">           Assert.hasText(<span class="keyword">alias</span>, <span class="string">"'alias' must not be empty"</span>);</div><div class="line">           <span class="comment">//如果alias与beanName相同的话不记录alias，并删除对应的alias。</span></div><div class="line">           <span class="keyword">if</span> (<span class="keyword">alias</span>.<span class="keyword">equals</span>(name)) &#123;</div><div class="line">                <span class="keyword">this</span>.aliasMap.<span class="keyword">remove</span>(<span class="keyword">alias</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">                String registeredName = <span class="keyword">this</span>.aliasMap.<span class="keyword">get</span>(<span class="keyword">alias</span>);</div><div class="line">                <span class="keyword">if</span> (registeredName != <span class="literal">null</span>) &#123;</div><div class="line">                     <span class="keyword">if</span> (registeredName.<span class="keyword">equals</span>(name)) &#123;</div><div class="line">                           <span class="comment">// An existing alias - no need to re-register</span></div><div class="line">                           <span class="keyword">return</span>;</div><div class="line">                     &#125;</div><div class="line">                     <span class="comment">//如果alias不允许被覆盖，就抛出异常。</span></div><div class="line">                     <span class="keyword">if</span> (!allowAliasOverriding()) &#123;</div><div class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot register alias '"</span> + <span class="keyword">alias</span> + <span class="string">"' for name '"</span> +</div><div class="line">                                     name + <span class="string">"': It is already registered for name '"</span> + registeredName + <span class="string">"'."</span>);</div><div class="line">                     &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//alias循环检查</span></div><div class="line">                checkForAliasCircle(name, <span class="keyword">alias</span>);</div><div class="line">                <span class="comment">//注册alias。</span></div><div class="line">                <span class="keyword">this</span>.aliasMap.put(<span class="keyword">alias</span>, name);</div><div class="line">           &#125;</div><div class="line">     &#125;</div><div class="line"><span class="comment">//SimpleAliasRegistry</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkForAliasCircle</span>(<span class="params">String name, String <span class="keyword">alias</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (hasAlias(<span class="keyword">alias</span>, name)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot register alias '"</span> + <span class="keyword">alias</span> +</div><div class="line">                    <span class="string">"' for name '"</span> + name + <span class="string">"': Circular reference - '"</span> +</div><div class="line">                    name + <span class="string">"' is a direct or indirect alias for '"</span> + <span class="keyword">alias</span> + <span class="string">"' already"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="bean的加载"><a href="#bean的加载" class="headerlink" title="bean的加载"></a>bean的加载</h2><p>启动spring容器的时候只完成了bean的解析及注册，只有在用到bean的时候才会开始bean的加载(比如通过注解得到对象或者getBean的时候)<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">springTest</span> <span class="params">()</span> </span>&#123;</div><div class="line">      XmlBeanFactory bf = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">"beanFactory.xml"</span>));</div><div class="line">      SpringTest bean  = (SpringTest)bf.getBean(<span class="string">"springTest"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbstractBeanFactory</span></div><div class="line">@Override</div><div class="line"><span class="keyword">public</span> <span class="keyword">Object</span> getBean(<span class="keyword">String</span> name) <span class="keyword">throws</span> BeansException &#123;</div><div class="line">      <span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//AbstractBeanFactory</span></div><div class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line"><span class="keyword">protected</span> &lt;T&gt; T doGetBean(</div><div class="line">           <span class="keyword">final</span> <span class="keyword">String</span> name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> <span class="keyword">Object</span>[] args, <span class="built_in">boolean</span> typeCheckOnly)</div><div class="line">           <span class="keyword">throws</span> BeansException &#123;</div><div class="line"></div><div class="line">                    <span class="comment">//提取对应的beanName</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">String</span> beanName = transformedBeanName(name);</div><div class="line">      <span class="keyword">Object</span> bean;</div><div class="line">      <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></div><div class="line">      <span class="comment">//首先使用这段代码为了避免循环依赖；</span></div><div class="line">      <span class="keyword">Object</span> sharedInstance = getSingleton(beanName);</div><div class="line">      <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</div><div class="line">                      logger.debug(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</div><div class="line">                                <span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                      logger.debug(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//返回对应的实例</span></div><div class="line">           bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">// Fail if we're already creating this bean instance:</span></div><div class="line">           <span class="comment">// We're assumably within a circular reference.</span></div><div class="line">           <span class="comment">//只有在单例情况才会尝试解决循环依赖，原型模式情况下，如果存在A中有B的属性，B中有A的属性，那么当依赖注入的时候，就会产生当A还未创建完的时候，因为对于B的创建再次返回创建A，造成循环依赖，也就是下面的情况。</span></div><div class="line">           <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// Check if bean definition exists in this factory.</span></div><div class="line">           BeanFactory parentBeanFactory = getParentBeanFactory();</div><div class="line">           <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</div><div class="line">                <span class="comment">// Not found -&gt; check parent.</span></div><div class="line">                <span class="keyword">String</span> nameToLookup = originalBeanName(name);</div><div class="line">                <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</div><div class="line">                      <span class="comment">// Delegation to parent with explicit args.</span></div><div class="line">                      <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                      <span class="comment">// No args -&gt; delegate to standard getBean method.</span></div><div class="line">                      <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (!typeCheckOnly) &#123;</div><div class="line">                markBeanAsCreated(beanName);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</div><div class="line">                checkMergedBeanDefinition(mbd, beanName, args);</div><div class="line">                <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></div><div class="line">                <span class="keyword">String</span>[] dependsOn = mbd.getDependsOn();</div><div class="line">                <span class="comment">//若存在依赖则需要递归实例化依赖的bean</span></div><div class="line">                <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</div><div class="line">                      <span class="keyword">for</span> (<span class="keyword">String</span> dep : dependsOn) &#123;</div><div class="line">                           <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</div><div class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</div><div class="line">                                           <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</div><div class="line">                           &#125;</div><div class="line">                           registerDependentBean(dep, beanName);</div><div class="line">                           getBean(dep);</div><div class="line">                      &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// Create bean instance.</span></div><div class="line">                <span class="comment">//实例化依赖的bean后遍可以实例化mbd本身</span></div><div class="line">                <span class="comment">//singleton模式</span></div><div class="line">                <span class="keyword">if</span> (mbd.isSingleton()) &#123;</div><div class="line">                      <span class="comment">//下面会解释这个,bean获取过程(如何获取单例)</span></div><div class="line">                      sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</div><div class="line">                           @Override</div><div class="line">                           <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</div><div class="line">                                <span class="keyword">try</span> &#123;</div><div class="line">                                      <span class="keyword">return</span> createBean(beanName, mbd, args);</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">                                      <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></div><div class="line">                                      <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></div><div class="line">                                      <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></div><div class="line">                                     destroySingleton(beanName);</div><div class="line">                                      <span class="keyword">throw</span> ex;</div><div class="line">                                &#125;</div><div class="line">                           &#125;</div><div class="line">                      &#125;);</div><div class="line">                      bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</div><div class="line">                      <span class="comment">// It's a prototype -&gt; create a new instance.</span></div><div class="line">                      <span class="keyword">Object</span> prototypeInstance = <span class="keyword">null</span>;</div><div class="line">                      <span class="keyword">try</span> &#123;</div><div class="line">                           beforePrototypeCreation(beanName);</div><div class="line">                           <span class="comment">//创建bean,下面会讲到</span></div><div class="line">                           prototypeInstance = createBean(beanName, mbd, args);</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">finally</span> &#123;</div><div class="line">                           afterPrototypeCreation(beanName);</div><div class="line">                      &#125;</div><div class="line">                      bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                      <span class="comment">//指定的scope上实例化bean</span></div><div class="line">                      <span class="keyword">String</span> scopeName = mbd.getScope();</div><div class="line">                      <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.<span class="built_in">get</span>(scopeName);</div><div class="line">                      <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</div><div class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">try</span> &#123;</div><div class="line">                           <span class="keyword">Object</span> scopedInstance = scope.<span class="built_in">get</span>(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</div><div class="line">                                @Override</div><div class="line">                                <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</div><div class="line">                                     beforePrototypeCreation(beanName);</div><div class="line">                                      <span class="keyword">try</span> &#123;</div><div class="line">                                           <span class="keyword">return</span> createBean(beanName, mbd, args);</div><div class="line">                                      &#125;</div><div class="line">                                      <span class="keyword">finally</span> &#123;</div><div class="line">                                           afterPrototypeCreation(beanName);</div><div class="line">                                      &#125;</div><div class="line">                                &#125;</div><div class="line">                           &#125;);</div><div class="line">                           <span class="comment">//bean的实例化</span></div><div class="line">                           bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">catch</span> (IllegalStateException ex) &#123;</div><div class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</div><div class="line">                                      <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</div><div class="line">                                      <span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</div><div class="line">                                      ex);</div><div class="line">                      &#125;</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">                cleanupAfterBeanCreationFailure(beanName);</div><div class="line">                <span class="keyword">throw</span> ex;</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Check if required type matches the type of the actual bean instance.</span></div><div class="line">      <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; bean != <span class="keyword">null</span> &amp;&amp; !requiredType.isAssignableFrom(bean.getClass())) &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> getTypeConverter().convertIfNecessary(bean, requiredType);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</div><div class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                      logger.debug(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</div><div class="line">                                ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> (T) bean;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个加载过程涉及步骤如下：</p>
<ol>
<li>转换对应beanName：<br>  取出factoryBean的修饰符：如果name=”&amp;&amp;aa”，会去掉&amp;使name=”aa”;<br>  取指定alias别名所表示的最终beanName；</li>
<li>尝试从缓存中获取单例<br>单例在Spring的同一个容器中只会被创建一次，后续再获取bean，就直接从单例缓存中获取了。这里只是尝试加载，如果加载不成功，就从singletonFactories中加载。因为在创建单例bean的时候会存在依赖注入的情况，而在创建依赖的时候为了避免循环依赖，在Spring中创建bean的原则是不等bean创建完成就会将创建bean的ObjectFactory提早曝光加入到缓存中，一旦下一个bean创建时需要依赖上一个bean则直接使用ObjectFactory。</li>
<li>bean的实例化(缓存中记录的只是最原始的bean状态，getObjectForBeanInstance )</li>
<li>原型模式的依赖检查(循环依赖)</li>
<li>检测parentBeanFactory</li>
<li>将存储XML配置文件的 GenericBeanDefinition 转换为RootBeanDefinition</li>
<li>寻找依赖：在Spring的加载顺序中，在初始化某一个bean的时候，首先会初始化这个bean所对应的依赖。</li>
<li>针对不同的scope进行bean的创建(最重要)</li>
<li>类型转换</li>
</ol>
<p>一般情况下，Spring通过反射机制利用bean的class属性指定实现类来实例化bean。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//DefaultSingletonBeanRegistry</span></div><div class="line"><span class="comment">//缓存中获取单例bean</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> Object getSingleton(String beanName) &#123;</div><div class="line">      <span class="keyword">return</span> getSingleton(beanName, <span class="literal">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//DefaultSingletonBeanRegistry</span></div><div class="line"><span class="keyword">protected</span> Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</div><div class="line">      <span class="comment">//检查缓存中是否存在实例</span></div><div class="line">      Object singletonObject = <span class="keyword">this</span>.singletonObjects.<span class="keyword">get</span>(beanName);</div><div class="line">      <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</div><div class="line">           <span class="comment">//锁定全局变量并进行处理</span></div><div class="line">           synchronized (<span class="keyword">this</span>.singletonObjects) &#123;</div><div class="line">                singletonObject = <span class="keyword">this</span>.earlySingletonObjects.<span class="keyword">get</span>(beanName);</div><div class="line">                <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; allowEarlyReference) &#123;</div><div class="line">                      ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.<span class="keyword">get</span>(beanName);</div><div class="line">                      <span class="keyword">if</span> (singletonFactory != <span class="literal">null</span>) &#123;</div><div class="line">                           singletonObject = singletonFactory.getObject();</div><div class="line">                           <span class="comment">//记录在缓存中,earlySingletonObjects和singletonFactories互斥</span></div><div class="line">                           <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</div><div class="line">                           <span class="keyword">this</span>.singletonFactories.remove(beanName);</div><div class="line">                      &#125;</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="literal">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//DefaultSingletonBeanRegistry</span></div><div class="line"><span class="comment">//获取单例：如果缓存中没有，就要从头开始bean的获取过程</span></div><div class="line"><span class="keyword">public</span> Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</div><div class="line">      Assert.notNull(beanName, <span class="string">"'beanName' must not be null"</span>);</div><div class="line">      synchronized (<span class="keyword">this</span>.singletonObjects) &#123;</div><div class="line">           Object singletonObject = <span class="keyword">this</span>.singletonObjects.<span class="keyword">get</span>(beanName);</div><div class="line">           <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.singletonsCurrentlyInDestruction) &#123;</div><div class="line">                      <span class="keyword">throw</span> new BeanCreationNotAllowedException(beanName,</div><div class="line">                                <span class="string">"Singleton bean creation not allowed while singletons of this factory are in destruction "</span> +</div><div class="line">                                <span class="string">"(Do not request a bean from a BeanFactory in a destroy method implementation!)"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                      logger.debug(<span class="string">"Creating shared instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//记录加载状态，将当前正在要创建的bean记录在缓存中，可以对循环依赖进行检测</span></div><div class="line">                beforeSingletonCreation(beanName);</div><div class="line">                boolean newSingleton = <span class="literal">false</span>;</div><div class="line">                boolean recordSuppressedExceptions = (<span class="keyword">this</span>.suppressedExceptions == <span class="literal">null</span>);</div><div class="line">                <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</div><div class="line">                      <span class="keyword">this</span>.suppressedExceptions = new LinkedHashSet&lt;Exception&gt;();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                      singletonObject = singletonFactory.getObject();</div><div class="line">                      newSingleton = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (IllegalStateException ex) &#123;</div><div class="line">                      <span class="comment">// Has the singleton object implicitly appeared in the meantime -&gt;</span></div><div class="line">                      <span class="comment">// if yes, proceed with it since the exception indicates that state.</span></div><div class="line">                      singletonObject = <span class="keyword">this</span>.singletonObjects.<span class="keyword">get</span>(beanName);</div><div class="line">                      <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</div><div class="line">                           <span class="keyword">throw</span> ex;</div><div class="line">                      &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (BeanCreationException ex) &#123;</div><div class="line">                      <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</div><div class="line">                           <span class="keyword">for</span> (Exception suppressedException : <span class="keyword">this</span>.suppressedExceptions) &#123;</div><div class="line">                                ex.addRelatedCause(suppressedException);</div><div class="line">                           &#125;</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">throw</span> ex;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">finally</span> &#123;</div><div class="line">                      <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</div><div class="line">                           <span class="keyword">this</span>.suppressedExceptions = <span class="literal">null</span>;</div><div class="line">                      &#125;</div><div class="line">                      afterSingletonCreation(beanName);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (newSingleton) &#123;</div><div class="line">                      <span class="comment">//加入缓存</span></div><div class="line">                      addSingleton(beanName, singletonObject);</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="literal">null</span>);</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>singletonObjects</strong>：用于保存beanName和创建bean实例之间的关系，beanname–&gt; beaninstance<br><strong>singletonFactories</strong>：用于保存beanName和创建bean工厂之间的关系，beanname–&gt; ObjectFactory<br><strong>earlySingletonObjects</strong>：用于保存beanName和创建bean实例之间的关系，和singletonObjects不同的是，当一个单例bean被放到这里之后，当bean还在创建过程中，就可以被getBean获取到，其目的是为了检测循环引用。</p>
<p>bean的实例化(缓存中记录的只是最原始的bean状态，getObjectForBeanInstance )<br>AbstractBeanFactory.getObjectForBeanInstance<br>我们需要的是工厂bean中定义的factory-method方法中返回的bean而不是初始状态的bean，这个方法就是完成这个工作的。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbstractBeanFactory</span></div><div class="line"><span class="keyword">protected</span> <span class="type">Object</span> getObjectForBeanInstance(</div><div class="line">           <span class="type">Object</span> beanInstance, <span class="type">String</span> name, <span class="type">String</span> beanName, <span class="type">RootBeanDefinition</span> mbd) &#123;</div><div class="line">      <span class="comment">// Don't let calling code try to dereference the factory if the bean isn't a factory.</span></div><div class="line">      <span class="comment">//如果指定的beanName是工厂相关(&amp;为前缀)且beanInstance 又不是FactoryBean 类型则验证不通过</span></div><div class="line">      <span class="keyword">if</span> (<span class="type">BeanFactoryUtils</span>.isFactoryDereference(name) &amp;&amp; !(beanInstance instanceof <span class="type">FactoryBean</span>)) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanIsNotAFactoryException</span>(transformedBeanName(name), beanInstance.getClass());</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></div><div class="line">      <span class="comment">// If it's a FactoryBean, we use it to create a bean instance, unless the</span></div><div class="line">      <span class="comment">// caller actually wants a reference to the factory.</span></div><div class="line">      <span class="keyword">if</span> (!(beanInstance instanceof <span class="type">FactoryBean</span>) || <span class="type">BeanFactoryUtils</span>.isFactoryDereference(name)) &#123;</div><div class="line">           <span class="keyword">return</span> beanInstance;</div><div class="line">      &#125;</div><div class="line">      <span class="type">Object</span> <span class="class"><span class="keyword">object</span> </span>= <span class="literal">null</span>;</div><div class="line">      <span class="keyword">if</span> (mbd == <span class="literal">null</span>) &#123;</div><div class="line">           <span class="class"><span class="keyword">object</span> </span>= getCachedObjectForFactoryBean(beanName);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">==</span> <span class="title">null</span>) </span>&#123;</div><div class="line">           <span class="comment">// Return bean instance from factory.</span></div><div class="line">           <span class="comment">//明确知道beanInstance 是FactoryBean类型</span></div><div class="line">           <span class="type">FactoryBean</span>&lt;?&gt; factory = (<span class="type">FactoryBean</span>&lt;?&gt;) beanInstance;</div><div class="line">           <span class="comment">// Caches object obtained from FactoryBean if it is a singleton.</span></div><div class="line">           <span class="keyword">if</span> (mbd == <span class="literal">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</div><div class="line">                mbd = getMergedLocalBeanDefinition(beanName);</div><div class="line">           &#125;</div><div class="line">           boolean synthetic = (mbd != <span class="literal">null</span> &amp;&amp; mbd.isSynthetic());</div><div class="line">           <span class="comment">//核心代码</span></div><div class="line">           <span class="class"><span class="keyword">object</span> </span>= getObjectFromFactoryBean(factory, beanName, !synthetic);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//FactoryBeanRegistrySupport</span></div><div class="line"><span class="keyword">protected</span> <span class="type">Object</span> getObjectFromFactoryBean(<span class="type">FactoryBean</span>&lt;?&gt; factory, <span class="type">String</span> beanName, boolean shouldPostProcess) &#123;</div><div class="line">      <span class="keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</div><div class="line">           synchronized (getSingletonMutex()) &#123;</div><div class="line">                <span class="type">Object</span> <span class="class"><span class="keyword">object</span> </span>= <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</div><div class="line">                <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">==</span> <span class="title">null</span>) </span>&#123;</div><div class="line">                      <span class="class"><span class="keyword">object</span> </span>= doGetObjectFromFactoryBean(factory, beanName);</div><div class="line">                      <span class="comment">// Only post-process and store if not put there already during getObject() call above</span></div><div class="line">                      <span class="comment">// (e.g. because of circular reference processing triggered by custom getBean calls)</span></div><div class="line">                      <span class="type">Object</span> alreadyThere = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</div><div class="line">                      <span class="keyword">if</span> (alreadyThere != <span class="literal">null</span>) &#123;</div><div class="line">                           <span class="class"><span class="keyword">object</span> </span>= alreadyThere;</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">else</span> &#123;</div><div class="line">                           <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">!=</span> <span class="title">null</span> <span class="title">&amp;&amp;</span> <span class="title">shouldPostProcess</span>) </span>&#123;</div><div class="line">                                <span class="keyword">try</span> &#123;</div><div class="line">                                      <span class="comment">//调用ObjectFactory的后处理器</span></div><div class="line">                                      <span class="class"><span class="keyword">object</span> </span>= postProcessObjectFromFactoryBean(<span class="class"><span class="keyword">object</span>, <span class="title">beanName</span>)</span>;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">catch</span> (<span class="type">Throwable</span> ex) &#123;</div><div class="line">                                      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCreationException</span>(beanName,</div><div class="line">                                                <span class="string">"Post-processing of FactoryBean's singleton object failed"</span>, ex);</div><div class="line">                                &#125;</div><div class="line">                           &#125;</div><div class="line">                           <span class="keyword">this</span>.factoryBeanObjectCache.put(beanName, (<span class="class"><span class="keyword">object</span> <span class="title">!=</span> <span class="title">null</span> <span class="title">?</span> <span class="title">object</span> </span>: <span class="type">NULL_OBJECT</span>));</div><div class="line">                      &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> (<span class="class"><span class="keyword">object</span> <span class="title">!=</span> <span class="title">NULL_OBJECT</span> <span class="title">?</span> <span class="title">object</span> </span>: <span class="literal">null</span>);</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">//核心代码</span></div><div class="line">           <span class="type">Object</span> <span class="class"><span class="keyword">object</span> </span>= doGetObjectFromFactoryBean(factory, beanName);</div><div class="line">           <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">!=</span> <span class="title">null</span> <span class="title">&amp;&amp;</span> <span class="title">shouldPostProcess</span>) </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                      <span class="class"><span class="keyword">object</span> </span>= postProcessObjectFromFactoryBean(<span class="class"><span class="keyword">object</span>, <span class="title">beanName</span>)</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (<span class="type">Throwable</span> ex) &#123;</div><div class="line">                      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCreationException</span>(beanName, <span class="string">"Post-processing of FactoryBean's object failed"</span>, ex);</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//FactoryBeanRegistrySupport</span></div><div class="line"><span class="keyword">private</span> <span class="type">Object</span> doGetObjectFromFactoryBean(<span class="keyword">final</span> <span class="type">FactoryBean</span>&lt;?&gt; factory, <span class="keyword">final</span> <span class="type">String</span> beanName)</div><div class="line">		<span class="keyword">throws</span> <span class="type">BeanCreationException</span> &#123;</div><div class="line"></div><div class="line">	<span class="type">Object</span> <span class="class"><span class="keyword">object</span></span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="type">System</span>.getSecurityManager() != <span class="literal">null</span>) &#123;</div><div class="line">			<span class="type">AccessControlContext</span> acc = getAccessControlContext();</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="class"><span class="keyword">object</span> </span>= <span class="type">AccessController</span>.doPrivileged(<span class="keyword">new</span> <span class="type">PrivilegedExceptionAction</span>&lt;<span class="type">Object</span>&gt;() &#123;</div><div class="line">					<span class="meta">@Override</span></div><div class="line">					public <span class="type">Object</span> run() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</div><div class="line">							<span class="keyword">return</span> factory.getObject();</div><div class="line">						&#125;</div><div class="line">					&#125;, acc);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (<span class="type">PrivilegedActionException</span> pae) &#123;</div><div class="line">				<span class="keyword">throw</span> pae.getException();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="class"><span class="keyword">object</span> </span>= factory.getObject();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (<span class="type">FactoryBeanNotInitializedException</span> ex) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCurrentlyInCreationException</span>(beanName, ex.toString());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (<span class="type">Throwable</span> ex) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCreationException</span>(beanName, <span class="string">"FactoryBean threw exception on object creation"</span>, ex);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Do not accept a null value for a FactoryBean that's not fully</span></div><div class="line">	<span class="comment">// initialized yet: Many FactoryBeans just return null then.</span></div><div class="line">	<span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">==</span> <span class="title">null</span> <span class="title">&amp;&amp;</span> <span class="title">isSingletonCurrentlyInCreation</span>(<span class="params">beanName</span>)) </span>&#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCurrentlyInCreationException</span>(</div><div class="line">				beanName, <span class="string">"FactoryBean which is currently in creation returned null from getObject"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来要真正创建bean了：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbstractAutowireCapableBeanFactory</span></div><div class="line">@Override</div><div class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> createBean(<span class="keyword">String</span> beanName, RootBeanDefinition mbd, <span class="keyword">Object</span>[] args) <span class="keyword">throws</span> BeanCreationException &#123;</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">           logger.debug(<span class="string">"Creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</div><div class="line">      &#125;</div><div class="line">      RootBeanDefinition mbdToUse = mbd;</div><div class="line">      <span class="comment">// Make sure bean class is actually resolved at this point, and</span></div><div class="line">      <span class="comment">// clone the bean definition in case of a dynamically resolved Class</span></div><div class="line">      <span class="comment">// which cannot be stored in the shared merged bean definition.</span></div><div class="line">      <span class="comment">//锁定class,根据设置的class属性或者根据className来解析class</span></div><div class="line">      Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</div><div class="line">      <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</div><div class="line">           mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</div><div class="line">           mbdToUse.setBeanClass(resolvedClass);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Prepare method overrides.</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//验证及准备覆盖的方法(lookup-method及replace-method配置功能的实现)</span></div><div class="line">           mbdToUse.prepareMethodOverrides();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</div><div class="line">                      beanName, <span class="string">"Validation of method overrides failed"</span>, ex);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></div><div class="line">           <span class="keyword">Object</span> bean = resolveBeforeInstantiation(beanName, mbdToUse);</div><div class="line">           <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> bean;</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</div><div class="line">                      <span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//真正创建bean的方法,下面会贴上代码</span></div><div class="line">      <span class="keyword">Object</span> beanInstance = doCreateBean(beanName, mbdToUse, args);</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">           logger.debug(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> beanInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>真正创建bean的方法在<strong>doCreateBean</strong> 里面，在创建之前再讲下循环依赖：<br>循环依赖和循环调用是不同的，循环调用是死循环，循环依赖是循环引用；两个或多个bean之间互相持有对方。<br>Spring容器的循环依赖包括构造器循环依赖(无法解决)和setter循环依赖。</p>
<p>构造器循环依赖：<br>A、B、C循环依赖时，<br>    <img src="/uploads/spring8.jpg" alt=""><br>setter循环依赖<br>setter循环依赖是通过Spring容器提前暴露刚完成构造器注入但未完成其他步骤的bean来完成，而且只能解决单例作用域的bean循环依赖，通过提前暴露一个单例工厂方法，从而使其他bean能引用到该bean。<br>prototype：对于prototype作用域bean，Spring容器无法完成依赖注入，因为Spring容器不进行缓存prototype作用域的bean，因此无法提前暴露一个创建中的bean。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbstractAutowireCapableBeanFactory</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> doCreateBean(<span class="keyword">final</span> <span class="keyword">String</span> beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> <span class="keyword">Object</span>[] args)</div><div class="line">           <span class="keyword">throws</span> BeanCreationException &#123;</div><div class="line">      <span class="comment">// Instantiate the bean.</span></div><div class="line">      BeanWrapper instanceWrapper = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">if</span> (mbd.isSingleton()) &#123;</div><div class="line">           instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="comment">//根据指定bean使用对应的策略创建新的实例，如：工厂方法，构造函数自动注入，简单初始化,下面会贴上代码</span></div><div class="line">           instanceWrapper = createBeanInstance(beanName, mbd, args);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">final</span> <span class="keyword">Object</span> bean = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedInstance() : <span class="keyword">null</span>);</div><div class="line">      Class&lt;?&gt; beanType = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedClass() : <span class="keyword">null</span>);</div><div class="line">      mbd.resolvedTargetType = beanType;</div><div class="line">      <span class="comment">// Allow post-processors to modify the merged bean definition.</span></div><div class="line">      <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</div><div class="line">           <span class="keyword">if</span> (!mbd.postProcessed) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                     applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">                      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</div><div class="line">                                <span class="string">"Post-processing of merged bean definition failed"</span>, ex);</div><div class="line">                &#125;</div><div class="line">                mbd.postProcessed = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Eagerly cache singletons to be able to resolve circular references</span></div><div class="line">      <span class="comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></div><div class="line">      <span class="comment">//是否需要提前曝光：单例&amp;允许循环依赖(这个可以手动设置)&amp;当前bean正在创建中，检测循环依赖(记录创建bean的ObjectFactory)</span></div><div class="line">      <span class="built_in">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</div><div class="line">                isSingletonCurrentlyInCreation(beanName));</div><div class="line">      <span class="keyword">if</span> (earlySingletonExposure) &#123;</div><div class="line">           <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"Eagerly caching bean '"</span> + beanName +</div><div class="line">                           <span class="string">"' to allow for resolving potential circular references"</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//为避免后期循环依赖，可以在bean初始化完成前将创建实例的ObjectFactory加入工厂</span></div><div class="line">           addSingletonFactory(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</div><div class="line">                @Override</div><div class="line">                <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</div><div class="line">                      <span class="comment">//AOP在这里将advice动态织入bean中，若没有直接返回bean</span></div><div class="line">                      <span class="keyword">return</span> getEarlyBeanReference(beanName, mbd, bean);</div><div class="line">                &#125;</div><div class="line">           &#125;);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Initialize the bean instance.</span></div><div class="line">      <span class="keyword">Object</span> exposedObject = bean;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//对bean进行填充，将各个属性值注入，其中，可能存在依赖于其他bean的属性，则会递归初始依赖bean(下面会贴出代码)</span></div><div class="line">           populateBean(beanName, mbd, instanceWrapper);</div><div class="line">           <span class="keyword">if</span> (exposedObject != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//调用初始化方法</span></div><div class="line">                exposedObject = initializeBean(beanName, exposedObject, mbd);</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">           <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</div><div class="line">                <span class="keyword">throw</span> (BeanCreationException) ex;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">                           mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (earlySingletonExposure) &#123;</div><div class="line">           <span class="keyword">Object</span> earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</div><div class="line">           <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (exposedObject == bean) &#123;</div><div class="line">                      exposedObject = earlySingletonReference;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</div><div class="line">                      <span class="keyword">String</span>[] dependentBeans = getDependentBeans(beanName);</div><div class="line">                      Set&lt;<span class="keyword">String</span>&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;<span class="keyword">String</span>&gt;(dependentBeans.length);</div><div class="line">                      <span class="keyword">for</span> (<span class="keyword">String</span> dependentBean : dependentBeans) &#123;</div><div class="line">                           <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</div><div class="line">                                actualDependentBeans.<span class="built_in">add</span>(dependentBean);</div><div class="line">                           &#125;</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</div><div class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</div><div class="line">                                      <span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</div><div class="line">                                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</div><div class="line">                                      <span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</div><div class="line">                                      <span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</div><div class="line">                                      <span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</div><div class="line">                                      <span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</div><div class="line">                      &#125;</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Register bean as disposable.</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//根据scope进行注册</span></div><div class="line">           registerDisposableBeanIfNecessary(beanName, bean, mbd);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">                      mbd.getResourceDescription(), beanName, <span class="string">"Invalid destruction signature"</span>, ex);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> exposedObject;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbstractAutowireCapableBeanFactory</span></div><div class="line"><span class="comment">//创建bean实例</span></div><div class="line"><span class="keyword">protected</span> <span class="function">BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, Object[] args)</span> </span>&#123;</div><div class="line">      <span class="comment">// Make sure bean class is actually resolved at this point.</span></div><div class="line">      Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</div><div class="line">      <span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</div><div class="line">                      <span class="string">"Bean class isn't public, and non-public access not allowed: "</span> + beanClass.getName());</div><div class="line">      &#125;</div><div class="line"></div><div class="line">                    <span class="comment">//如果工厂方法不为空，则使用工厂方法初始化策略</span></div><div class="line">      <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>)  &#123;</div><div class="line">           <span class="function"><span class="keyword">return</span> <span class="title">instantiateUsingFactoryMethod</span><span class="params">(beanName, mbd, args)</span></span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Shortcut when re-creating the same bean...</span></div><div class="line">      <span class="keyword">boolean</span> resolved = <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">boolean</span> autowireNecessary = <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</div><div class="line">                <span class="comment">//一个类有多个构造函数，每个构造函数都有不同的参数，所以调用前需要先根据参数锁定构造函数或对应的工厂方法</span></div><div class="line">                <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="keyword">null</span>) &#123;</div><div class="line">                      resolved = <span class="keyword">true</span>;</div><div class="line">                      autowireNecessary = mbd.constructorArgumentsResolved;</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//如果已经解析过则使用解析好的构造函数方法不需要再次锁定</span></div><div class="line">      <span class="keyword">if</span> (resolved) &#123;</div><div class="line">           <span class="keyword">if</span> (autowireNecessary) &#123;</div><div class="line">                <span class="comment">//构造函数自动注入</span></div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">autowireConstructor</span><span class="params">(beanName, mbd, <span class="keyword">null</span>, <span class="keyword">null</span>)</span></span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//使用默认构造函数构造</span></div><div class="line">                <span class="function"><span class="keyword">return</span> <span class="title">instantiateBean</span><span class="params">(beanName, mbd)</span></span>;</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Need to determine the constructor...</span></div><div class="line">      <span class="comment">//需要根据参数解析构造函数</span></div><div class="line">      Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</div><div class="line">      <span class="keyword">if</span> (ctors != <span class="keyword">null</span> ||</div><div class="line">                mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</div><div class="line">                mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</div><div class="line">           <span class="comment">//带参数的实例化,下面会贴上代码</span></div><div class="line">           <span class="function"><span class="keyword">return</span> <span class="title">autowireConstructor</span><span class="params">(beanName, mbd, ctors, args)</span></span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// No special handling: simply use no-arg constructor.</span></div><div class="line">      <span class="comment">//不带参构造函数,下面会贴出代码</span></div><div class="line">      <span class="function"><span class="keyword">return</span> <span class="title">instantiateBean</span><span class="params">(beanName, mbd)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbstractAutowireCapableBeanFactory</span></div><div class="line"><span class="comment">//带参数的实例化</span></div><div class="line"><span class="keyword">protected</span> BeanWrapper autowireConstructor(                                                                                  </div><div class="line">           <span class="keyword">String</span> beanName, RootBeanDefinition mbd, Constructor&lt;?&gt;[] ctors, <span class="keyword">Object</span>[] explicitArgs) &#123;                        </div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ConstructorResolver(<span class="keyword">this</span>).autowireConstructor(beanName, mbd, ctors, explicitArgs);                         </div><div class="line">&#125;                                                                                                                           </div><div class="line">                                                                         <span class="comment">//ConstructorResolver                                       </span></div><div class="line"><span class="keyword">public</span> BeanWrapper autowireConstructor(<span class="keyword">final</span> <span class="keyword">String</span> beanName, <span class="keyword">final</span> RootBeanDefinition mbd,                                 </div><div class="line">           Constructor&lt;?&gt;[] chosenCtors, <span class="keyword">final</span> <span class="keyword">Object</span>[] explicitArgs) &#123;                                                     </div><div class="line">      BeanWrapperImpl bw = <span class="keyword">new</span> BeanWrapperImpl();                                                                           </div><div class="line">      <span class="keyword">this</span>.beanFactory.initBeanWrapper(bw);                                                                                 </div><div class="line">      Constructor&lt;?&gt; constructorToUse = <span class="keyword">null</span>;                                                                               </div><div class="line">      ArgumentsHolder argsHolderToUse = <span class="keyword">null</span>;                                                                               </div><div class="line">      <span class="keyword">Object</span>[] argsToUse = <span class="keyword">null</span>;                                                                                            </div><div class="line">                                                                                                                            </div><div class="line">                    <span class="comment">//如果getBean方法调用的时候指定方法参数那么直接使用                                                                          </span></div><div class="line">      <span class="keyword">if</span> (explicitArgs != <span class="keyword">null</span>) &#123;                                                                                           </div><div class="line">           argsToUse = explicitArgs;                                                                                        </div><div class="line">      &#125;                                                                                                                     </div><div class="line">      <span class="keyword">else</span> &#123;                                                                                                                </div><div class="line">           <span class="keyword">Object</span>[] argsToResolve = <span class="keyword">null</span>;                                                                                   </div><div class="line">           <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;                                                                     </div><div class="line">                constructorToUse = (Constructor&lt;?&gt;) mbd.resolvedConstructorOrFactoryMethod;                                 </div><div class="line">                <span class="keyword">if</span> (constructorToUse != <span class="keyword">null</span> &amp;&amp; mbd.constructorArgumentsResolved) &#123;                                         </div><div class="line">                      <span class="comment">// Found a cached constructor... 从缓存中获取                                                               </span></div><div class="line">                      argsToUse = mbd.resolvedConstructorArguments;                                                         </div><div class="line">                      <span class="keyword">if</span> (argsToUse == <span class="keyword">null</span>) &#123;                                                                              </div><div class="line">                           argsToResolve = mbd.preparedConstructorArguments;                                                </div><div class="line">                      &#125;                                                                                                     </div><div class="line">                &#125;                                                                                                           </div><div class="line">           &#125;                                                                                                                </div><div class="line">           <span class="keyword">if</span> (argsToResolve != <span class="keyword">null</span>) &#123;                                                                                     </div><div class="line">                <span class="comment">//解析参数类型，如给定方法的构造函数A(int,int)则通过此方法后就会把配置中的("1","1")转换为(1,1)                                                </span></div><div class="line">                argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve);                   </div><div class="line">           &#125;                                                                                                                </div><div class="line">      &#125;                                                                                                                     </div><div class="line">      <span class="keyword">if</span> (constructorToUse == <span class="keyword">null</span>) &#123;                                                                                       </div><div class="line">           <span class="comment">// Need to resolve the constructor.                                                                              </span></div><div class="line">           <span class="built_in">boolean</span> autowiring = (chosenCtors != <span class="keyword">null</span> ||                                                                     </div><div class="line">                      mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);                            </div><div class="line">           ConstructorArgumentValues resolvedValues = <span class="keyword">null</span>;                                                                 </div><div class="line">           <span class="built_in">int</span> minNrOfArgs;                                                                                                 </div><div class="line">           <span class="keyword">if</span> (explicitArgs != <span class="keyword">null</span>) &#123;                                                                                      </div><div class="line">                minNrOfArgs = explicitArgs.length;                                                                          </div><div class="line">           &#125;                                                                                                                </div><div class="line">           <span class="keyword">else</span> &#123;                                                                                                           </div><div class="line">                ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues();                                       </div><div class="line">                resolvedValues = <span class="keyword">new</span> ConstructorArgumentValues();                                                           </div><div class="line">                minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues);                        </div><div class="line">           &#125;                                                                                                                </div><div class="line">           <span class="comment">// Take specified constructors, if any.                                                                          </span></div><div class="line">           Constructor&lt;?&gt;[] candidates = chosenCtors;                                                                       </div><div class="line">           <span class="keyword">if</span> (candidates == <span class="keyword">null</span>) &#123;                                                                                        </div><div class="line">                Class&lt;?&gt; beanClass = mbd.getBeanClass();                                                                    </div><div class="line">                <span class="keyword">try</span> &#123;                                                                                                       </div><div class="line">                      candidates = (mbd.isNonPublicAccessAllowed() ?                                                        </div><div class="line">                                beanClass.getDeclaredConstructors() : beanClass.getConstructors());                         </div><div class="line">                &#125;                                                                                                           </div><div class="line">                <span class="keyword">catch</span> (Throwable ex) &#123;                                                                                      </div><div class="line">                      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,                               </div><div class="line">                                <span class="string">"Resolution of declared constructors on bean Class ["</span> + beanClass.getName() +               </div><div class="line">                                <span class="string">"] from ClassLoader ["</span> + beanClass.getClassLoader() + <span class="string">"] failed"</span>, ex);                      </div><div class="line">                &#125;                                                                                                           </div><div class="line">           &#125;                                                                                                                </div><div class="line">           AutowireUtils.sortConstructors(candidates);                                                                      </div><div class="line">           <span class="built_in">int</span> minTypeDiffWeight = Integer.MAX_VALUE;                                                                       </div><div class="line">           Set&lt;Constructor&lt;?&gt;&gt; ambiguousConstructors = <span class="keyword">null</span>;                                                                </div><div class="line">           LinkedList&lt;UnsatisfiedDependencyException&gt; causes = <span class="keyword">null</span>;                                                        </div><div class="line">           <span class="keyword">for</span> (Constructor&lt;?&gt; candidate : candidates) &#123;                                                                    </div><div class="line">                Class&lt;?&gt;[] paramTypes = candidate.getParameterTypes();                                                      </div><div class="line">                <span class="keyword">if</span> (constructorToUse != <span class="keyword">null</span> &amp;&amp; argsToUse.length &gt; paramTypes.length) &#123;                                     </div><div class="line">                      <span class="comment">// Already found greedy constructor that can be satisfied -&gt;                                          </span></div><div class="line">                      <span class="comment">// do not look any further, there are only less greedy constructors left.                             </span></div><div class="line">                      <span class="keyword">break</span>;                                                                                                </div><div class="line">                &#125;                                                                                                           </div><div class="line">                <span class="keyword">if</span> (paramTypes.length &lt; minNrOfArgs) &#123;                                                                      </div><div class="line">                      <span class="keyword">continue</span>;                                                                                             </div><div class="line">                &#125;                                                                                                           </div><div class="line">                ArgumentsHolder argsHolder;                                                                                 </div><div class="line">                <span class="keyword">if</span> (resolvedValues != <span class="keyword">null</span>) &#123;                                                                               </div><div class="line">                      <span class="keyword">try</span> &#123;                                                                                                 </div><div class="line">                           <span class="keyword">String</span>[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length);       </div><div class="line">                           <span class="keyword">if</span> (paramNames == <span class="keyword">null</span>) &#123;                                                                        </div><div class="line">                                ParameterNameDiscoverer pnd = <span class="keyword">this</span>.beanFactory.getParameterNameDiscoverer();                </div><div class="line">                                <span class="keyword">if</span> (pnd != <span class="keyword">null</span>) &#123;                                                                          </div><div class="line">                                      paramNames = pnd.getParameterNames(candidate);                                        </div><div class="line">                                &#125;                                                                                           </div><div class="line">                           &#125;                                                                                                </div><div class="line">                           argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,      </div><div class="line">                                     getUserDeclaredConstructor(candidate), autowiring);                                    </div><div class="line">                      &#125;                                                                                                     </div><div class="line">                      <span class="keyword">catch</span> (UnsatisfiedDependencyException ex) &#123;                                                           </div><div class="line">                           <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.logger.isTraceEnabled()) &#123;                                                  </div><div class="line">                                <span class="keyword">this</span>.beanFactory.logger.trace(                                                              </div><div class="line">                                           <span class="string">"Ignoring constructor ["</span> + candidate + <span class="string">"] of bean '"</span> + beanName + <span class="string">"': "</span> + ex);   </div><div class="line">                           &#125;                                                                                                </div><div class="line">                           <span class="comment">// Swallow and try next constructor.                                                             </span></div><div class="line">                           <span class="keyword">if</span> (causes == <span class="keyword">null</span>) &#123;                                                                            </div><div class="line">                                causes = <span class="keyword">new</span> LinkedList&lt;UnsatisfiedDependencyException&gt;();                                  </div><div class="line">                           &#125;                                                                                                </div><div class="line">                           causes.<span class="built_in">add</span>(ex);                                                                                  </div><div class="line">                           <span class="keyword">continue</span>;                                                                                        </div><div class="line">                      &#125;                                                                                                     </div><div class="line">                &#125;                                                                                                           </div><div class="line">                <span class="keyword">else</span> &#123;                                                                                                      </div><div class="line">                      <span class="comment">// Explicit arguments given -&gt; arguments length must match exactly.                                   </span></div><div class="line">                      <span class="keyword">if</span> (paramTypes.length != explicitArgs.length) &#123;                                                       </div><div class="line">                           <span class="keyword">continue</span>;                                                                                        </div><div class="line">                      &#125;                                                                                                     </div><div class="line">                      argsHolder = <span class="keyword">new</span> ArgumentsHolder(explicitArgs);                                                       </div><div class="line">                &#125;                                                                                                           </div><div class="line">                <span class="built_in">int</span> typeDiffWeight = (mbd.isLenientConstructorResolution() ?                                                </div><div class="line">                           argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes)); </div><div class="line">                <span class="comment">// Choose this constructor if it represents the closest match.                                              </span></div><div class="line">                <span class="keyword">if</span> (typeDiffWeight &lt; minTypeDiffWeight) &#123;                                                                   </div><div class="line">                      constructorToUse = candidate;                                                                         </div><div class="line">                      argsHolderToUse = argsHolder;                                                                         </div><div class="line">                      argsToUse = argsHolder.arguments;                                                                     </div><div class="line">                      minTypeDiffWeight = typeDiffWeight;                                                                   </div><div class="line">                      ambiguousConstructors = <span class="keyword">null</span>;                                                                         </div><div class="line">                &#125;                                                                                                           </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (constructorToUse != <span class="keyword">null</span> &amp;&amp; typeDiffWeight == minTypeDiffWeight) &#123;                                 </div><div class="line">                      <span class="keyword">if</span> (ambiguousConstructors == <span class="keyword">null</span>) &#123;                                                                  </div><div class="line">                           ambiguousConstructors = <span class="keyword">new</span> LinkedHashSet&lt;Constructor&lt;?&gt;&gt;();                                     </div><div class="line">                           ambiguousConstructors.<span class="built_in">add</span>(constructorToUse);                                                     </div><div class="line">                      &#125;                                                                                                     </div><div class="line">                      ambiguousConstructors.<span class="built_in">add</span>(candidate);                                                                 </div><div class="line">                &#125;                                                                                                           </div><div class="line">           &#125;                                                                                                                </div><div class="line">           <span class="keyword">if</span> (constructorToUse == <span class="keyword">null</span>) &#123;                                                                                  </div><div class="line">                <span class="keyword">if</span> (causes != <span class="keyword">null</span>) &#123;                                                                                       </div><div class="line">                      UnsatisfiedDependencyException ex = causes.removeLast();                                              </div><div class="line">                      <span class="keyword">for</span> (Exception cause : causes) &#123;                                                                      </div><div class="line">                           <span class="keyword">this</span>.beanFactory.onSuppressedException(cause);                                                   </div><div class="line">                      &#125;                                                                                                     </div><div class="line">                      <span class="keyword">throw</span> ex;                                                                                             </div><div class="line">                &#125;                                                                                                           </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,                                     </div><div class="line">                           <span class="string">"Could not resolve matching constructor "</span> +                                                      </div><div class="line">                           <span class="string">"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)"</span>);    </div><div class="line">           &#125;                                                                                                                </div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (ambiguousConstructors != <span class="keyword">null</span> &amp;&amp; !mbd.isLenientConstructorResolution()) &#123;                               </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,                                     </div><div class="line">                           <span class="string">"Ambiguous constructor matches found in bean '"</span> + beanName + <span class="string">"' "</span> +                              </div><div class="line">                           <span class="string">"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): "</span> +  </div><div class="line">                           ambiguousConstructors);                                                                          </div><div class="line">           &#125;                                                                                                                </div><div class="line">           <span class="keyword">if</span> (explicitArgs == <span class="keyword">null</span>) &#123;                                                                                      </div><div class="line">                argsHolderToUse.storeCache(mbd, constructorToUse);                                                          </div><div class="line">           &#125;                                                                                                                </div><div class="line">      &#125;                                                                                                                     </div><div class="line">      <span class="keyword">try</span> &#123;                                                                                                                 </div><div class="line">           <span class="keyword">Object</span> beanInstance;                                                                                             </div><div class="line">           <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;                                                                       </div><div class="line">                <span class="keyword">final</span> Constructor&lt;?&gt; ctorToUse = constructorToUse;                                                          </div><div class="line">                <span class="keyword">final</span> <span class="keyword">Object</span>[] argumentsToUse = argsToUse;                                                                  </div><div class="line">                beanInstance = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;<span class="keyword">Object</span>&gt;() &#123;                               </div><div class="line">                      @Override                                                                                             </div><div class="line">                      <span class="keyword">public</span> <span class="keyword">Object</span> run() &#123;                                                                                 </div><div class="line">                           <span class="keyword">return</span> beanFactory.getInstantiationStrategy().instantiate(                                       </div><div class="line">                                      mbd, beanName, beanFactory, ctorToUse, argumentsToUse);                               </div><div class="line">                      &#125;                                                                                                     </div><div class="line">                &#125;, beanFactory.getAccessControlContext());                                                                  </div><div class="line">           &#125;                                                                                                                </div><div class="line">           <span class="keyword">else</span> &#123;                                                                                                           </div><div class="line">                beanInstance = <span class="keyword">this</span>.beanFactory.getInstantiationStrategy().instantiate(                                     </div><div class="line">                           mbd, beanName, <span class="keyword">this</span>.beanFactory, constructorToUse, argsToUse);                                   </div><div class="line">           &#125;                                                                                                                </div><div class="line">           bw.setBeanInstance(beanInstance);                                                                                </div><div class="line">           <span class="keyword">return</span> bw;                                                                                                       </div><div class="line">      &#125;                                                                                                                     </div><div class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;                                                                                                </div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,                                          </div><div class="line">                      <span class="string">"Bean instantiation via constructor failed"</span>, ex);                                                     </div><div class="line">      &#125;                                                                                                                     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbstractAutowireCapableBeanFactory</span></div><div class="line"><span class="comment">//不带参构造函数</span></div><div class="line"><span class="keyword">protected</span> BeanWrapper instantiateBean(<span class="keyword">final</span> <span class="keyword">String</span> beanName, <span class="keyword">final</span> RootBeanDefinition mbd) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">Object</span> beanInstance;</div><div class="line">           <span class="keyword">final</span> BeanFactory parent = <span class="keyword">this</span>;</div><div class="line">           <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</div><div class="line">                beanInstance = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;<span class="keyword">Object</span>&gt;() &#123;</div><div class="line">                      @Override</div><div class="line">                      <span class="keyword">public</span> <span class="keyword">Object</span> run() &#123;</div><div class="line">                           <span class="keyword">return</span> getInstantiationStrategy().instantiate(mbd, beanName, parent);</div><div class="line">                      &#125;</div><div class="line">                &#125;, getAccessControlContext());</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//实例化的过程</span></div><div class="line">                beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</div><div class="line">           &#125;</div><div class="line">           BeanWrapper bw = <span class="keyword">new</span> BeanWrapperImpl(beanInstance);</div><div class="line">           initBeanWrapper(bw);</div><div class="line">           <span class="keyword">return</span> bw;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">                      mbd.getResourceDescription(), beanName, <span class="string">"Instantiation of bean failed"</span>, ex);</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//SimpleInstantiationStrategy</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function">Object <span class="title">instantiate</span><span class="params">(RootBeanDefinition bd, String beanName, BeanFactory owner)</span> </span>&#123;</div><div class="line">      <span class="comment">// Don't override the class with CGLIB if no overrides.</span></div><div class="line">      <span class="comment">//如果有需要覆盖或者动态替换的方法则当然要使用cglib进行动态代理,因为可以在创建代理的同时将动态方法芝入类中，但是如果没有需要动态改变的方法，为了方便直接反射就可以了</span></div><div class="line">      <span class="keyword">if</span> (bd.getMethodOverrides().isEmpty()) &#123;</div><div class="line">           Constructor&lt;?&gt; constructorToUse;</div><div class="line">           <span class="keyword">synchronized</span> (bd.constructorArgumentLock) &#123;</div><div class="line">                constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;</div><div class="line">                <span class="keyword">if</span> (constructorToUse == <span class="keyword">null</span>) &#123;</div><div class="line">                      <span class="keyword">final</span> Class&lt;?&gt; clazz = bd.getBeanClass();</div><div class="line">                      <span class="keyword">if</span> (clazz.isInterface()) &#123;</div><div class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(clazz, <span class="string">"Specified class is an interface"</span>);</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">try</span> &#123;</div><div class="line">                           <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</div><div class="line">                                constructorToUse = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;() &#123;</div><div class="line">                                      <span class="meta">@Override</span></div><div class="line">                                      <span class="keyword">public</span> Constructor&lt;?&gt; run() <span class="keyword">throws</span> Exception &#123;</div><div class="line">                                           <span class="keyword">return</span> clazz.getDeclaredConstructor((Class[]) <span class="keyword">null</span>);</div><div class="line">                                      &#125;</div><div class="line">                                &#125;);</div><div class="line">                           &#125;</div><div class="line">                           <span class="keyword">else</span> &#123;</div><div class="line">                                constructorToUse =     clazz.getDeclaredConstructor((Class[]) <span class="keyword">null</span>);</div><div class="line">                           &#125;</div><div class="line">                           bd.resolvedConstructorOrFactoryMethod = constructorToUse;</div><div class="line">                      &#125;</div><div class="line">                      <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(clazz, <span class="string">"No default constructor found"</span>, ex);</div><div class="line">                      &#125;</div><div class="line">                &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="function"><span class="keyword">return</span> BeanUtils.<span class="title">instantiateClass</span><span class="params">(constructorToUse)</span></span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">// Must generate CGLIB subclass.</span></div><div class="line">           <span class="function"><span class="keyword">return</span> <span class="title">instantiateWithMethodInjection</span><span class="params">(bd, beanName, owner)</span></span>;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//CglibSubclassingInstantiationStrategy<span class="keyword"></span></div><div class="line">public Object instantiate(Constructor&lt;?&gt; ctor, Object... args) &#123;</div><div class="line">	Class&lt;?&gt; subclass = createEnhancedSubclass(this.beanDefinition);</div><div class="line">	Object instance;</div><div class="line"><span class="built_in">	if </span>(ctor == null) &#123;</div><div class="line">	<span class="built_in">	instance </span>= BeanUtils.instantiate(subclass);</div><div class="line">	&#125;</div><div class="line">	else &#123;</div><div class="line">		try &#123;</div><div class="line">			Constructor&lt;?&gt; enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes());</div><div class="line">		<span class="built_in">	instance </span>= enhancedSubclassConstructor.newInstance(args);</div><div class="line">		&#125;</div><div class="line">		catch (Exception ex) &#123;</div><div class="line">		<span class="built_in">	throw </span>new BeanInstantiationException(this.beanDefinition.getBeanClass(),</div><div class="line">					<span class="string">"Failed to invoke constructor for CGLIB enhanced subclass ["</span> + subclass.getName() + <span class="string">"]"</span>, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	// SPR-10785: set callbacks directly on the<span class="built_in"> instance </span>instead of in the</div><div class="line">	// enhanced class (via the Enhancer) in order to avoid memory leaks.</div><div class="line">	Factory factory = (Factory) instance;</div><div class="line">	factory.setCallbacks(new Callback[] &#123;NoOp.INSTANCE,</div><div class="line">		<span class="built_in">	new </span>LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),</div><div class="line">		<span class="built_in">	new </span>ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)&#125;);</div><div class="line"><span class="built_in">	return </span>instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>记录创建bean的ObjectFactory</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbstractAutowireCapableBeanFactory.doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)</span></div><div class="line"><span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</div><div class="line">                isSingletonCurrentlyInCreation(beanName));</div></pre></td></tr></table></figure></p>
<p>earlySingletonExposure：提早曝光的单例<br>mbd.isSingleton()：此RootBeanDefinition代表的是否是单例<br>this.allowCircularReferences：是否允许循环依赖，可以通过硬编码的方式进行设置或者通过自定义命名空间进行配置<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ClassPathXmlApplicationContext bf = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">"aspectTest.xml"</span>);</div><div class="line">bf.setAllowBeanDefinitionOverriding(<span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>isSingletonCurrentlyInCreation(beanName)：该bean是否在创建中。在Spring中，会有个专门的属性默认为DefaultSingletonBeanRegistry的singletonsCurrentlyInCreation来记录bean的加载状态，在bean开始创建前将beanName记录在属性中，创建完毕后移除。<br>    <img src="/uploads/spring9.jpg" alt=""></p>
<h3 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">//AbstractAutowireCapableBeanFactory</div><div class="line"><span class="symbol">protected</span> void <span class="keyword">populateBean(String </span><span class="keyword">beanName, </span>RootBeanDefinition mbd, <span class="keyword">BeanWrapper </span><span class="keyword">bw) </span>&#123;</div><div class="line">	PropertyValues pvs = mbd.getPropertyValues()<span class="comment">;</span></div><div class="line"></div><div class="line">	<span class="meta">if</span> (<span class="keyword">bw </span>== null) &#123;</div><div class="line">		<span class="meta">if</span> (!pvs.isEmpty()) &#123;</div><div class="line">			throw new <span class="keyword">BeanCreationException(</span></div><div class="line">					mbd.getResourceDescription(), <span class="keyword">beanName, </span><span class="string">"Cannot apply property values to null instance"</span>)<span class="comment">;</span></div><div class="line">		&#125;</div><div class="line">		<span class="meta">else</span> &#123;</div><div class="line">			// Skip property <span class="keyword">population </span>phase for null instance.</div><div class="line">			//没有可填充的属性</div><div class="line">			return<span class="comment">;</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</div><div class="line">	// state of the <span class="keyword">bean </span><span class="keyword">before </span>properties are set. This can <span class="keyword">be </span>used, for example,</div><div class="line">	// to support styles of <span class="meta">field</span> injection.</div><div class="line">	<span class="keyword">boolean </span>continueWithPropertyPopulation = true<span class="comment">;</span></div><div class="line"></div><div class="line">	<span class="meta">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</div><div class="line">		for (<span class="keyword">BeanPostProcessor </span><span class="keyword">bp </span>: getBeanPostProcessors()) &#123;</div><div class="line">			<span class="meta">if</span> (<span class="keyword">bp </span>instanceof InstantiationAwareBeanPostProcessor) &#123;</div><div class="line">				InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) <span class="keyword">bp;</span></div><div class="line">				<span class="meta">if</span> (!ibp.postProcessAfterInstantiation(<span class="keyword">bw.getWrappedInstance(), </span><span class="keyword">beanName)) </span>&#123;</div><div class="line">					continueWithPropertyPopulation = false<span class="comment">;</span></div><div class="line">					<span class="keyword">break;</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    //如果后处理器发出停止填充命令则终止后续的执行</div><div class="line">	<span class="meta">if</span> (!continueWithPropertyPopulation) &#123;</div><div class="line">		return<span class="comment">;</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME <span class="title">||</span></div><div class="line">			mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</div><div class="line">		MutablePropertyValues newPvs = new MutablePropertyValues(pvs)<span class="comment">;</span></div><div class="line"></div><div class="line">		// <span class="keyword">Add </span>property values <span class="keyword">based </span>on autowire <span class="keyword">by </span>name <span class="meta">if</span> applicable.</div><div class="line">		//根据名称自动注入</div><div class="line">		<span class="meta">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</div><div class="line">			autowireByName(<span class="keyword">beanName, </span>mbd, <span class="keyword">bw, </span>newPvs)<span class="comment">;</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// <span class="keyword">Add </span>property values <span class="keyword">based </span>on autowire <span class="keyword">by </span>type <span class="meta">if</span> applicable.</div><div class="line">		//根据类型自动注入</div><div class="line">		<span class="meta">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</div><div class="line">			autowireByType(<span class="keyword">beanName, </span>mbd, <span class="keyword">bw, </span>newPvs)<span class="comment">;</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		pvs = newPvs<span class="comment">;</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">    //后处理器已经初始化</div><div class="line">	<span class="keyword">boolean </span>hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors()<span class="comment">;</span></div><div class="line">	//需要检查依赖</div><div class="line">	<span class="keyword">boolean </span>needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE)<span class="comment">;</span></div><div class="line"></div><div class="line">	<span class="meta">if</span> (hasInstAwareBpps <span class="title">||</span> needsDepCheck) &#123;</div><div class="line">		PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(<span class="keyword">bw, </span>mbd.allowCaching)<span class="comment">;</span></div><div class="line">		<span class="meta">if</span> (hasInstAwareBpps) &#123;</div><div class="line">			for (<span class="keyword">BeanPostProcessor </span><span class="keyword">bp </span>: getBeanPostProcessors()) &#123;</div><div class="line">				<span class="meta">if</span> (<span class="keyword">bp </span>instanceof InstantiationAwareBeanPostProcessor) &#123;</div><div class="line">					InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) <span class="keyword">bp;</span></div><div class="line">					//对所有需要依赖检查的属性进行后处理</div><div class="line">					pvs = ibp.postProcessPropertyValues(pvs, filteredPds, <span class="keyword">bw.getWrappedInstance(), </span><span class="keyword">beanName);</span></div><div class="line">					<span class="meta">if</span> (pvs == null) &#123;</div><div class="line">						return<span class="comment">;</span></div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="meta">if</span> (needsDepCheck) &#123;</div><div class="line">			checkDependencies(<span class="keyword">beanName, </span>mbd, filteredPds, pvs)<span class="comment">;</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    //将属性应用到<span class="keyword">bean中</span></div><div class="line">	applyPropertyValues(<span class="keyword">beanName, </span>mbd, <span class="keyword">bw, </span>pvs)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//AbstractAutowireCapableBeanFactory</div><div class="line">//根据名称自动注入</div><div class="line"><span class="symbol">protected</span> void autowireByName(</div><div class="line">		<span class="keyword">String </span><span class="keyword">beanName, </span>AbstractBeanDefinition mbd, <span class="keyword">BeanWrapper </span><span class="keyword">bw, </span>MutablePropertyValues pvs) &#123;</div><div class="line"></div><div class="line">    //寻找<span class="keyword">bw中需要依赖注入的属性</span></div><div class="line">	<span class="keyword">String[] </span>propertyNames = unsatisfiedNonSimpleProperties(mbd, <span class="keyword">bw);</span></div><div class="line">	for (<span class="keyword">String </span>propertyName : propertyNames) &#123;</div><div class="line">		<span class="meta">if</span> (containsBean(propertyName)) &#123;</div><div class="line">		    //递归初始化相关的<span class="keyword">bean</span></div><div class="line">			Object <span class="keyword">bean </span>= getBean(propertyName)<span class="comment">;</span></div><div class="line">			pvs.<span class="keyword">add(propertyName, </span><span class="keyword">bean);</span></div><div class="line">			//注册依赖</div><div class="line">			registerDependentBean(propertyName, <span class="keyword">beanName);</span></div><div class="line">			<span class="meta">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Added autowiring by name from bean name '"</span> + <span class="keyword">beanName </span>+</div><div class="line">						<span class="string">"' via property '"</span> + propertyName + <span class="string">"' to bean named '"</span> + propertyName + <span class="string">"'"</span>)<span class="comment">;</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="meta">else</span> &#123;</div><div class="line">			<span class="meta">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">				logger.trace(<span class="string">"Not autowiring property '"</span> + propertyName + <span class="string">"' of bean '"</span> + <span class="keyword">beanName </span>+</div><div class="line">						<span class="string">"' by name: no matching bean found"</span>)<span class="comment">;</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbstractAutowireCapableBeanFactory</span></div><div class="line"><span class="comment">//根据类型自动注入</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> autowireByType(</div><div class="line">		<span class="keyword">String</span> beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs) &#123;</div><div class="line"></div><div class="line">	TypeConverter converter = getCustomTypeConverter();</div><div class="line">	<span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</div><div class="line">		converter = bw;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Set&lt;<span class="keyword">String</span>&gt; autowiredBeanNames = <span class="keyword">new</span> LinkedHashSet&lt;<span class="keyword">String</span>&gt;(<span class="number">4</span>);</div><div class="line">	<span class="comment">//寻找bw中需要依赖注入的属性</span></div><div class="line">	<span class="keyword">String</span>[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">String</span> propertyName : propertyNames) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			PropertyDescriptor pd = bw.getPropertyDescriptor(propertyName);</div><div class="line">			<span class="comment">// Don't try autowiring by type for type Object: never makes sense,</span></div><div class="line">			<span class="comment">// even if it technically is a unsatisfied, non-simple property.</span></div><div class="line">			<span class="keyword">if</span> (!<span class="keyword">Object</span>.class.equals(pd.getPropertyType())) &#123;</div><div class="line">			    <span class="comment">//探测指定属性的set方法</span></div><div class="line">				MethodParameter methodParam = BeanUtils.getWriteMethodParameter(pd);</div><div class="line">				<span class="comment">// Do not allow eager init for type matching in case of a prioritized post-processor.</span></div><div class="line">				<span class="built_in">boolean</span> eager = !PriorityOrdered.class.isAssignableFrom(bw.getWrappedClass());</div><div class="line">				DependencyDescriptor desc = <span class="keyword">new</span> AutowireByTypeDependencyDescriptor(methodParam, eager);</div><div class="line">				<span class="comment">//解析指定beanName的属性所匹配的值，并把解析到的属性名称存储在autowiredBeanNames中，当属性存在多个封装bean时如：Autowired private List&lt;A&gt; aList; 将会找到所有匹配A类型的bean并将其注入</span></div><div class="line">				<span class="keyword">Object</span> autowiredArgument = resolveDependency(desc, beanName, autowiredBeanNames, converter);</div><div class="line">				<span class="keyword">if</span> (autowiredArgument != <span class="keyword">null</span>) &#123;</div><div class="line">					pvs.<span class="built_in">add</span>(propertyName, autowiredArgument);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">String</span> autowiredBeanName : autowiredBeanNames) &#123;</div><div class="line">				    <span class="comment">//注册依赖</span></div><div class="line">					registerDependentBean(autowiredBeanName, beanName);</div><div class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">						logger.debug(<span class="string">"Autowiring by type from bean name '"</span> + beanName + <span class="string">"' via property '"</span> +</div><div class="line">								propertyName + <span class="string">"' to bean named '"</span> + autowiredBeanName + <span class="string">"'"</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				autowiredBeanNames.<span class="built_in">clear</span>();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedDependencyException(mbd.getResourceDescription(), beanName, propertyName, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AbstractAutowireCapableBeanFactory</span></div><div class="line"><span class="comment">//将属性应用到bean中（之前获取的属性以propertyValues形式存在，还没有应用到已经实例化的bean中）</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> applyPropertyValues(<span class="keyword">String</span> beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) &#123;</div><div class="line">	<span class="keyword">if</span> (pvs == <span class="keyword">null</span> || pvs.isEmpty()) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	MutablePropertyValues mpvs = <span class="keyword">null</span>;</div><div class="line">	List&lt;PropertyValue&gt; original;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (bw <span class="keyword">instanceof</span> BeanWrapperImpl) &#123;</div><div class="line">			((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pvs <span class="keyword">instanceof</span> MutablePropertyValues) &#123;</div><div class="line">		mpvs = (MutablePropertyValues) pvs;</div><div class="line">		<span class="keyword">if</span> (mpvs.isConverted()) &#123;</div><div class="line">			<span class="comment">// Shortcut: use the pre-converted values as-is.</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				bw.setPropertyValues(mpvs);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">						mbd.getResourceDescription(), beanName, <span class="string">"Error setting property values"</span>, ex);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		original = mpvs.getPropertyValueList();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		original = Arrays.asList(pvs.getPropertyValues());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	TypeConverter converter = getCustomTypeConverter();</div><div class="line">	<span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</div><div class="line">		converter = bw;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//获取对应的解析器</span></div><div class="line">	BeanDefinitionValueResolver valueResolver = <span class="keyword">new</span> BeanDefinitionValueResolver(<span class="keyword">this</span>, beanName, mbd, converter);</div><div class="line"></div><div class="line">	<span class="comment">// Create a deep copy, resolving any references for values.</span></div><div class="line">	List&lt;PropertyValue&gt; deepCopy = <span class="keyword">new</span> ArrayList&lt;PropertyValue&gt;(original.<span class="built_in">size</span>());</div><div class="line">	<span class="built_in">boolean</span> resolveNecessary = <span class="keyword">false</span>;</div><div class="line">	<span class="comment">//遍历属性,将属性转换为对应类的对应属性的类型</span></div><div class="line">	<span class="keyword">for</span> (PropertyValue pv : original) &#123;</div><div class="line">		<span class="keyword">if</span> (pv.isConverted()) &#123;</div><div class="line">			deepCopy.<span class="built_in">add</span>(pv);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">String</span> propertyName = pv.getName();</div><div class="line">			<span class="keyword">Object</span> originalValue = pv.getValue();</div><div class="line">			<span class="keyword">Object</span> resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);</div><div class="line">			<span class="keyword">Object</span> convertedValue = resolvedValue;</div><div class="line">			<span class="built_in">boolean</span> convertible = bw.isWritableProperty(propertyName) &amp;&amp;</div><div class="line">					!PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);</div><div class="line">			<span class="keyword">if</span> (convertible) &#123;</div><div class="line">				convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// Possibly store converted value in merged bean definition,</span></div><div class="line">			<span class="comment">// in order to avoid re-conversion for every created bean instance.</span></div><div class="line">			<span class="keyword">if</span> (resolvedValue == originalValue) &#123;</div><div class="line">				<span class="keyword">if</span> (convertible) &#123;</div><div class="line">					pv.setConvertedValue(convertedValue);</div><div class="line">				&#125;</div><div class="line">				deepCopy.<span class="built_in">add</span>(pv);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (convertible &amp;&amp; originalValue <span class="keyword">instanceof</span> TypedStringValue &amp;&amp;</div><div class="line">					!((TypedStringValue) originalValue).isDynamic() &amp;&amp;</div><div class="line">					!(convertedValue <span class="keyword">instanceof</span> Collection || ObjectUtils.isArray(convertedValue))) &#123;</div><div class="line">				pv.setConvertedValue(convertedValue);</div><div class="line">				deepCopy.<span class="built_in">add</span>(pv);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				resolveNecessary = <span class="keyword">true</span>;</div><div class="line">				deepCopy.<span class="built_in">add</span>(<span class="keyword">new</span> PropertyValue(pv, convertedValue));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (mpvs != <span class="keyword">null</span> &amp;&amp; !resolveNecessary) &#123;</div><div class="line">		mpvs.setConverted();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Set our (possibly massaged) deep copy.</span></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		bw.setPropertyValues(<span class="keyword">new</span> MutablePropertyValues(deepCopy));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">				mbd.getResourceDescription(), beanName, <span class="string">"Error setting property values"</span>, ex);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IoC容器和AOP是Spring的kernel(核心)&lt;/p&gt;
&lt;h1 id=&quot;IOC&quot;&gt;&lt;a href=&quot;#IOC&quot; class=&quot;headerlink&quot; title=&quot;IOC&quot;&gt;&lt;/a&gt;IOC&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;依赖控制反转&lt;/strong&gt;：把控制权从具体业务对象手中转交到平台或框架中；&lt;br&gt;&lt;strong&gt;依赖注入方式&lt;/strong&gt;：接口注入、setter注入、构造器注入；在Spring IoC设计中，setter注入、构造器注入是最主要的注入方式；&lt;br&gt;    &lt;img src=&quot;/uploads/spring7.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>微信机器人</title>
    <link href="http://yoursite.com/2017/06/19/%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2017/06/19/微信机器人/</id>
    <published>2017-06-19T14:44:25.000Z</published>
    <updated>2017-06-20T00:28:48.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人微信接入图灵机器人-基于Python"><a href="#个人微信接入图灵机器人-基于Python" class="headerlink" title="个人微信接入图灵机器人(基于Python)"></a>个人微信接入图灵机器人(基于Python)</h1><p>开发环境：阿里云 Ubuntu 16.04<br>编程语言：Python2.7</p>
<ol>
<li>在<a href="http://www.tuling123.com" target="_blank" rel="external">图灵机器人官网</a>注册账号，创建机器人，如果只是学习的话，可以使用免费版，一个账号最多可以创建5个机器人，一个机器人日调用接口数5000次<br> <img src="/uploads/weixin1.jpg" alt=""><a id="more"></a></li>
<li><p>开发环境搭建</p>
 <figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装python2.7</span></div><div class="line">$ sudo apt-<span class="built_in">get</span> install python2<span class="number">.7</span></div><div class="line"><span class="comment">//安装pip: </span></div><div class="line">$ sudo apt-<span class="built_in">get</span> install python-pip</div><div class="line"><span class="comment">//有时候安装pillow会出现依赖包缺失错误，需要先安装pillow依赖库</span></div><div class="line">$ sudo apt-<span class="built_in">get</span> install libtiff5-<span class="built_in">dev</span> libjpeg8-<span class="built_in">dev</span> zlib1g-<span class="built_in">dev</span> libfreetype6-<span class="built_in">dev</span> liblcms2-<span class="built_in">dev</span> libwebp-<span class="built_in">dev</span> tcl8<span class="number">.6</span>-<span class="built_in">dev</span> tk8<span class="number">.6</span>-<span class="built_in">dev</span> python-tk</div><div class="line"><span class="comment">//借助python的itchat和pillow，可以使用pip安装。itchat 是 A complete and graceful API for Wechat</span></div><div class="line">$ sudo pip install itchat pillow</div></pre></td></tr></table></figure>
</li>
<li><p>python代码编写，创建demo.py脚本文件</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> itchat, time, re</div><div class="line"><span class="keyword">from</span> itchat, content <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> urllib2,urllib</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"><span class="meta">@itchat.msg_register([TEXT])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_reply</span><span class="params">(msg)</span>:</span></div><div class="line">	info = msg[<span class="string">'Text'</span>].encode(<span class="string">'UTF-8'</span>)</div><div class="line">	url = <span class="string">'http://www.tuling123.com/openapi/api'</span></div><div class="line">	data = &#123;<span class="string">u"key"</span>: <span class="string">"9ab235c4ec4b4c2887d4e57627d41ab6"</span>,<span class="string">"info"</span>:info,<span class="string">u"loc"</span>: <span class="string">""</span>,<span class="string">"userid"</span>: <span class="string">""</span>&#125;</div><div class="line">	data = urllib.urlencode(data)</div><div class="line">		</div><div class="line">	url2 = urllib2.Request(url, data)</div><div class="line">		</div><div class="line">	response = urllib2.urlopen(url2)</div><div class="line">		</div><div class="line">	apicontent = response.read()</div><div class="line">	s = json.loads(apicontent, encoding=<span class="string">'utf-8'</span>)</div><div class="line">	<span class="keyword">print</span> <span class="string">'s=='</span>,s</div><div class="line">	<span class="keyword">if</span> s[<span class="string">'code'</span>]== <span class="number">100000</span>:</div><div class="line">		itchat.send(s[<span class="string">'text'</span>], msg[<span class="string">'FromUserName'</span>])</div><div class="line">			</div><div class="line">itchat.auto_login(enableCmdQR=<span class="number">2</span>,hotReload=<span class="keyword">True</span>)</div><div class="line">itchat.run(debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;个人微信接入图灵机器人-基于Python&quot;&gt;&lt;a href=&quot;#个人微信接入图灵机器人-基于Python&quot; class=&quot;headerlink&quot; title=&quot;个人微信接入图灵机器人(基于Python)&quot;&gt;&lt;/a&gt;个人微信接入图灵机器人(基于Python)&lt;/h1&gt;&lt;p&gt;开发环境：阿里云 Ubuntu 16.04&lt;br&gt;编程语言：Python2.7&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;a href=&quot;http://www.tuling123.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图灵机器人官网&lt;/a&gt;注册账号，创建机器人，如果只是学习的话，可以使用免费版，一个账号最多可以创建5个机器人，一个机器人日调用接口数5000次&lt;br&gt; &lt;img src=&quot;/uploads/weixin1.jpg&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机</title>
    <link href="http://yoursite.com/2017/06/14/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://yoursite.com/2017/06/14/Java虚拟机/</id>
    <published>2017-06-14T15:18:25.000Z</published>
    <updated>2017-06-18T14:35:28.134Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/jvm1.jpg" alt=""><br>首先说一下，这不是打广告;每个学习Java的人都应该看下这本书<br><a id="more"></a></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>什么是Java虚拟机？</p>
<ul>
<li>Java虚拟机：Java Virtual Machine；JVM</li>
<li>Java虚拟机是一个想象中的机器,在实际的计算机上通过软件模拟来实现。</li>
<li>Java虚拟机有自己想象中的硬件,如处理器、堆栈、寄存器等,还具有相应的指令系统。<br><img src="/uploads/jvm2.jpg" alt=""></li>
</ul>
<p>我们为什么要了解Java虚拟机？</p>
<ul>
<li>目前商用的高性能Java虚拟机都提供了相当多的优化特性和调节手段。</li>
<li>而我们了解了Java虚拟机的运行原理，也能更好地调节程序在实际生产环境中对性能和稳定性的要求</li>
</ul>
<p>查看JVM信息<br><img src="/uploads/jvm3.jpg" alt=""></p>
<ul>
<li>JDK1.2之前      世界上第一款商用Java虚拟机：Sun Classic VM；唯一虚拟机</li>
<li>JDK1.2             Classic VM与HotSpot VM并存；默认Classic VM</li>
<li>JDK1.3             Classic VM与HotSpot VM并存；默认HotSpot VM</li>
<li>JDK1.4             Classic VM退出商业虚拟机舞台</li>
</ul>
<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p><img src="/uploads/jvm4.jpg" alt=""></p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>当前线程执行字节码的行号指示器；切换线程时，回到正确位置；</p>
<h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>平时所说的栈就是虚拟机栈，每调用一个方法就会生成一个帧栈，帧栈是存放在虚拟机栈中的；</p>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>和虚拟机栈类似，在HotSpot中和虚拟机栈合二为一了；</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据；</p>
<h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>用于存放对象实例(还有数组)的，是垃圾收集的主要区域，所以也被称为GC堆；</p>
<p>在JDK1.7的HotSpot中，原本放在永久代的字符串常量池被移出;JDK1.6该代码结果为false<br><img src="/uploads/jvm5.jpg" alt=""></p>
<p>在HotSpot虚拟机中，Java堆被称作新生代和老生代；方法区被称作永久代；<br><img src="/uploads/jvm6.jpg" alt=""></p>
<h1 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h1><h2 id="标记-清除算法-CMS"><a href="#标记-清除算法-CMS" class="headerlink" title="标记-清除算法(CMS)"></a>标记-清除算法(CMS)</h2><p>标记出所有需要回收的对象，标记完后统一回收；<br>缺点：效率不高；会产生大量不连续的内存碎片；<br><img src="/uploads/jvm7.jpg" alt=""></p>
<h2 id="复制算法-ParNew"><a href="#复制算法-ParNew" class="headerlink" title="复制算法(ParNew)"></a>复制算法(ParNew)</h2><p>将内存分成相等2块，用完一块后，将还存活的对象复制到另一块上，再把这一块清理掉；不用考虑内存碎片，运行高效；但是代价太大(可用内存变为一半)；现在的商业虚拟机都是采用这种收集算法来回收新生代<br><img src="/uploads/jvm8.jpg" alt=""></p>
<h2 id="标记-整理算法-G1"><a href="#标记-整理算法-G1" class="headerlink" title="标记-整理算法(G1)"></a>标记-整理算法(G1)</h2><p>标记出所有需要回收的对象，标记完后存活对象向一端移动，清理掉边界外内存；<br><img src="/uploads/jvm9.jpg" alt=""></p>
<h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><ul>
<li>将堆区划分为老年代和新生代，不同代采用不同的垃圾回收算法；</li>
<li>大部分垃圾收集器对新生代采用复制算法，老年代采用标记-清除算法</li>
</ul>
<p>如何判断一个对象是否需要回收(存活)？</p>
<h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>给对象中加引用计数器，有一个地方引用时，计数器值加1；引用失效时，值减1。值为0的对象不可能再被使用；<br>缺陷：无法解决对象间互相循环引用问题；<br>主流JVM基本没有使用的</p>
<h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><p>通过一系列名为”GC Roots”的对象作为起始点，向下搜索，对象到GC Roots不可达，则证明此对象不可用<br><img src="/uploads/jvm10.jpg" alt=""></p>
<h1 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h1><p>HotSpot虚拟机包含的垃圾收集器如下图所示，一共7种；连线说明它们可以搭配使用<br><img src="/uploads/jvm11.jpg" alt=""><br>如果我们没有指定垃圾收集器，JVM会有一个默认的收集器；该收集器根据JVM的模式(Client、Server)确定；</p>
<ul>
<li>Client：串行垃圾收集器（Serial GC，-XX:+USeSerialGC）</li>
<li>Server：并行垃圾收集器（Parallel GC，-XX:+UseParallelGC）<br>-XX:+USeSerialGC：使用Serial + Serial Old 的收集器组合进行内存回收。<br>-XX:+UseParallelGC：使用Parallel Scavenge + Serial Old 的收集器进行内存回收。</li>
</ul>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="串行收集器"><a href="#串行收集器" class="headerlink" title="串行收集器"></a>串行收集器</h3><p>单线程，必须停止其他所有的工作线程，直到收集结束</p>
<h3 id="并行收集器"><a href="#并行收集器" class="headerlink" title="并行收集器"></a>并行收集器</h3><p>串行收集器的多线程版本，也要stop the world</p>
<h3 id="并发收集器"><a href="#并发收集器" class="headerlink" title="并发收集器"></a>并发收集器</h3><p>可以和用户线程并发执行</p>
<h2 id="CMS垃圾收集器"><a href="#CMS垃圾收集器" class="headerlink" title="CMS垃圾收集器"></a>CMS垃圾收集器</h2><ul>
<li>JDK1.5发布的，适用于互联网站或者B/S系统服务端上；CMS是老年代收集器，第一款真正意义上的并发收集器</li>
<li>优点：并发收集，低停顿</li>
<li>缺点：对CPU资源敏感；<br>  基于“标记-清除”算法，会产生大量空间碎片；无法处理浮动垃圾</li>
</ul>
<p>它的运作过程比较复杂,主要分为4个步骤,包括：</p>
<ol>
<li>初始标记(CMS initial mark)</li>
<li>并发标记(CMS concurrent mark)</li>
<li>重新标记(CMS remark)</li>
<li>并发清除(CMS concurrent sweep)</li>
</ol>
<h2 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h2><p>是最基本、发展历史最悠久的收集器，曾经(在JDK1.3.1之前)是虚拟机新生代收集的唯一选择；它在进行垃圾收集时，必须暂停其他所有的工作线程，直到收集结束(Stop The World)；</p>
<h2 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h2><p>Serial收集器的多线程版本；</p>
<h2 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h2><p>和ParNew类似，但是具有吞吐量最大化效果(需要配合Parallel Old )；在Parallel Old出来之前，只能和Serial Old搭配，比较尴尬(Serial Old 的拖累)</p>
<h2 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h2><p>是Serial的老年代版本，单线程收集器；</p>
<h2 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h2><p>是Parallel Scavenge收集器的老年代版本，JDK 1.6才开始提供；</p>
<h2 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h2><p>G1收集器是比较特殊的，在G1之前其他的垃圾收集器的范围是整个新生代或者老年代。G1不是这样的，使用G1时，Java堆的内存布局有了很大的不同，它将堆分为多个大小相等的独立区域；</p>
<ul>
<li>G1收集器是当今收集器技术发展的最前沿成果之一；</li>
<li>G1是一款面向服务端应用的垃圾收集器;</li>
<li>oracle官方计划在jdk9中将G1变成默认的垃圾收集器;替换掉JDK1.5中发布的CMS收集器；</li>
<li>G1将新生代，老年代的物理空间划分取消了;</li>
</ul>
<p>特点：</p>
<ul>
<li>并行与并发；</li>
<li>分代收集；</li>
<li>空间整合；</li>
<li>可预测的停顿；</li>
</ul>
<h1 id="堆上内存分配与回收"><a href="#堆上内存分配与回收" class="headerlink" title="堆上内存分配与回收"></a>堆上内存分配与回收</h1><h2 id="CMS-ParNew"><a href="#CMS-ParNew" class="headerlink" title="CMS + ParNew"></a>CMS + ParNew</h2><p><img src="/uploads/jvm12.jpg" alt=""></p>
<h2 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h2><ul>
<li>G1将新生代、老年代的物理空间划分取消了；</li>
<li>G1算法将堆划分为若干个区域（Region），它仍然属于分代收集器；</li>
<li>在java 8中，持久代也移动到了普通的堆内存空间中，改为元空间；<br><img src="/uploads/jvm13.jpg" alt=""><br><img src="/uploads/jvm14.jpg" alt=""></li>
</ul>
<p>G1提供了两种GC模式，Young GC和Mixed GC，两种都是Stop The World(STW)的；</p>
<h3 id="Young-GC"><a href="#Young-GC" class="headerlink" title="Young GC"></a>Young GC</h3><p><img src="/uploads/jvm15.jpg" alt=""></p>
<h3 id="Mixed-GC"><a href="#Mixed-GC" class="headerlink" title="Mixed GC"></a>Mixed GC</h3><p>Mix GC不仅进行正常的新生代垃圾收集，同时也回收部分后台扫描线程标记的老年代分区<br><img src="/uploads/jvm16.jpg" alt=""></p>
<h1 id="GC日志分析"><a href="#GC日志分析" class="headerlink" title="GC日志分析"></a>GC日志分析</h1><p>设置日志：<br>-XX:+PrintGCDetails<br>-Xloggc:D:/mylog/gc.log<br><img src="/uploads/jvm17.jpg" alt=""><br><img src="/uploads/jvm18.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/jvm1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;首先说一下，这不是打广告;每个学习Java的人都应该看下这本书&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot</title>
    <link href="http://yoursite.com/2017/06/13/springboot/"/>
    <id>http://yoursite.com/2017/06/13/springboot/</id>
    <published>2017-06-13T14:58:25.000Z</published>
    <updated>2017-06-14T15:26:32.893Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/springboot1.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong><em>简单！快速！方便！</em></strong></p>
<p>Spring Boot 是由Pivotal团队提供的全新框架，目的是简化Spring应用的初始搭建及开发过程。它默认配置了很多框架的使用方式(习惯优于配置)。</p>
<ul>
<li>Spring Boot使<strong>编码</strong>变简单</li>
<li>Spring Boot使<strong>配置</strong>变简单</li>
<li>Spring Boot使<strong>部署</strong>变简单</li>
<li>Spring Boot使<strong>监控</strong>变简单<a id="more"></a>
<h1 id="springboot项目启动"><a href="#springboot项目启动" class="headerlink" title="springboot项目启动"></a>springboot项目启动</h1><h2 id="非springboot项目"><a href="#非springboot项目" class="headerlink" title="非springboot项目"></a>非springboot项目</h2>一个非springboot项目需要N（很多）个文件才能启动</li>
</ul>
<ol>
<li>applicationContext.xml</li>
<li>services.xml</li>
<li>web.xml</li>
<li>pom.xml</li>
<li>mybatis.xml</li>
<li>mysql-db.xml</li>
<li>mongo-db.xml</li>
<li>**Servlet.java</li>
<li>需要安装Tomcat或者Jetty容器、</li>
<li>…….</li>
</ol>
<p>搭建一个非springboot项目起码需要半天以上，而且新增别的模块的时候，比如说redis，还需要增加繁琐的redis.xml的配置文件</p>
<h2 id="springboot项目"><a href="#springboot项目" class="headerlink" title="springboot项目"></a>springboot项目</h2><p>一个springboot项目只需要2个文件就能启动</p>
<ol>
<li>pom.xml ：maven的pom文件，用于引入依赖</li>
<li>SampleController ：启动类</li>
</ol>
<p><strong><em>pom.xml</em></strong>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong><em>hello/SampleController.java</em></strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.*;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SpringApplication.run(SampleController.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>搭建一个springboot项目只需要2分钟，除了pom.xml不需要任何xml配置，新增别的模块比如说redis的时候只需要引入相关依赖，并在application.properties中增加相关的port等配置即可</p>
<h1 id="springboot自动配置"><a href="#springboot自动配置" class="headerlink" title="springboot自动配置"></a>springboot自动配置</h1><p>为什么用了springboot很多配置都不需要了？<br>Spring Boot关于自动配置的源码在spring-boot-autoconfigure中<br><img src="/uploads/springboot2.jpg" alt=""><br><img src="/uploads/springboot3.jpg" alt=""><br><strong><em>tomcat的自动配置</em></strong><br><img src="/uploads/springboot4.jpg" alt=""></p>
<p>@ConfigurationProperties：加载properties配置，prefix指定前缀</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@ConfigurationProperties(prefix = <span class="string">"server"</span>, ignoreUnknownFields = <span class="literal">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerProperties</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span>, <span class="title">EnvironmentAware</span>, <span class="title">Ordered</span> &#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Server HTTP port.</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> Integer port;</div><div class="line">......</div></pre></td></tr></table></figure>
<p><img src="/uploads/springboot5.jpg" alt=""></p>
<p>还是这个类;根据container对象的类型来判断究竟是使用哪个容器<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> setEnvironment(Environment environment) &#123;</div><div class="line">	<span class="keyword">this</span>.environment = environment;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> customize(ConfigurableEmbeddedServletContainer <span class="keyword">container</span>) &#123;</div><div class="line">	<span class="keyword">if</span> (getPort() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">container</span>.setPort(getPort());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (getAddress() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">container</span>.setAddress(getAddress());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (getContextPath() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">container</span>.setContextPath(getContextPath());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (getDisplayName() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">container</span>.setDisplayName(getDisplayName());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (getSession().getTimeout() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">container</span>.setSessionTimeout(getSession().getTimeout());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">container</span>.setPersistSession(getSession().isPersistent());</div><div class="line">	<span class="keyword">container</span>.setSessionStoreDir(getSession().getStoreDir());</div><div class="line">	<span class="keyword">if</span> (getSsl() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">container</span>.setSsl(getSsl());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (getJspServlet() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">container</span>.setJspServlet(getJspServlet());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (getCompression() != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">container</span>.setCompression(getCompression());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">container</span>.setServerHeader(getServerHeader());</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">container</span> instanceof TomcatEmbeddedServletContainerFactory) &#123;</div><div class="line">		getTomcat().customizeTomcat(<span class="keyword">this</span>,</div><div class="line">				(TomcatEmbeddedServletContainerFactory) <span class="keyword">container</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">container</span> instanceof JettyEmbeddedServletContainerFactory) &#123;</div><div class="line">		getJetty().customizeJetty(<span class="keyword">this</span>,</div><div class="line">				(JettyEmbeddedServletContainerFactory) <span class="keyword">container</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">container</span> instanceof UndertowEmbeddedServletContainerFactory) &#123;</div><div class="line">		getUndertow().customizeUndertow(<span class="keyword">this</span>,</div><div class="line">				(UndertowEmbeddedServletContainerFactory) <span class="keyword">container</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">container</span>.addInitializers(<span class="keyword">new</span> SessionConfiguringInitializer(<span class="keyword">this</span>.session));</div><div class="line">	<span class="keyword">container</span>.addInitializers(<span class="keyword">new</span> InitParameterConfiguringServletContextInitializer(</div><div class="line">			getContextParameters()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>container对象是怎么来的呢？也可以说springboot是怎么知道我们想用的是jetty还是tomcat或者是别的容器呢？<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</div><div class="line"><span class="variable">@Configuration</span></div><div class="line"><span class="variable">@ConditionalOnWebApplication</span></div><div class="line"><span class="variable">@Import</span>(BeanPostProcessorsRegistrar.class)</div><div class="line">public class EmbeddedServletContainerAutoConfiguration &#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Nested configuration if Tomcat is being used.</div><div class="line">	 */</div><div class="line">	<span class="variable">@Configuration</span></div><div class="line">	<span class="variable">@ConditionalOnClass</span>(&#123; Servlet.class, Tomcat.class &#125;)</div><div class="line">	<span class="variable">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</div><div class="line">	public static class EmbeddedTomcat &#123;</div><div class="line"></div><div class="line">		<span class="variable">@Bean</span></div><div class="line">		public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() &#123;</div><div class="line">			<span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">TomcatEmbeddedServletContainerFactory</span>();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Nested configuration if Jetty is being used.</div><div class="line">	 */</div><div class="line">	@<span class="selector-tag">Configuration</span></div><div class="line">	@<span class="selector-tag">ConditionalOnClass</span>(&#123; <span class="selector-tag">Servlet</span><span class="selector-class">.class</span>, <span class="selector-tag">Server</span><span class="selector-class">.class</span>, <span class="selector-tag">Loader</span><span class="selector-class">.class</span>,</div><div class="line">			<span class="selector-tag">WebAppContext</span><span class="selector-class">.class</span> &#125;)</div><div class="line">	@<span class="selector-tag">ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</div><div class="line">	<span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">class</span> <span class="selector-tag">EmbeddedJetty</span> &#123;</div><div class="line"></div><div class="line">		<span class="variable">@Bean</span></div><div class="line">		public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() &#123;</div><div class="line">			<span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">JettyEmbeddedServletContainerFactory</span>();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<ul>
<li><strong><em>@ConditionalOnClass</em></strong>：条件注解<br>  对应的类在classpath目录下存在时，才会去解析对应的配置文件</li>
<li>Spring Boot自动配置的原理：Spring 4.x 提供了基于条件来配置Bean的能力</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Configuration</span></div><div class="line"><span class="variable">@EnableConfigurationProperties</span></div><div class="line"><span class="variable">@ConditionalOnWebApplication</span></div><div class="line">public class ServerPropertiesAutoConfiguration &#123;</div><div class="line"></div><div class="line">	<span class="variable">@Bean</span></div><div class="line">	<span class="variable">@ConditionalOnMissingBean</span>(search = SearchStrategy.CURRENT)</div><div class="line">	public ServerProperties serverProperties() &#123;</div><div class="line">		<span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ServerProperties</span>();</div><div class="line">	&#125;</div><div class="line">......</div></pre></td></tr></table></figure>
<ul>
<li><strong><em>@Configuration</em></strong>：<br>  用@Configuration注解该类，等价 与XML中配置beans</li>
<li><strong><em>@Bean</em></strong>：用@Bean标注方法等价于XML中配置bean</li>
</ul>
<h2 id="springboot自动配置流程"><a href="#springboot自动配置流程" class="headerlink" title="springboot自动配置流程"></a>springboot自动配置流程</h2><ol>
<li>判断是否有相应的类</li>
<li>如果有相应的类，就在java配置类中配置相应的Properties Bean对象<br>这些相应的类都是我们通过pom.xml依赖进来的;<br><img src="/uploads/springboot6.jpg" alt=""></li>
</ol>
<h2 id="mysql的自动配置"><a href="#mysql的自动配置" class="headerlink" title="mysql的自动配置"></a>mysql的自动配置</h2><p><img src="/uploads/springboot7.jpg" alt=""><br>参数配置类：DataSourceProperties<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> DataSourceProperties</div><div class="line">		<span class="keyword">implements</span> BeanClassLoaderAware, EnvironmentAware, InitializingBean &#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> ClassLoader classLoader;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Environment environment;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Name of the datasource.</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> name = <span class="string">"testdb"</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Generate a random datasource name.</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="built_in">boolean</span> generateUniqueName;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Fully qualified name of the connection pool implementation to use. By default, it</div><div class="line">	 * is auto-detected from the classpath.</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> Class&lt;? <span class="keyword">extends</span> DataSource&gt; <span class="keyword">type</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> driverClassName;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * JDBC url of the database.</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="built_in">String</span> url;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>mybatis的一些配置;一般的配置都可以在相应的properties文件中找到<br><img src="/uploads/springboot8.jpg" alt=""><br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> Clinton Begin</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">protected</span> Environment environment;</div><div class="line"></div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> safeRowBoundsEnabled = <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> safeResultHandlerEnabled = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> mapUnderscoreToCamelCase = <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> aggressiveLazyLoading = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> multipleResultSetsEnabled = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> useGeneratedKeys = <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> useColumnLabel = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> cacheEnabled = <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> callSettersOnNulls = <span class="keyword">false</span>;</div><div class="line">......</div></pre></td></tr></table></figure></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li>繁琐的**.xml配置，springboot已经通过java配置的方式帮我们都做好了。</li>
<li>springboot通过基于条件来配置Bean的方式实现了自动配置</li>
<li>pom.xml依赖了哪个模块的jar包，就能实现哪个模块的自动配置</li>
<li>如果要修改某个模块的配置，可以通过对应的<em>*</em>Properties类来查看修改，或者直接通过官网的文档。</li>
</ol>
<h1 id="打包运行"><a href="#打包运行" class="headerlink" title="打包运行"></a>打包运行</h1><p>直接打成jar包，通过java -jar xx.jar来运行<br>需要pom.xml增加配置<br><img src="/uploads/springboot9.jpg" alt=""><br><img src="/uploads/springboot10.jpg" alt=""></p>
<p>完美…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/springboot1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;简单！快速！方便！&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring Boot 是由Pivotal团队提供的全新框架，目的是简化Spring应用的初始搭建及开发过程。它默认配置了很多框架的使用方式(习惯优于配置)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot使&lt;strong&gt;编码&lt;/strong&gt;变简单&lt;/li&gt;
&lt;li&gt;Spring Boot使&lt;strong&gt;配置&lt;/strong&gt;变简单&lt;/li&gt;
&lt;li&gt;Spring Boot使&lt;strong&gt;部署&lt;/strong&gt;变简单&lt;/li&gt;
&lt;li&gt;Spring Boot使&lt;strong&gt;监控&lt;/strong&gt;变简单
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>留言板</title>
    <link href="http://yoursite.com/2017/01/01/%E7%95%99%E8%A8%80%E6%9D%BF/"/>
    <id>http://yoursite.com/2017/01/01/留言板/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2017-06-14T00:27:44.484Z</updated>
    
    <summary type="html">
    
      留言板
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="http://yoursite.com/2016/11/12/Zookeeper/"/>
    <id>http://yoursite.com/2016/11/12/Zookeeper/</id>
    <published>2016-11-12T03:00:00.000Z</published>
    <updated>2017-06-12T16:30:20.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zookeeper概述"><a href="#Zookeeper概述" class="headerlink" title="Zookeeper概述"></a>Zookeeper概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>随着互联网技术的高速发展，企业对计算机系统的计算、储存能力要求越来越高，最简单的证明就是出现了一些诸如：高并发，海量储存这样的词汇。在这样的背景下，单纯依靠少量高性能主机来完成计算任务已经不能满足企业的需求，企业的IT架构逐渐从集中式向分布式过渡，所谓的分布式是指：把一个计算任务分解成若干个计算单元，并且分派到若干不同的计算机中去执行，然后汇总计算结果的过程！</p>
<p>分布式系统要解决的核心任务是如何把众多的计算机协同起来完成计算任务</p>
<h2 id="Zookeeper是什么？"><a href="#Zookeeper是什么？" class="headerlink" title="Zookeeper是什么？"></a>Zookeeper是什么？</h2><p>Zookeeper是源代码开放的分布式协调服务，解决分布式数据一致性问题。它是一个分布式的服务协调组件</p>
<h2 id="Zookeeper的基本概念"><a href="#Zookeeper的基本概念" class="headerlink" title="Zookeeper的基本概念"></a>Zookeeper的基本概念</h2><h3 id="集群角色"><a href="#集群角色" class="headerlink" title="集群角色"></a>集群角色</h3><p>Leader、Follower、Observer</p>
<ul>
<li>Leader服务器是整个Zookeeper集群工作机制中的核心</li>
<li>Follower服务器是Zookeeper集群状态的跟随者</li>
<li>Observer服务器充当一个观察者的角色</li>
<li>客户端是请求发起方</li>
</ul>
<p><img src="/uploads/zookeeper2.jpg" alt=""></p>
<h3 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h3><p>Zk中我们让所有的机器都注册一个临时节点，我们判断一个机器是否可用，我们只需要判断这个节点在zk中是否存在就可以了。</p>
<h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>会话是指客户端和Zookeeper服务器的连接，Zookeeper中的会话叫Session，客户端靠与服务器建立一个TCP的长连接来维持一个Session，客户端在启动的时候首先会与服务器建立一个TCP连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZK服务器发送请求并获得响应</p>
<h3 id="Zookeeper选举机制"><a href="#Zookeeper选举机制" class="headerlink" title="Zookeeper选举机制"></a>Zookeeper选举机制</h3><p>FastLeader选举算法：<br>当Leader崩溃或者失去大多数follower时，这时候Zookeeper进入恢复模式，恢复模式需要重新选举出一个新的leader，让所有的Server都恢复到一个正确的状态。</p>
<p>历史记录有的话选择历史的那个，没有就选自己，如果票数一样的话，那么id大的胜出<br>简单例子<br>服务器1启动，无其他节点，得不到响应，选举状态为LOOKING状态<br>服务器2启动，没有历史数据，都选自己，2的id大，所以1同意2为leader，但是未过半数，服务器1/2状态依然为LOOKING<br>服务器3启动，1和2有历史数据，都选2，服务器3选自己，2的票数为2,2/3超过半数，2为leader<br>服务器4启动，发起投票，1/2/3根据历史数据选2，leader为2.</p>
<h2 id="可以简单的说，zookeeper就是一个文件系统加一个通知机制"><a href="#可以简单的说，zookeeper就是一个文件系统加一个通知机制" class="headerlink" title="可以简单的说，zookeeper就是一个文件系统加一个通知机制"></a>可以简单的说，zookeeper就是一个文件系统加一个通知机制</h2><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>下面我们看zookeeper是如何实现协同操作的，首先，zookeeper维护了一个类似文件系统的数据结构。可以看到有根目录，根目录下有若干个子目录。每一个子目录都被称为Znode。和文件系统一样我们能够自由地增加删除znode。Znode是可以存储数据的。Zookeeper中znode可以分为4种类型：持久节点、临时节点、持久有序节点、临时有序节点<br>持久节点：<br>即使znode的创建者不再属于系统，数据也可以保存下来而不丢失。例如：<br>分配任务的主节点崩溃，但是从节点的任务分配情况也会保存下来。<br>临时节点：<br>主节点崩溃，该znode(master)和主节点一起消失–&gt;系统检测到–&gt;选举<br>有序：<br>唯一名称，创建顺序，task1,task2…</p>
<p>文件系统可以提供很多信息。针对一个znode，如果该znode是主节点的znode没有信息，那么说明还没有选出主节点。<br>其他znode节点：<br>workers作为父节点：其下znode节点为可用从节点信息<br>tasks作为父节点：其下znode节点为等待执行任务<br>assign作为父节点：其下znode节点为分配到某从节点任务</p>
<h3 id="通知机制"><a href="#通知机制" class="headerlink" title="通知机制"></a>通知机制</h3><p>客户端注册监听它关心的目录节点，当目录节点发生变化(数据改变，被删除，子目录节点增加删除)时，zookeeper会通知客户端。</p>
<p>leader节点负责写服务和数据的同步，follow节点负责读服务。Zookeeper不允许局部写入或读取znode节点的数据。</p>
<h2 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h2><ul>
<li>下载后解压安装Zookeeper包，官方下载链接点击<a href="http://hadoop.apache.org/zookeeper/releases.html" target="_blank" rel="external">这里</a></li>
<li>根据Zookeeper集群节点情况，创建如下格式的Zookeeper配置文件zoo.cfg：<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">tickTime=2000               //基本时间度量单位,一次心跳时间</div><div class="line">dataDir=/var/zookeeper/config</div><div class="line">clientPort=2181</div><div class="line">initLimit=5                 //初始化连接时, follower和leader之间的最长心跳时间5 * 2000ms = 10s</div><div class="line">syncLimit=2                 //请求和应答的最大时间长度 2 * 2000ms</div><div class="line"><span class="section">server.1=zoo1:2888:3888		//server.1=192.168.111.101:2888:3888	</span></div><div class="line"><span class="section">server.2=zoo2:2888:3888		//server.2=192.168.111.102:2888:3888	</span></div><div class="line"><span class="section">server.3=zoo3:2888:3888		//server.3=192.168.111.103:2888:3888</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中，dataDir指定Zookeeper的数据文件目录；其中server.id=host:port:port，id是为每个Zookeeper节点的编号，保存在dataDir目录下的myid文件中，zoo1~zoo3表示各个Zookeeper节点的hostname，第一个port是用于连接leader的端口(仲裁通信)，第二个port是用于leader选举的端口。</p>
<ul>
<li>在dataDir目录下创建myid文件，文件中只包含一行，且内容为该节点对应的server.id中的id编号。</li>
<li>启动Zookeeper服务：<br>通过<strong>bin/zkServer.sh</strong>脚本启动Zookeeper服务。 <code>./zkServer.sh start</code><br>查看该节点是leader还是follow：<strong>zkServer.sh status</strong></li>
</ul>
<h2 id="Zookeeper的典型应用场景："><a href="#Zookeeper的典型应用场景：" class="headerlink" title="Zookeeper的典型应用场景："></a>Zookeeper的典型应用场景：</h2><h3 id="统一命名服务"><a href="#统一命名服务" class="headerlink" title="统一命名服务"></a>统一命名服务</h3><p>在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。被命名的实体通常可以是集群中的机器，提供的服务地址，远程对象等等——这些我们都可以统称他们为名字（Name）</p>
<h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><p>配置的管理在分布式应用环境中很常见，例如同一个应用系统需要多台 PC Server 运行，但是它们运行的应用系统的某些配置项是相同的，如果要修改这些相同的配置项，那么就必须同时修改每台运行这个应用系统的 PC Server，这样非常麻烦而且容易出错。</p>
<p>像这样的配置信息完全可以交给 Zookeeper 来管理，将配置信息保存在 Zookeeper 的某个目录节点中，然后将所有需要修改的应用机器监控配置信息的状态，一旦配置信息发生变化，每台应用机器就会收到 Zookeeper 的通知，然后从 Zookeeper 获取新的配置信息应用到系统中</p>
<h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><p>Zookeeper 能够很容易的实现集群管理的功能，如有多台 Server 组成一个服务集群，那么必须要一个“总管”知道当前集群中每台机器的服务状态，一旦有机器不能提供服务，集群中其它集群必须知道，从而做出调整重新分配服务策略。同样当增加集群的服务能力时，就会增加一台或多台 Server，同样也必须让“总管”知道。</p>
<h3 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h3><p>共享锁在同一个进程中很容易实现，但是在跨进程或者在不同 Server 之间就不好实现了。Zookeeper 却很容易实现这个功能，实现方式也是需要获得锁的 Server 创建一个 EPHEMERAL_SEQUENTIAL 目录节点，然后调用 getChildren方法获取当前的目录节点列表中最小的目录节点是不是就是自己创建的目录节点，如果正是自己创建的，那么它就获得了这个锁，如果不是那么它就调用 exists(String path, boolean watch) 方法并监控 Zookeeper 上目录节点列表的变化，一直到自己创建的节点是列表中最小编号的目录节点，从而获得锁，释放锁很简单，只要删除前面它自己所创建的目录节点就行了。<br><img src="/uploads/zookeeper1.jpg" alt=""></p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>在分布式环境中，为了保证高可用性，通常同一个应用或同一个服务的提供方都会部署多份，达到对等服务。而消费者就须要在这些对等的服务器中选择一个来执行相关的业务逻辑。</p>
<h3 id="分布式通知-协调"><a href="#分布式通知-协调" class="headerlink" title="分布式通知/协调"></a>分布式通知/协调</h3><p>ZooKeeper中特有watcher注册与异步通知机制，能够很好的实现分布式环境下不同系统之间的通知与协调，实现对数据变更的实时处理。使用方法通常是不同系统都对ZK上同一个znode进行注册，监听znode的变化（包括znode本身内容及子节点的），其中一个系统update了znode，那么另一个系统能够收到通知，并作出相应处理</p>
<h2 id="Zookeeper的优势"><a href="#Zookeeper的优势" class="headerlink" title="Zookeeper的优势"></a>Zookeeper的优势</h2><p>1.源代码开放<br>2.已经被证实是高性能，易用稳定的工业级产品<br>3.有着广泛的应用：Hadoop、HBase、kafaka、Storm、Solr</p>
]]></content>
    
    <summary type="html">
    
      Zookeeper入门
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>集合框架</title>
    <link href="http://yoursite.com/2016/09/20/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2016/09/20/集合框架/</id>
    <published>2016-09-20T05:35:25.000Z</published>
    <updated>2016-11-12T04:14:53.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><p>Java集合工具包位于Java.util包下，包含了很多常用的数据结构，如数组、链表、栈、队列、集合、哈希表等。学习Java集合框架下大致可以分为如下五个部分：List列表、Set集合、Map映射、迭代器（Iterator、Enumeration）、工具类（Arrays、Collections）。<br>集合类主要分为两大类：</p>
<ol>
<li>Collection</li>
<li><p>Map</p>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Collection是List、Set等集合高度抽象出来的接口，它包含了这些集合的基本操作，它主要又分为两大部分：List和Set。</p>
<ul>
<li>List接口通常表示一个列表（数组、队列、链表、栈等），其中的元素可以重复，常用实现类为ArrayList和LinkedList，另外还有不常用的Vector。另外，LinkedList还是实现了Queue接口，因此也可以作为队列使用。</li>
<li>Set接口通常表示一个集合，其中的元素不允许重复（通过hashcode和equals函数保证），常用实现类有HashSet和TreeSet，HashSet是通过Map中的HashMap实现的，而TreeSet是通过Map中的TreeMap实现的。另外，TreeSet还实现了SortedSet接口，因此是有序的集合（集合中的元素要实现Comparable接口，并覆写Compartor函数才行）。<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2></li>
<li>Map是一个映射接口，其中的每个元素都是一个key-value键值对，同样抽象类AbstractMap通过适配器模式实现了Map接口中的大部分函数，TreeMap、HashMap、WeakHashMap等实现类都通过继承AbstractMap来实现，另外，不常用的HashTable直接实现了Map接口，它和Vector都是JDK1.0就引入的集合类。</li>
</ul>
</li>
</ol>
<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><ul>
<li>Iterator是遍历集合的迭代器（不能遍历Map，只用来遍历Collection），Collection的实现类都实现了iterator()函数，它返回一个Iterator对象，用来遍历集合，ListIterator则专门用来遍历List。而Enumeration则是JDK1.0时引入的，作用与Iterator相同，但它的功能比Iterator要少，它只能再Hashtable、Vector和Stack中使用。</li>
</ul>
<h2 id="Arrays、Collections"><a href="#Arrays、Collections" class="headerlink" title="Arrays、Collections"></a>Arrays、Collections</h2><ul>
<li>Arrays和Collections是用来操作数组、集合的两个工具类，例如在ArrayList和Vector中大量调用了Arrays.Copyof()方法，而Collections中有很多静态方法可以返回各集合类的synchronized版本，即线程安全的版本，当然了，如果要用线程安全的结合类，首选Concurrent并发包下的对应的集合类。</li>
</ul>
<h1 id="ArrayList源码剖析"><a href="#ArrayList源码剖析" class="headerlink" title="ArrayList源码剖析"></a>ArrayList源码剖析</h1><h2 id="ArrayList简介"><a href="#ArrayList简介" class="headerlink" title="ArrayList简介"></a>ArrayList简介</h2><ul>
<li>ArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。</li>
<li>ArrayList不是线程安全的，只能用在单线程环境下，多线程环境下可以考虑用Collections.synchronizedList(List l)函数返回一个线程安全的ArrayList类，也可以使用concurrent并发包下的CopyOnWriteArrayList类。</li>
<li>ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。</li>
</ul>
<h2 id="ArrayList源码剖析-JDK1-7"><a href="#ArrayList源码剖析-JDK1-7" class="headerlink" title="ArrayList源码剖析(JDK1.7)"></a>ArrayList源码剖析(JDK1.7)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> java.util;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 序列版本号</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</div><div class="line"></div><div class="line">    <span class="comment">//默认初始容量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="comment">//被用于空实例的共享空数组实例</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 存储ArrayList的元素的一个缓冲区</div><div class="line">     * ArrayList的容量就是这个缓冲区的长度</div><div class="line">     * transient关键字：Java的serialization提供了一种持久化对象实例的机制。</div><div class="line">     * 当持久化对象时，可能有一个特殊的对象数据成员，我们不想用</div><div class="line">     * serialization机制来保存它</div><div class="line">     * 为了在一个特定对象的一个域上关闭serialization，可以在这个域前</div><div class="line">     * 加上关键字transient。</div><div class="line">     * 当一个对象被序列化的时候，transient型变量的值不包括在序列化的表示中</div><div class="line">     * 然而非transient型的变量是被包括进去的。</div><div class="line">     * 也就是当ArrayList对象被序列化存储时，这个属性被没有被包含进去</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</div><div class="line"></div><div class="line">    <span class="comment">//ArrayList的长度</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">    <span class="comment">//构建特定容量的空的list</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                               initialCapacity);</div><div class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在1.7前，会默认在内存中直接分配10个空间，但是在1.7有了改变，会先</div><div class="line">     * 在内存中分配一个对象的内存空间，但是这个对象是没有长度的。但是在</div><div class="line">     * 你进行添加的时候，默认的会去拿对象的默认大小来作比较</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//创建一个包含collection的ArrayList</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        elementData = c.toArray();</div><div class="line">        size = elementData.length;</div><div class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 由于表示集合中元素个数的size和表示集合容量的elementData.length</div><div class="line">     * 可能不同，在不太需要增加集合元素的情况下容量有浪费，</div><div class="line">     * 可以使用trimToSize方法减小elementData的大小</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</div><div class="line">            elementData = Arrays.copyOf(elementData, size);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这个方法可以用来保证数组能够包含给定参数个元素，</div><div class="line">     * 也就是说如果需要的话可以扩大数组的容量</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> minExpand = (elementData != EMPTY_ELEMENTDATA)</div><div class="line">            <span class="comment">// any size if real element table</span></div><div class="line">            ? <span class="number">0</span></div><div class="line">            <span class="comment">// larger than default for empty table. It's already supposed to be</span></div><div class="line">            <span class="comment">// at default size.</span></div><div class="line">            : DEFAULT_CAPACITY;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</div><div class="line">            ensureExplicitCapacity(minCapacity);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</div><div class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ensureExplicitCapacity(minCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line"></div><div class="line">        <span class="comment">// overflow-conscious code</span></div><div class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">            grow(minCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置了数组elementData的最大长度</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</div><div class="line"></div><div class="line">    <span class="comment">//扩容:首先增加容量为原来的1.5倍，如果还不够，就用给定的容量minCapacity</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="comment">// overflow-conscious code</span></div><div class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">            newCapacity = minCapacity;</div><div class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">            newCapacity = hugeCapacity(minCapacity);</div><div class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></div><div class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</div><div class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">            Integer.MAX_VALUE :</div><div class="line">            MAX_ARRAY_SIZE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回ArrayList的长度</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断该集合是否是空集合(没有元素),即ArrayList的长度为0</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//检查集合中是否包含给定的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回集合中给定元素的第一次出现的位置，如果没有就返回-1</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="comment">//ArrayList集合中允许有null元素的存在</span></div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回给定元素最后一次出现的位置，如果没有就返回-1</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 复制集合,本质上就是使用Arrays类进行元素的复制</div><div class="line">    * 克隆出来的集合容量(elementData长度)为集合的长度,</div><div class="line">    * modCount(数组修改的次数)为0</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                ArrayList&lt;E&gt; v = (ArrayList&lt;E&gt;) <span class="keyword">super</span>.clone();</div><div class="line">            v.elementData = Arrays.copyOf(elementData, size);</div><div class="line">            v.modCount = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> v;</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//将集合转化为数组,返回ArrayList的Object数组</span></div><div class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</div><div class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回ArrayList元素组成的数组</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class="line">        <span class="comment">// 若数组a的大小 &lt; ArrayList的元素个数；    </span></div><div class="line">        <span class="comment">// 则新建一个T[]数组，数组大小是“ArrayList的元素个数”，</span></div><div class="line">        <span class="comment">//并将“ArrayList”全部拷贝到新数组中</span></div><div class="line">        <span class="keyword">if</span> (a.length &lt; size)</div><div class="line">            <span class="comment">// Make a new array of a's runtime type, but my contents:</span></div><div class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</div><div class="line">        <span class="comment">// 若数组a的大小 &gt;= ArrayList的元素个数；    </span></div><div class="line">        <span class="comment">// 则将ArrayList的全部元素都拷贝到数组a中。</span></div><div class="line">        <span class="comment">//并将数组a的角标为size元素设为null(why??)</span></div><div class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</div><div class="line">        <span class="keyword">if</span> (a.length &gt; size)</div><div class="line">            a[size] = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回指定位置的元素，这里用到了一个私有函数</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (E) elementData[index];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回指定位置的元素：先进行下标范围检查,再返回</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        rangeCheck(index);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> elementData(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置给定位置的元素为给定的元素，然后返回原来的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        rangeCheck(index);</div><div class="line"></div><div class="line">        E oldValue = elementData(index);</div><div class="line">        elementData[index] = element;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加元素(末尾)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        elementData[size++] = e;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//在指定位置添加元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        rangeCheckForAdd(index);</div><div class="line"></div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</div><div class="line">                         size - index);</div><div class="line">        elementData[index] = element;</div><div class="line">        size++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除指定位置的元素，然后返回这个元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        rangeCheck(index);</div><div class="line"></div><div class="line">        modCount++;</div><div class="line">        E oldValue = elementData(index);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 删除指定的元素，如果集合中有，则删除第一次出现的并返回true；</div><div class="line">    * 如果没有，集合不变并返回false</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</div><div class="line">                    fastRemove(index);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</div><div class="line">                    fastRemove(index);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Private remove method that skips bounds checking and does not</div><div class="line">     * return the value removed.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//清空集合，将所有元素设为null，并把size设为0</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line"></div><div class="line">        <span class="comment">// clear to let GC do its work</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        size = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加给定集合中的所有元素到集合中，从末尾开始添加</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        Object[] a = c.toArray();</div><div class="line">        <span class="keyword">int</span> numNew = a.length;</div><div class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</div><div class="line">        size += numNew;</div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//在指定位置开始添加指定集合中的所有元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        rangeCheckForAdd(index);</div><div class="line"></div><div class="line">        Object[] a = c.toArray();</div><div class="line">        <span class="keyword">int</span> numNew = a.length;</div><div class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> numMoved = size - index;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</div><div class="line">                             numMoved);</div><div class="line"></div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</div><div class="line">        size += numNew;</div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除给定范围内的所有元素</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> numMoved = size - toIndex;</div><div class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</div><div class="line">                         numMoved);</div><div class="line"></div><div class="line">        <span class="comment">// clear to let GC do its work</span></div><div class="line">        <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize; i &lt; size; i++) &#123;</div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        size = newSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Checks if the given index is in range.  If not, throws an appropriate</div><div class="line">     * runtime exception.  This method does *not* check if the index is</div><div class="line">     * negative: It is always used immediately prior to an array access,</div><div class="line">     * which throws an ArrayIndexOutOfBoundsException if index is negative.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt;= size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * A version of rangeCheck used by add and addAll.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs an IndexOutOfBoundsException detail message.</div><div class="line">     * Of the many possible refactorings of the error handling code,</div><div class="line">     * this "outlining" performs best with both server and client VMs.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//removeAll删除集合中所有在集合c中出现过的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//retainAll保留所有在集合c中出现的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 函数对集合中的元素进行遍历，首先复制集合中的元素，</div><div class="line">     * 然后检查是否符合complement的要求进行保留。在finally中，</div><div class="line">     * 复制元素到集合中。并修改相应的size</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</div><div class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (; r &lt; size; r++)</div><div class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</div><div class="line">                    elementData[w++] = elementData[r];</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></div><div class="line">            <span class="comment">// even if c.contains() throws.</span></div><div class="line">            <span class="keyword">if</span> (r != size) &#123;</div><div class="line">                System.arraycopy(elementData, r,</div><div class="line">                                 elementData, w,</div><div class="line">                                 size - r);</div><div class="line">                w += size - r;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (w != size) &#123;</div><div class="line">                <span class="comment">// clear to let GC do its work</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</div><div class="line">                    elementData[i] = <span class="keyword">null</span>;</div><div class="line">                modCount += size - w;</div><div class="line">                size = w;</div><div class="line">                modified = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> modified;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</div><div class="line">     * is, serialize it).</div><div class="line">     *</div><div class="line">     * <span class="doctag">@serialData</span> The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</div><div class="line">     *             instance is emitted (int), followed by all of its elements</div><div class="line">     *             (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></div><div class="line">        <span class="keyword">throws</span> java.io.IOException&#123;</div><div class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></div><div class="line">        <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">        s.defaultWriteObject();</div><div class="line"></div><div class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></div><div class="line">        s.writeInt(size);</div><div class="line"></div><div class="line">        <span class="comment">// Write out all elements in the proper order.</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</div><div class="line">            s.writeObject(elementData[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</div><div class="line">     * deserialize it).</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></div><div class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</div><div class="line">        elementData = EMPTY_ELEMENTDATA;</div><div class="line"></div><div class="line">        <span class="comment">// Read in size, and any hidden stuff</span></div><div class="line">        s.defaultReadObject();</div><div class="line"></div><div class="line">        <span class="comment">// Read in capacity</span></div><div class="line">        s.readInt(); <span class="comment">// ignored</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// be like clone(), allocate array based upon size not capacity</span></div><div class="line">            ensureCapacityInternal(size);</div><div class="line"></div><div class="line">            Object[] a = elementData;</div><div class="line">            <span class="comment">// Read in all elements in the proper order.</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</div><div class="line">                a[i] = s.readObject();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回在集合上的一个指定位置开始的迭代器,这里ArrayList使用了内部类ListItr</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回在集合上的一个迭代器</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回一个迭代器，使用了内部类Itr，继承于ListItr</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * An optimized version of AbstractList.Itr</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></div><div class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></div><div class="line">        <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor != size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">int</span> i = cursor;</div><div class="line">            <span class="keyword">if</span> (i &gt;= size)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            cursor = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            checkForComodification();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ArrayList.<span class="keyword">this</span>.remove(lastRet);</div><div class="line">                cursor = lastRet;</div><div class="line">                lastRet = -<span class="number">1</span>;</div><div class="line">                expectedModCount = modCount;</div><div class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * An optimized version of AbstractList.ListItr</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        ListItr(<span class="keyword">int</span> index) &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            cursor = index;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor != <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            cursor = i;</div><div class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            checkForComodification();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ArrayList.<span class="keyword">this</span>.set(lastRet, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> i = cursor;</div><div class="line">                ArrayList.<span class="keyword">this</span>.add(i, e);</div><div class="line">                cursor = i + <span class="number">1</span>;</div><div class="line">                lastRet = -<span class="number">1</span>;</div><div class="line">                expectedModCount = modCount;</div><div class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回一个从fromIndex到toIndex的子集合</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">        subListRangeCheck(fromIndex, toIndex, size);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subListRangeCheck</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex, <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span> + fromIndex);</div><div class="line">        <span class="keyword">if</span> (toIndex &gt; size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span> + toIndex);</div><div class="line">        <span class="keyword">if</span> (fromIndex &gt; toIndex)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +</div><div class="line">                                               <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SubList</span> <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; parent;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentOffset;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;</div><div class="line">        <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">        SubList(AbstractList&lt;E&gt; parent,</div><div class="line">                <span class="keyword">int</span> offset, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</div><div class="line">            <span class="keyword">this</span>.parent = parent;</div><div class="line">            <span class="keyword">this</span>.parentOffset = fromIndex;</div><div class="line">            <span class="keyword">this</span>.offset = offset + fromIndex;</div><div class="line">            <span class="keyword">this</span>.size = toIndex - fromIndex;</div><div class="line">            <span class="keyword">this</span>.modCount = ArrayList.<span class="keyword">this</span>.modCount;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</div><div class="line">            rangeCheck(index);</div><div class="line">            checkForComodification();</div><div class="line">            E oldValue = ArrayList.<span class="keyword">this</span>.elementData(offset + index);</div><div class="line">            ArrayList.<span class="keyword">this</span>.elementData[offset + index] = e;</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            rangeCheck(index);</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset + index);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</div><div class="line">            rangeCheckForAdd(index);</div><div class="line">            checkForComodification();</div><div class="line">            parent.add(parentOffset + index, e);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            rangeCheck(index);</div><div class="line">            checkForComodification();</div><div class="line">            E result = parent.remove(parentOffset + index);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size--;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            parent.removeRange(parentOffset + fromIndex,</div><div class="line">                               parentOffset + toIndex);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size -= toIndex - fromIndex;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> addAll(<span class="keyword">this</span>.size, c);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">            rangeCheckForAdd(index);</div><div class="line">            <span class="keyword">int</span> cSize = c.size();</div><div class="line">            <span class="keyword">if</span> (cSize==<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            checkForComodification();</div><div class="line">            parent.addAll(parentOffset + index, c);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size += cSize;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> listIterator();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            rangeCheckForAdd(index);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="keyword">this</span>.offset;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListIterator&lt;E&gt;() &#123;</div><div class="line">                <span class="keyword">int</span> cursor = index;</div><div class="line">                <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> cursor != SubList.<span class="keyword">this</span>.size;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">                    checkForComodification();</div><div class="line">                    <span class="keyword">int</span> i = cursor;</div><div class="line">                    <span class="keyword">if</span> (i &gt;= SubList.<span class="keyword">this</span>.size)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">                    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    cursor = i + <span class="number">1</span>;</div><div class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> cursor != <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</div><div class="line">                    checkForComodification();</div><div class="line">                    <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">                    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    cursor = i;</div><div class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> cursor;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> cursor - <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">                    checkForComodification();</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        SubList.<span class="keyword">this</span>.remove(lastRet);</div><div class="line">                        cursor = lastRet;</div><div class="line">                        lastRet = -<span class="number">1</span>;</div><div class="line">                        expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</div><div class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">                    checkForComodification();</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        ArrayList.<span class="keyword">this</span>.set(offset + lastRet, e);</div><div class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">                    checkForComodification();</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="keyword">int</span> i = cursor;</div><div class="line">                        SubList.<span class="keyword">this</span>.add(i, e);</div><div class="line">                        cursor = i + <span class="number">1</span>;</div><div class="line">                        lastRet = -<span class="number">1</span>;</div><div class="line">                        expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</div><div class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (expectedModCount != ArrayList.<span class="keyword">this</span>.modCount)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">            subListRangeCheck(fromIndex, toIndex, size);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, offset, fromIndex, toIndex);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.size)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="keyword">this</span>.size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (ArrayList.<span class="keyword">this</span>.modCount != <span class="keyword">this</span>.modCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="几点总结"><a href="#几点总结" class="headerlink" title="几点总结"></a>几点总结</h2><p>关于ArrayList的源码，给出几点比较重要的总结：</p>
<ol>
<li>注意其三个不同的构造方法。无参构造方法构造的ArrayList的容量默认为10，带有Collection参数的构造方法，将Collection转化为数组赋给ArrayList的实现数组elementData。</li>
<li>注意扩充容量的方法ensureCapacity。ArrayList在每次增加元素（可能是1个，也可能是一组）时，都要调用该方法来确保足够的容量。当容量不足以容纳当前的元素个数时，就设置新的容量为旧的容量的1.5倍加1，如果设置后的新容量还不够，则直接新容量设置为传入的参数（也就是所需的容量），而后用Arrays.copyof()方法将元素拷贝到新的数组（详见下面的第3点）。从中可以看出，当容量不够时，每次增加元素，都要将原来的元素拷贝到一个新的数组中，非常之耗时，也因此建议在事先能确定元素数量的情况下，才使用ArrayList，否则建议使用LinkedList。</li>
<li>ArrayList的实现中大量地调用了Arrays.copyof()和System.arraycopy()方法。我们有必要对这两个方法的实现做下深入的了解。<br> 首先来看Arrays.copyof()方法。它有很多个重载的方法，但实现思路都是一样的，我们来看泛型版本的源码：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class="keyword">int</span> newLength) &#123;  </div><div class="line">    <span class="keyword">return</span> (T[]) copyOf(original, newLength, original.getClass());  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>很明显调用了另一个copyof方法，该方法有三个参数，最后一个参数指明要转换的数据的类型，其源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;  </div><div class="line">    T[] copy = ((Object)newType == (Object)Object[].class)  </div><div class="line">        ? (T[]) <span class="keyword">new</span> Object[newLength]  </div><div class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);  </div><div class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,  </div><div class="line">                     Math.min(original.length, newLength));  </div><div class="line">    <span class="keyword">return</span> copy;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里可以很明显地看出，该方法实际上是在其内部又创建了一个长度为newlength的数组，调用System.arraycopy()方法，将原来数组中的元素复制到了新的数组中。<br>    下面来看System.arraycopy()方法。该方法被标记了native，调用了系统的C/C++代码，在JDK中是看不到的，但在openJDK中可以看到其源码。该函数实际上最终调用了C语言的memmove()函数，因此它可以保证同一个数组内元素的正确复制和移动，比一般的复制方法的实现效率要高很多，很适合用来批量处理数组。Java强烈推荐在复制大量数组元素时用该方法，以取得更高的效率。</p>
<ol>
<li>注意ArrayList的两个转化为静态数组的toArray方法。<br> 第一个，Object[] toArray()方法。该方法有可能会抛出java.lang.ClassCastException异常，如果直接用向下转型的方法，将整个ArrayList集合转变为指定类型的Array数组，便会抛出该异常，而如果转化为Array数组时不向下转型，而是将每个元素向下转型，则不会抛出该异常，显然对数组中的元素一个个进行向下转型，效率不高，且不太方便。<br> 第二个，<t> T[] toArray(T[] a)方法。该方法可以直接将ArrayList转换得到的Array进行整体向下转型（转型其实是在该方法的源码中实现的），且从该方法的源码中可以看出，参数a的大小不足时，内部会调用Arrays.copyOf方法，该方法内部创建一个新的数组返回，因此对该方法的常用形式如下：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div></pre></td><td class="code"><pre><div class="line">public static Integer[] vectorToArray2(ArrayList&lt;Integer&gt; v) &#123;    </div><div class="line">    Integer[] newText = (Integer[])v.toArray(new Integer[0]);    </div><div class="line">    return newText;    </div><div class="line">&#125;  </div><div class="line">``` </div><div class="line">&amp;nbsp;</div><div class="line">5. rrayList基于数组实现，可以通过下标索引直接查找到指定位置的元素，因此查找效率高，但每次插入或删除元素，就要大量地移动元素，插入删除元素的效率低。</div><div class="line">6.  在查找给定元素索引值等的方法中，源码都将该元素的值分为null和不为null两种情况处理，ArrayList中允许元素为null。</div><div class="line"></div><div class="line"># LinkedList源码剖析</div><div class="line">## LinkedList简介</div><div class="line"> - LinkedList是基于双向循环链表（从源码中可以很容易看出）实现的，除了可以当做链表来操作外，它还可以当做栈、队列和双端队列来使用。</div><div class="line"> - LinkedList同样是非线程安全的，只在单线程下适合使用。</div><div class="line"> - LinkedList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了Cloneable接口，能被克隆。</div><div class="line">## LinkedList源码剖析(JDK1.7)</div><div class="line">```java</div><div class="line"></div><div class="line">package java.util;</div><div class="line"></div><div class="line">public class LinkedList&lt;E&gt;</div><div class="line">    extends AbstractSequentialList&lt;E&gt;</div><div class="line">    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</div><div class="line">&#123;</div><div class="line">    //LinkedList对象里面存储的元素个数</div><div class="line">    transient int size = 0;</div><div class="line"></div><div class="line">    //链表头结点</div><div class="line">    transient Node&lt;E&gt; first;</div><div class="line"></div><div class="line">    //链表尾结点</div><div class="line">    transient Node&lt;E&gt; last;</div><div class="line"></div><div class="line">    //生成一个空的链表</div><div class="line">    public LinkedList() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //按c里面的元素生成一个LinkedList</div><div class="line">    public LinkedList(Collection&lt;? extends E&gt; c) &#123;</div><div class="line">        this();</div><div class="line">        //将c里面的元素添加到空链表尾部</div><div class="line">        addAll(c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //首部增加结点，结点的值为e</div><div class="line">    private void linkFirst(E e) &#123;</div><div class="line">        final Node&lt;E&gt; f = first;//f指向头结点</div><div class="line">        //生成一个新结点，结点的值为e,其前向指针为null，后向指针为f</div><div class="line">        final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);</div><div class="line">        first = newNode;</div><div class="line">        if (f == null)</div><div class="line">            //如果f为null，则表示整个链表目前是空的，则尾结点也指向新结点</div><div class="line">            last = newNode;</div><div class="line">        else</div><div class="line">            //f(老的头结点)的前向指针指向最新的结点信息</div><div class="line">            f.prev = newNode;</div><div class="line">        size++;</div><div class="line">        modCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //尾部增加结点，结点的值为e</div><div class="line">    void linkLast(E e) &#123;</div><div class="line">        final Node&lt;E&gt; l = last;</div><div class="line">        final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</div><div class="line">        last = newNode;</div><div class="line">        if (l == null)</div><div class="line">            first = newNode;</div><div class="line">        else</div><div class="line">            l.next = newNode;</div><div class="line">        size++;</div><div class="line">        modCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //非空结点succ之前插入新结点，新结点的值为e</div><div class="line">    void linkBefore(E e, Node&lt;E&gt; succ) &#123;</div><div class="line">        // assert succ != null;</div><div class="line">        final Node&lt;E&gt; pred = succ.prev;</div><div class="line">        final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);</div><div class="line">        succ.prev = newNode;</div><div class="line">        if (pred == null)</div><div class="line">            first = newNode;</div><div class="line">        else</div><div class="line">            pred.next = newNode;</div><div class="line">        size++;</div><div class="line">        modCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //删除头结点，并返回该结点的值</div><div class="line">    private E unlinkFirst(Node&lt;E&gt; f) &#123;</div><div class="line">        // assert f == first &amp;&amp; f != null;</div><div class="line">        final E element = f.item;</div><div class="line">        final Node&lt;E&gt; next = f.next;</div><div class="line">        f.item = null;</div><div class="line">        f.next = null; // help GC</div><div class="line">        first = next;</div><div class="line">        if (next == null)</div><div class="line">            last = null;</div><div class="line">        else</div><div class="line">            next.prev = null;</div><div class="line">        size--;</div><div class="line">        modCount++;</div><div class="line">        return element;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //删除尾结点，并返回尾结点的内容</div><div class="line">    private E unlinkLast(Node&lt;E&gt; l) &#123;</div><div class="line">        // assert l == last &amp;&amp; l != null;</div><div class="line">        final E element = l.item;</div><div class="line">        final Node&lt;E&gt; prev = l.prev;</div><div class="line">        l.item = null;</div><div class="line">        l.prev = null; // help GC</div><div class="line">        last = prev;</div><div class="line">        if (prev == null)</div><div class="line">            first = null;</div><div class="line">        else</div><div class="line">            prev.next = null;</div><div class="line">        size--;</div><div class="line">        modCount++;</div><div class="line">        return element;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //删除结点x</div><div class="line">    E unlink(Node&lt;E&gt; x) &#123;</div><div class="line">        // assert x != null;</div><div class="line">        final E element = x.item;</div><div class="line">        final Node&lt;E&gt; next = x.next;</div><div class="line">        final Node&lt;E&gt; prev = x.prev;</div><div class="line"></div><div class="line">        if (prev == null) &#123;</div><div class="line">            first = next;</div><div class="line">        &#125; else &#123;</div><div class="line">            prev.next = next;</div><div class="line">            x.prev = null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (next == null) &#123;</div><div class="line">            last = prev;</div><div class="line">        &#125; else &#123;</div><div class="line">            next.prev = prev;</div><div class="line">            x.next = null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        x.item = null;</div><div class="line">        size--;</div><div class="line">        modCount++;</div><div class="line">        return element;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //获得头结点的值</div><div class="line">    public E getFirst() &#123;</div><div class="line">        final Node&lt;E&gt; f = first;</div><div class="line">        if (f == null)</div><div class="line">            throw new NoSuchElementException();</div><div class="line">        return f.item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //获得尾结点的值</div><div class="line">    public E getLast() &#123;</div><div class="line">        final Node&lt;E&gt; l = last;</div><div class="line">        if (l == null)</div><div class="line">            throw new NoSuchElementException();</div><div class="line">        return l.item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //移除头结点</div><div class="line">    public E removeFirst() &#123;</div><div class="line">        final Node&lt;E&gt; f = first;</div><div class="line">        if (f == null)</div><div class="line">            throw new NoSuchElementException();</div><div class="line">        return unlinkFirst(f);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //移除尾结点</div><div class="line">    public E removeLast() &#123;</div><div class="line">        final Node&lt;E&gt; l = last;</div><div class="line">        if (l == null)</div><div class="line">            throw new NoSuchElementException();</div><div class="line">        return unlinkLast(l);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //添加到头结点，结点的值为e</div><div class="line">    public void addFirst(E e) &#123;</div><div class="line">        linkFirst(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //添加到尾结点，结点值为e</div><div class="line">    public void addLast(E e) &#123;</div><div class="line">        linkLast(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //判断元素（值为o）是o否在链表中</div><div class="line">    public boolean contains(Object o) &#123;</div><div class="line">        return indexOf(o) != -1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //返回元素个数</div><div class="line">    public int size() &#123;</div><div class="line">        return size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //添加元素，元素值为e</div><div class="line">    public boolean add(E e) &#123;</div><div class="line">        linkLast(e);//添加到链表尾部</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //移除值为o的元素，o可以为null,找到一个删除即返回</div><div class="line">    public boolean remove(Object o) &#123;</div><div class="line">        if (o == null) &#123;</div><div class="line">            for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</div><div class="line">                if (x.item == null) &#123;</div><div class="line">                    unlink(x);</div><div class="line">                    return true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</div><div class="line">                if (o.equals(x.item)) &#123;</div><div class="line">                    unlink(x);</div><div class="line">                    return true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //将c中的元素都添加到当前链表中</div><div class="line">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</div><div class="line">        return addAll(size, c);//添加到链表尾部</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //在角标为index的元素前，添加c中所有的元素到当前链表中(后向添加的)</div><div class="line">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</div><div class="line">        checkPositionIndex(index);//判断index是否超出界</div><div class="line"></div><div class="line">        Object[] a = c.toArray();//将集合转换为数组</div><div class="line">        int numNew = a.length;</div><div class="line">        if (numNew == 0)</div><div class="line">            return false;</div><div class="line"></div><div class="line">        Node&lt;E&gt; pred, succ;</div><div class="line">        if (index == size) &#123;</div><div class="line">            succ = null;</div><div class="line">            pred = last;//指向尾结点</div><div class="line">        &#125; else &#123;</div><div class="line">            succ = node(index);//succ指向第index个结点</div><div class="line">            pred = succ.prev;//pred指向succ的前向结点</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (Object o : a) &#123;</div><div class="line">            @SuppressWarnings("unchecked") E e = (E) o;</div><div class="line">            Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, null);</div><div class="line">            if (pred == null)</div><div class="line">                first = newNode;</div><div class="line">            else</div><div class="line">                pred.next = newNode;</div><div class="line">            pred = newNode;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (succ == null) &#123;</div><div class="line">            last = pred;</div><div class="line">        &#125; else &#123;</div><div class="line">            pred.next = succ;</div><div class="line">            succ.prev = pred;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        size += numNew;</div><div class="line">        modCount++;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //清除链表里面的所有元素</div><div class="line">    public void clear() &#123;</div><div class="line">        for (Node&lt;E&gt; x = first; x != null; ) &#123;</div><div class="line">            Node&lt;E&gt; next = x.next;</div><div class="line">            x.item = null;//释放值结点，便于GC回收</div><div class="line">            x.next = null;//释放前向指针</div><div class="line">            x.prev = null;//释放后向指针</div><div class="line">            x = next;//后向遍历</div><div class="line">        &#125;</div><div class="line">        first = last = null;//释放头尾结点</div><div class="line">        size = 0;</div><div class="line">        modCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //获得第index个结点的值</div><div class="line">    public E get(int index) &#123;</div><div class="line">        checkElementIndex(index);</div><div class="line">        return node(index).item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //设置第index元素的值</div><div class="line">    public E set(int index, E element) &#123;</div><div class="line">        checkElementIndex(index);</div><div class="line">        Node&lt;E&gt; x = node(index);</div><div class="line">        E oldVal = x.item;</div><div class="line">        x.item = element;</div><div class="line">        return oldVal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //第index个结点之前添加结点</div><div class="line">    public void add(int index, E element) &#123;</div><div class="line">        checkPositionIndex(index);</div><div class="line"></div><div class="line">        if (index == size)</div><div class="line">            linkLast(element);</div><div class="line">        else</div><div class="line">            linkBefore(element, node(index));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //删除第index个结点</div><div class="line">    public E remove(int index) &#123;</div><div class="line">        checkElementIndex(index);</div><div class="line">        return unlink(node(index));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //判断index是否是链表中的元素的下标</div><div class="line">    private boolean isElementIndex(int index) &#123;</div><div class="line">        return index &gt;= 0 &amp;&amp; index &lt; size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //判断index是否是链表中的元素的下标</div><div class="line">    private boolean isPositionIndex(int index) &#123;</div><div class="line">        return index &gt;= 0 &amp;&amp; index &lt;= size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Constructs an IndexOutOfBoundsException detail message.</div><div class="line">     * Of the many possible refactorings of the error handling code,</div><div class="line">     * this "outlining" performs best with both server and client VMs.</div><div class="line">     */</div><div class="line">    private String outOfBoundsMsg(int index) &#123;</div><div class="line">        return "Index: "+index+", Size: "+size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void checkElementIndex(int index) &#123;</div><div class="line">        if (!isElementIndex(index))</div><div class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void checkPositionIndex(int index) &#123;</div><div class="line">        if (!isPositionIndex(index))</div><div class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //定位链表中的第index个结点</div><div class="line">    Node&lt;E&gt; node(int index) &#123;</div><div class="line">        // assert isElementIndex(index);</div><div class="line">        //index小于size的一半时，从头向后找</div><div class="line">        if (index &lt; (size &gt;&gt; 1)) &#123;</div><div class="line">            Node&lt;E&gt; x = first;</div><div class="line">            //这里的x相当于index角标的元素</div><div class="line">            for (int i = 0; i &lt; index; i++)</div><div class="line">                x = x.next;</div><div class="line">            return x;</div><div class="line">        &#125; else &#123;</div><div class="line">            Node&lt;E&gt; x = last;</div><div class="line">            for (int i = size - 1; i &gt; index; i--)</div><div class="line">                x = x.prev;</div><div class="line">            return x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //定位元素，首次出现的元素的值为o的结点序号</div><div class="line">    public int indexOf(Object o) &#123;</div><div class="line">        int index = 0;</div><div class="line">        if (o == null) &#123;</div><div class="line">            for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</div><div class="line">                if (x.item == null)</div><div class="line">                    return index;</div><div class="line">                index++;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</div><div class="line">                if (o.equals(x.item))</div><div class="line">                    return index;</div><div class="line">                index++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //定位元素，最后一次出现的元素值为o的元素序号</div><div class="line">    public int lastIndexOf(Object o) &#123;</div><div class="line">        int index = size;</div><div class="line">        if (o == null) &#123;</div><div class="line">            for (Node&lt;E&gt; x = last; x != null; x = x.prev) &#123;</div><div class="line">                index--;</div><div class="line">                if (x.item == null)</div><div class="line">                    return index;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            for (Node&lt;E&gt; x = last; x != null; x = x.prev) &#123;</div><div class="line">                index--;</div><div class="line">                if (o.equals(x.item))</div><div class="line">                    return index;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //实现队列操作，返回第一个元素的值</div><div class="line">    public E peek() &#123;</div><div class="line">        final Node&lt;E&gt; f = first;</div><div class="line">        return (f == null) ? null : f.item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //实现队列操作，返回第一个结点元素</div><div class="line">    public E element() &#123;</div><div class="line">        return getFirst();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //实现队列操作，弹出第一个结点</div><div class="line">    public E poll() &#123;</div><div class="line">        final Node&lt;E&gt; f = first;</div><div class="line">        return (f == null) ? null : unlinkFirst(f);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //删除第一个结点</div><div class="line">    public E remove() &#123;</div><div class="line">        return removeFirst();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //添加(尾)结点,add和addLast调用相同方法</div><div class="line">    public boolean offer(E e) &#123;</div><div class="line">        return add(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //添加头结点</div><div class="line">    public boolean offerFirst(E e) &#123;</div><div class="line">        addFirst(e);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //添加尾结点</div><div class="line">    public boolean offerLast(E e) &#123;</div><div class="line">        addLast(e);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //返回头结点的值,和peek()函数代码一样</div><div class="line">    public E peekFirst() &#123;</div><div class="line">        final Node&lt;E&gt; f = first;</div><div class="line">        return (f == null) ? null : f.item;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">    //返回尾结点的值</div><div class="line">    public E peekLast() &#123;</div><div class="line">        final Node&lt;E&gt; l = last;</div><div class="line">        return (l == null) ? null : l.item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //弹出第一个结点，和poll()函数代码一样</div><div class="line">    public E pollFirst() &#123;</div><div class="line">        final Node&lt;E&gt; f = first;</div><div class="line">        return (f == null) ? null : unlinkFirst(f);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //弹出最后一个结点</div><div class="line">    public E pollLast() &#123;</div><div class="line">        final Node&lt;E&gt; l = last;</div><div class="line">        return (l == null) ? null : unlinkLast(l);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //添加头部结点</div><div class="line">    public void push(E e) &#123;</div><div class="line">        addFirst(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //弹出第一个结点</div><div class="line">    public E pop() &#123;</div><div class="line">        return removeFirst();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //删除第一个值为o的结点</div><div class="line">    public boolean removeFirstOccurrence(Object o) &#123;</div><div class="line">        return remove(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //删除最后一个值为o的结点</div><div class="line">    public boolean removeLastOccurrence(Object o) &#123;</div><div class="line">        if (o == null) &#123;</div><div class="line">            for (Node&lt;E&gt; x = last; x != null; x = x.prev) &#123;</div><div class="line">                if (x.item == null) &#123;</div><div class="line">                    unlink(x);</div><div class="line">                    return true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            for (Node&lt;E&gt; x = last; x != null; x = x.prev) &#123;</div><div class="line">                if (o.equals(x.item)) &#123;</div><div class="line">                    unlink(x);</div><div class="line">                    return true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //返回双向迭代器</div><div class="line">    public ListIterator&lt;E&gt; listIterator(int index) &#123;</div><div class="line">        checkPositionIndex(index);</div><div class="line">        return new ListItr(index);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //私有内部类，实现双向迭代器</div><div class="line">    private class ListItr implements ListIterator&lt;E&gt; &#123;</div><div class="line">        private Node&lt;E&gt; lastReturned = null;</div><div class="line">        private Node&lt;E&gt; next;</div><div class="line">        private int nextIndex;</div><div class="line">        private int expectedModCount = modCount;</div><div class="line"></div><div class="line">        ListItr(int index) &#123;</div><div class="line">            // assert isPositionIndex(index);</div><div class="line">            next = (index == size) ? null : node(index);</div><div class="line">            nextIndex = index;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean hasNext() &#123;</div><div class="line">            return nextIndex &lt; size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public E next() &#123;</div><div class="line">            checkForComodification();</div><div class="line">            if (!hasNext())</div><div class="line">                throw new NoSuchElementException();</div><div class="line"></div><div class="line">            lastReturned = next;</div><div class="line">            next = next.next;</div><div class="line">            nextIndex++;</div><div class="line">            return lastReturned.item;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean hasPrevious() &#123;</div><div class="line">            return nextIndex &gt; 0;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public E previous() &#123;</div><div class="line">            checkForComodification();</div><div class="line">            if (!hasPrevious())</div><div class="line">                throw new NoSuchElementException();</div><div class="line"></div><div class="line">            lastReturned = next = (next == null) ? last : next.prev;</div><div class="line">            nextIndex--;</div><div class="line">            return lastReturned.item;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public int nextIndex() &#123;</div><div class="line">            return nextIndex;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public int previousIndex() &#123;</div><div class="line">            return nextIndex - 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void remove() &#123;</div><div class="line">            checkForComodification();</div><div class="line">            if (lastReturned == null)</div><div class="line">                throw new IllegalStateException();</div><div class="line"></div><div class="line">            Node&lt;E&gt; lastNext = lastReturned.next;</div><div class="line">            unlink(lastReturned);</div><div class="line">            if (next == lastReturned)</div><div class="line">                next = lastNext;</div><div class="line">            else</div><div class="line">                nextIndex--;</div><div class="line">            lastReturned = null;</div><div class="line">            expectedModCount++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void set(E e) &#123;</div><div class="line">            if (lastReturned == null)</div><div class="line">                throw new IllegalStateException();</div><div class="line">            checkForComodification();</div><div class="line">            lastReturned.item = e;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void add(E e) &#123;</div><div class="line">            checkForComodification();</div><div class="line">            lastReturned = null;</div><div class="line">            if (next == null)</div><div class="line">                linkLast(e);</div><div class="line">            else</div><div class="line">                linkBefore(e, next);</div><div class="line">            nextIndex++;</div><div class="line">            expectedModCount++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        final void checkForComodification() &#123;</div><div class="line">            if (modCount != expectedModCount)</div><div class="line">                throw new ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static class Node&lt;E&gt; &#123;</div><div class="line">        E item;//结点的值</div><div class="line">        Node&lt;E&gt; next;//结点的后向指针</div><div class="line">        Node&lt;E&gt; prev;//结点的前向指针</div><div class="line">        //构造函数中已完成Node成员的赋值</div><div class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class="line">            this.item = element;</div><div class="line">            this.next = next;</div><div class="line">            this.prev = prev;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //返回前向迭代器</div><div class="line">    public Iterator&lt;E&gt; descendingIterator() &#123;</div><div class="line">        return new DescendingIterator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //前向迭代器</div><div class="line">    private class DescendingIterator implements Iterator&lt;E&gt; &#123;</div><div class="line">        private final ListItr itr = new ListItr(size());</div><div class="line">        public boolean hasNext() &#123;</div><div class="line">            return itr.hasPrevious();</div><div class="line">        &#125;</div><div class="line">        public E next() &#123;</div><div class="line">            return itr.previous();</div><div class="line">        &#125;</div><div class="line">        public void remove() &#123;</div><div class="line">            itr.remove();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @SuppressWarnings("unchecked")</div><div class="line">    private LinkedList&lt;E&gt; superClone() &#123;</div><div class="line">        try &#123;</div><div class="line">            return (LinkedList&lt;E&gt;) super.clone();</div><div class="line">        &#125; catch (CloneNotSupportedException e) &#123;</div><div class="line">            throw new InternalError();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //拷贝操作，执行浅拷贝，只复制引用，而没有复制引用指向的内存</div><div class="line">    public Object clone() &#123;</div><div class="line">        LinkedList&lt;E&gt; clone = superClone();</div><div class="line"></div><div class="line">        // Put clone into "virgin" state</div><div class="line">        clone.first = clone.last = null;</div><div class="line">        clone.size = 0;</div><div class="line">        clone.modCount = 0;</div><div class="line"></div><div class="line">        // Initialize clone with our elements</div><div class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next)</div><div class="line">            clone.add(x.item);</div><div class="line"></div><div class="line">        return clone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //转换为数组</div><div class="line">    public Object[] toArray() &#123;</div><div class="line">        Object[] result = new Object[size];</div><div class="line">        int i = 0;</div><div class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next)</div><div class="line">            result[i++] = x.item;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //转换为数组</div><div class="line">    @SuppressWarnings("unchecked")</div><div class="line">    public &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class="line">        if (a.length &lt; size)</div><div class="line">            a = (T[])java.lang.reflect.Array.newInstance(</div><div class="line">                                a.getClass().getComponentType(), size);</div><div class="line">        int i = 0;</div><div class="line">        Object[] result = a;</div><div class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next)</div><div class="line">            result[i++] = x.item;</div><div class="line"></div><div class="line">        if (a.length &gt; size)</div><div class="line">            a[size] = null;</div><div class="line"></div><div class="line">        return a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 876323262645176354L;</div><div class="line"></div><div class="line">    //序列化</div><div class="line">    private void writeObject(java.io.ObjectOutputStream s)</div><div class="line">        throws java.io.IOException &#123;</div><div class="line">        // Write out any hidden serialization magic</div><div class="line">        s.defaultWriteObject();</div><div class="line"></div><div class="line">        // Write out size</div><div class="line">        s.writeInt(size);</div><div class="line"></div><div class="line">        // Write out all elements in the proper order.</div><div class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next)</div><div class="line">            s.writeObject(x.item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //反序列化</div><div class="line">    @SuppressWarnings("unchecked")</div><div class="line">    private void readObject(java.io.ObjectInputStream s)</div><div class="line">        throws java.io.IOException, ClassNotFoundException &#123;</div><div class="line">        // Read in any hidden serialization magic</div><div class="line">        s.defaultReadObject();</div><div class="line"></div><div class="line">        // Read in size</div><div class="line">        int size = s.readInt();</div><div class="line"></div><div class="line">        // Read in all elements in the proper order.</div><div class="line">        for (int i = 0; i &lt; size; i++)</div><div class="line">            linkLast((E)s.readObject());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</t></li>
</ol>
<h2 id="几点总结-1"><a href="#几点总结-1" class="headerlink" title="几点总结"></a>几点总结</h2><p>关于LinkedList的源码，给出几点比较重要的总结：</p>
<ol>
<li>从源码中很明显可以看出，LinkedList的实现是基于双向循环链表的，且头结点中不存放数据，如下图：<br> <img src="/uploads/list1.jpg" alt=""></li>
<li>注意两个不同的构造方法。无参构造方法直接建立一个仅包含head节点的空链表，包含Collection的构造方法，先调用无参构造方法建立一个空链表，而后将Collection中的数据加入到链表的尾部后面。</li>
<li>在查找和删除某元素时，源码中都划分为该元素为null和不为null两种情况来处理，LinkedList中允许元素为null。</li>
<li>LinkedList是基于链表实现的，因此不存在容量不足的问题，所以这里没有扩容的方法。</li>
<li>注意源码中的Entry<e> entry(int index)方法。该方法返回双向链表中指定位置处的节点，而链表中是没有下标索引的，要指定位置出的元素，就要遍历该链表，从源码的实现中，我们看到这里有一个加速动作。源码中先将index与长度size的一半比较，如果index<size 2，就只从位置0往后遍历到位置index处，而如果index="">size/2，就只从位置size往前遍历到位置index处。这样可以减少一部分不必要的遍历，从而提高一定的效率（实际上效率还是很低）。</size></e></li>
<li><p>注意链表类对应的数据结构Entry。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 双向链表的节点所对应的数据结构。    </span></div><div class="line"><span class="comment">// 包含3部分：上一节点，下一节点，当前节点值。    </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">E</span>&gt; </span>&#123;    </div><div class="line">    <span class="comment">// 当前节点所包含的值    </span></div><div class="line">    E element;    </div><div class="line">    <span class="comment">// 下一个节点    </span></div><div class="line">    Entry&lt;E&gt; next;    </div><div class="line">    <span class="comment">// 上一个节点    </span></div><div class="line">    Entry&lt;E&gt; previous;    </div><div class="line">  </div><div class="line">    <span class="comment">/**   </span></div><div class="line">     * 链表节点的构造函数。   </div><div class="line">     * 参数说明：   </div><div class="line">     *   element  —— 节点所包含的数据   </div><div class="line">     *   next      —— 下一个节点   </div><div class="line">     *   previous —— 上一个节点   </div><div class="line">     */   </div><div class="line">    Entry(E element, Entry&lt;E&gt; next, Entry&lt;E&gt; previous) &#123;    </div><div class="line">        <span class="keyword">this</span>.element = element;    </div><div class="line">        <span class="keyword">this</span>.next = next;    </div><div class="line">        <span class="keyword">this</span>.previous = previous;    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>LinkedList是基于链表实现的，因此插入删除效率高，查找效率低（虽然有一个加速动作）。</p>
</li>
<li>要注意源码中还实现了栈和队列的操作方法，因此也可以作为栈、队列和双端队列来使用。</li>
</ol>
<h1 id="Vector源码剖析"><a href="#Vector源码剖析" class="headerlink" title="Vector源码剖析"></a>Vector源码剖析</h1><p>##　Vector简介</p>
<ul>
<li>Vector也是基于数组实现的，是一个动态数组，其容量能自动增长。</li>
<li>Vector是JDK1.0引入了，它的很多实现方法都加入了同步语句，因此是线程安全的（其实也只是相对安全，有些时候还是要加入同步语句来保证线程的安全），可以用于多线程环境。</li>
<li>Vector没有丝线Serializable接口，因此它不支持序列化，实现了Cloneable接口，能被克隆，实现了RandomAccess接口，支持快速随机访问。<h2 id="Vector源码剖析-JDK1-7"><a href="#Vector源码剖析-JDK1-7" class="headerlink" title="Vector源码剖析(JDK1.7)"></a>Vector源码剖析(JDK1.7)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> java.util;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//内部通过Object数组存放元素</span></div><div class="line">    <span class="keyword">protected</span> Object[] elementData;</div><div class="line"></div><div class="line">    <span class="comment">//当前元素id</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</div><div class="line"></div><div class="line">    <span class="comment">//每次可增加容量大小</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</div><div class="line"></div><div class="line">    <span class="comment">//序列号</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2767605614048989439L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构造器 </div><div class="line">     * <span class="doctag">@param</span> initialCapacity    默认数组大小 </div><div class="line">     * <span class="doctag">@param</span> capacityIncrement   可增加容量大小</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="comment">//下标不合法抛异常</span></div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                               initialCapacity);</div><div class="line">        <span class="comment">// 新建一个数组，数组容量是initialCapacity</span></div><div class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">        <span class="comment">// 设置容量增长系数</span></div><div class="line">        <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 指定Vector容量大小的构造函数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(initialCapacity, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Vector构造函数。默认容量是10</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//指定集合的Vector构造函数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        elementData = c.toArray();</div><div class="line">        elementCount = elementData.length;</div><div class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">            elementData = Arrays.copyOf(elementData, elementCount, Object[].class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//下面方法都加了synchronized用来保证线程安全</span></div><div class="line">    </div><div class="line">    <span class="comment">// 将数组Vector的全部元素都拷贝到数组anArray中</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">copyInto</span><span class="params">(Object[] anArray)</span> </span>&#123;</div><div class="line">        System.arraycopy(elementData, <span class="number">0</span>, anArray, <span class="number">0</span>, elementCount);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//修剪elementData，保证其内部的元素都是有效元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">        <span class="keyword">if</span> (elementCount &lt; oldCapacity) &#123;</div><div class="line">            elementData = Arrays.copyOf(elementData, elementCount);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//增加容量</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (minCapacity &gt; <span class="number">0</span>) &#123;</div><div class="line">            modCount++;</div><div class="line">            ensureCapacityHelper(minCapacity);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//根据Vector长度和判断是否需要增加容量</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="comment">// overflow-conscious code</span></div><div class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">            grow(minCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//能够分配元素数量的最大值</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</div><div class="line"></div><div class="line">    <span class="comment">//扩充容量具体程序</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="comment">// overflow-conscious code</span></div><div class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</div><div class="line">                                         capacityIncrement : oldCapacity);</div><div class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">            newCapacity = minCapacity;</div><div class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">            newCapacity = hugeCapacity(minCapacity);</div><div class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</div><div class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">            Integer.MAX_VALUE :</div><div class="line">            MAX_ARRAY_SIZE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//可以看出：当不指定扩充容量的最小值时候，每次新增加的容量大小等于原始Vector的大小</span></div><div class="line">    <span class="comment">//设置大小，根据程序，使得newSize以后的元素清楚，只保留newsize个元素。当不足newsize个元素的时候，需要进行扩充</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> newSize)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">if</span> (newSize &gt; elementCount) &#123;</div><div class="line">            ensureCapacityHelper(newSize);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize ; i &lt; elementCount ; i++) &#123;</div><div class="line">                elementData[i] = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        elementCount = newSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取当前Vector的容量</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> elementData.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取当前Vector元素的个数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> elementCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断是否为空</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> elementCount == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取一个Enumeration类型的组件，可以顺序的访问Vector元素，</span></div><div class="line">    <span class="comment">//这个和迭代器很类似</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;E&gt; <span class="title">elements</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Enumeration&lt;E&gt;() &#123;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> count &lt; elementCount;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> E <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (count &lt; elementCount) &#123;</div><div class="line">                        <span class="keyword">return</span> elementData(count++);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Vector Enumeration"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断是否包含元素 o</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> indexOf(o, <span class="number">0</span>) &gt;= <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回元素 o 第一次出现的下标</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> indexOf(o, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//从index开始，查找元素o出现的下标   当不出现的时候返回-1 </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回元素o最后一次出现的下标</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lastIndexOf(o, elementCount-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//截止到index，返回元素o 最后一次出现的下标     不出现，返回-1</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt;= elementCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(index + <span class="string">" &gt;= "</span>+ elementCount);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回index位置元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">elementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt;= elementCount) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> + elementCount);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> elementData(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取第一个元素的值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">firstElement</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (elementCount == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> elementData(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取最后一个元素的值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">lastElement</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (elementCount == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> elementData(elementCount - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//更新index位置元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt;= elementCount) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> +</div><div class="line">                                                     elementCount);</div><div class="line">        &#125;</div><div class="line">        elementData[index] = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除index位置的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeElementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">if</span> (index &gt;= elementCount) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> +</div><div class="line">                                                     elementCount);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> j = elementCount - index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</div><div class="line">            System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, j);</div><div class="line">        &#125;</div><div class="line">        elementCount--;</div><div class="line">        elementData[elementCount] = <span class="keyword">null</span>; <span class="comment">/* to let gc do its work */</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//index位置插入元素 obj</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insertElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">if</span> (index &gt; elementCount) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index</div><div class="line">                                                     + <span class="string">" &gt; "</span> + elementCount);</div><div class="line">        &#125;</div><div class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</div><div class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, elementCount - index);</div><div class="line">        elementData[index] = obj;</div><div class="line">        elementCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//尾部插入元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</div><div class="line">        elementData[elementCount++] = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除元素obj</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeElement</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> i = indexOf(obj);</div><div class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</div><div class="line">            removeElementAt(i);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除所有元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeAllElements</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="comment">// Let gc do its work</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elementCount; i++)</div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        elementCount = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 克隆一个Vector</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                Vector&lt;E&gt; v = (Vector&lt;E&gt;) <span class="keyword">super</span>.clone();</div><div class="line">            v.elementData = Arrays.copyOf(elementData, elementCount);</div><div class="line">            v.modCount = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> v;</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Vector元素复制到数组</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Object[] toArray() &#123;</div><div class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, elementCount);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Vector中元素复制到指定数组</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class="line">        <span class="keyword">if</span> (a.length &lt; elementCount)</div><div class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, elementCount, a.getClass());</div><div class="line"></div><div class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, elementCount);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (a.length &gt; elementCount)</div><div class="line">            a[elementCount] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取index位置元素</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (E) elementData[index];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取index位置元素，可以抛出异常</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt;= elementCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> elementData(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//更新index位置元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt;= elementCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</div><div class="line"></div><div class="line">        E oldValue = elementData(index);</div><div class="line">        elementData[index] = element;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//尾部添加元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</div><div class="line">        elementData[elementCount++] = e;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> removeElement(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//index位置插入元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        insertElementAt(element, index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除index位置元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">if</span> (index &gt;= elementCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</div><div class="line">        E oldValue = elementData(index);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> numMoved = elementCount - index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--elementCount] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//清空</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        removeAllElements();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//Vector内是否包含集合c的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.containsAll(c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//集合c中元素添加到Vector中</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        Object[] a = c.toArray();</div><div class="line">        <span class="keyword">int</span> numNew = a.length;</div><div class="line">        ensureCapacityHelper(elementCount + numNew);</div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, elementCount, numNew);</div><div class="line">        elementCount += numNew;</div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除Vector集合中集合c的元素(差集)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.removeAll(c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除Vector集合中集合c以外的元素(交集)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.retainAll(c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//index位置插入集合c的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; elementCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</div><div class="line"></div><div class="line">        Object[] a = c.toArray();</div><div class="line">        <span class="keyword">int</span> numNew = a.length;</div><div class="line">        ensureCapacityHelper(elementCount + numNew);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> numMoved = elementCount - index;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</div><div class="line">                             numMoved);</div><div class="line"></div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</div><div class="line">        elementCount += numNew;</div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//重写equals方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.equals(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//hashcode方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//转化为字符串</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回区间内的元素，并保存在List中</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Collections.synchronizedList(<span class="keyword">super</span>.subList(fromIndex, toIndex),</div><div class="line">                                            <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除区间内的元素</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> numMoved = elementCount - toIndex;</div><div class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</div><div class="line">                         numMoved);</div><div class="line"></div><div class="line">        <span class="comment">// Let gc do its work</span></div><div class="line">        <span class="keyword">int</span> newElementCount = elementCount - (toIndex-fromIndex);</div><div class="line">        <span class="keyword">while</span> (elementCount != newElementCount)</div><div class="line">            elementData[--elementCount] = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//输出流</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></div><div class="line">            <span class="keyword">throws</span> java.io.IOException &#123;</div><div class="line">        <span class="keyword">final</span> java.io.ObjectOutputStream.PutField fields = s.putFields();</div><div class="line">        <span class="keyword">final</span> Object[] data;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            fields.put(<span class="string">"capacityIncrement"</span>, capacityIncrement);</div><div class="line">            fields.put(<span class="string">"elementCount"</span>, elementCount);</div><div class="line">            data = elementData.clone();</div><div class="line">        &#125;</div><div class="line">        fields.put(<span class="string">"elementData"</span>, data);</div><div class="line">        s.writeFields();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取从index开始的迭代器</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; elementCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取所有元素的迭代器</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取所有元素的迭代器</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//ListItr迭代器与Itr迭代器区别 </span></div><div class="line">    <span class="comment">//ListItr继承Itr，并增加了前驱遍历的方法，也可以添加元素 </span></div><div class="line">    <span class="comment">//Itr只能向后遍历 </span></div><div class="line">    </div><div class="line">    <span class="comment">//Itr</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></div><div class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></div><div class="line">        <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// Racy but within spec, since modifications are checked</span></div><div class="line">            <span class="comment">// within or after synchronization in next/previous</span></div><div class="line">            <span class="keyword">return</span> cursor != elementCount;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">                checkForComodification();</div><div class="line">                <span class="keyword">int</span> i = cursor;</div><div class="line">                <span class="keyword">if</span> (i &gt;= elementCount)</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">                cursor = i + <span class="number">1</span>;</div><div class="line">                <span class="keyword">return</span> elementData(lastRet = i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (lastRet == -<span class="number">1</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">                checkForComodification();</div><div class="line">                Vector.<span class="keyword">this</span>.remove(lastRet);</div><div class="line">                expectedModCount = modCount;</div><div class="line">            &#125;</div><div class="line">            cursor = lastRet;</div><div class="line">            lastRet = -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * An optimized version of AbstractList.ListItr</div><div class="line">     */</div><div class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        ListItr(<span class="keyword">int</span> index) &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            cursor = index;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor != <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">                checkForComodification();</div><div class="line">                <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">                cursor = i;</div><div class="line">                <span class="keyword">return</span> elementData(lastRet = i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (lastRet == -<span class="number">1</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">                checkForComodification();</div><div class="line">                Vector.<span class="keyword">this</span>.set(lastRet, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> i = cursor;</div><div class="line">            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">                checkForComodification();</div><div class="line">                Vector.<span class="keyword">this</span>.add(i, e);</div><div class="line">                expectedModCount = modCount;</div><div class="line">            &#125;</div><div class="line">            cursor = i + <span class="number">1</span>;</div><div class="line">            lastRet = -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="几点总结-2"><a href="#几点总结-2" class="headerlink" title="几点总结"></a>几点总结</h2><p>Vector的源码实现总体与ArrayList类似，关于Vector的源码，给出如下几点总结：</p>
<ol>
<li>Vector有四个不同的构造方法。无参构造方法的容量为默认值10，仅包含容量的构造方法则将容量增长量（从源码中可以看出容量增长量的作用，第二点也会对容量增长量详细说）明置为0。</li>
<li>注意扩充容量的方法ensureCapacityHelper。与ArrayList相同，Vector在每次增加元素（可能是1个，也可能是一组）时，都要调用该方法来确保足够的容量。当容量不足以容纳当前的元素个数时，就先看构造方法中传入的容量增长量参数CapacityIncrement是否为0，如果不为0，就设置新的容量为就容量加上容量增长量，如果为0，就设置新的容量为旧的容量的2倍，如果设置后的新容量还不够，则直接新容量设置为传入的参数（也就是所需的容量），而后同样用Arrays.copyof()方法将元素拷贝到新的数组。</li>
<li>很多方法都加入了synchronized同步语句，来保证线程安全。</li>
<li>同样在查找给定元素索引值等的方法中，源码都将该元素的值分为null和不为null两种情况处理，Vector中也允许元素为null。</li>
<li>其他很多地方都与ArrayList实现大同小异，Vector现在已经基本不再使用。</li>
</ol>
<h1 id="HashMap源码剖析"><a href="#HashMap源码剖析" class="headerlink" title="HashMap源码剖析"></a>HashMap源码剖析</h1><h2 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h2><ul>
<li>HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。</li>
<li>HashMap是非线程安全的，只是用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。</li>
<li>HashMap 实现了Serializable接口，因此它支持序列化，实现了Cloneable接口，能被克隆。</li>
</ul>
<h2 id="HashMap源码剖析-JDK1-7"><a href="#HashMap源码剖析-JDK1-7" class="headerlink" title="HashMap源码剖析(JDK1.7)"></a>HashMap源码剖析(JDK1.7)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> java.util;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="comment">//继承了AbstractMap抽象类，实现了Map接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">//默认初始化化容量,即16</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></div><div class="line"></div><div class="line">    <span class="comment">//最大容量，即2的30次方</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"></div><div class="line">    <span class="comment">//默认装载因子</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"></div><div class="line">    <span class="comment">//HashMap内部的存储结构是一个数组，此处数组为空，</span></div><div class="line">    <span class="comment">//即没有初始化之前的状态</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">//空的存储实体</span></div><div class="line">    <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</div><div class="line"></div><div class="line">    <span class="comment">//HashMap的元素数目</span></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">    <span class="comment">//HashMap下次扩容时的阀值</span></div><div class="line">    <span class="keyword">int</span> threshold;</div><div class="line"></div><div class="line">    <span class="comment">//HashMap的装载因子</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</div><div class="line"></div><div class="line">    <span class="comment">//修改次数</span></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</div><div class="line"></div><div class="line">    <span class="comment">//默认的threshold值</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE;</div><div class="line"></div><div class="line">    <span class="comment">//通过虚拟机配置来修改threshold值</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            String altThreshold = java.security.AccessController.doPrivileged(</div><div class="line">                <span class="keyword">new</span> sun.security.action.GetPropertyAction(</div><div class="line">                    <span class="string">"jdk.map.althashing.threshold"</span>));<span class="comment">//读取配置值</span></div><div class="line"></div><div class="line">            <span class="keyword">int</span> threshold;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                threshold = (<span class="keyword">null</span> != altThreshold)<span class="comment">//修改threshold值</span></div><div class="line">                        ? Integer.parseInt(altThreshold)</div><div class="line">                        : ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;</div><div class="line"></div><div class="line">                <span class="comment">// disable alternative hashing if -1</span></div><div class="line">                <span class="keyword">if</span> (threshold == -<span class="number">1</span>) &#123;</div><div class="line">                    threshold = Integer.MAX_VALUE;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (threshold &lt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"value must be positive integer."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span>(IllegalArgumentException failed) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Illegal value for 'jdk.map.althashing.threshold'"</span>, failed);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ALTERNATIVE_HASHING_THRESHOLD = threshold;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//计算Hash值时的key</span></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> hashSeed = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//通过初始容量和状态因子构造HashMap </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                               initialCapacity);</div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">            initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                               loadFactor);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">        threshold = initialCapacity;</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//通过扩容因子构造HashMap,容量去默认值，即16 </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//装载因子取0.75，容量取16，构造HashMap</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//通过其他Map来初始化HashMap,容量通过其他Map的size来计算，装载因子取0.75</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(Math.max((<span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,</div><div class="line">                      DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);</div><div class="line">        inflateTable(threshold);<span class="comment">//初始化HashMap底层的数组结构</span></div><div class="line"></div><div class="line">        putAllForCreate(m);<span class="comment">//添加m中的元素</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//选择合适的容量值，容量值取大于等于最接近number的2的冪数</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">roundUpToPowerOf2</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">        <span class="comment">// assert number &gt;= 0 : "number must be non-negative";</span></div><div class="line">        <span class="keyword">return</span> number &gt;= MAXIMUM_CAPACITY</div><div class="line">                ? MAXIMUM_CAPACITY</div><div class="line">                : (number &gt; <span class="number">1</span>) ? Integer.highestOneBit((number - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) : <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//初始化HashMap的底层数据结构</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inflateTable</span><span class="params">(<span class="keyword">int</span> toSize)</span> </span>&#123;</div><div class="line">        <span class="comment">//选取合适的容量值</span></div><div class="line">        <span class="keyword">int</span> capacity = roundUpToPowerOf2(toSize);</div><div class="line">        <span class="comment">//选取合适的threshold（扩容阀值）</span></div><div class="line">        threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</div><div class="line">        table = <span class="keyword">new</span> Entry[capacity];<span class="comment">//初始化底层数据结构</span></div><div class="line">        initHashSeedAsNeeded(capacity);<span class="comment">//选择合适的Hash因子</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//目前为空</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//选择合适的Hash因子，这里和虚拟机的配置有关</span></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">initHashSeedAsNeeded</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> currentAltHashing = hashSeed != <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> useAltHashing = sun.misc.VM.isBooted() &amp;&amp;</div><div class="line">                (capacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</div><div class="line">        <span class="keyword">boolean</span> switching = currentAltHashing ^ useAltHashing;</div><div class="line">        <span class="keyword">if</span> (switching) &#123;</div><div class="line">            hashSeed = useAltHashing</div><div class="line">                ? sun.misc.Hashing.randomHashSeed(<span class="keyword">this</span>)</div><div class="line">                : <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> switching;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//计算key的Hash值，这里针对String类的Key优化了Hash函数</span></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> h = hashSeed;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</div><div class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        h ^= k.hashCode();</div><div class="line"></div><div class="line">        <span class="comment">// This function ensures that hashCodes that differ only by</span></div><div class="line">        <span class="comment">// constant multiples at each bit position have a bounded</span></div><div class="line">        <span class="comment">// number of collisions (approximately 8 at default load factor).</span></div><div class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//根据Hash值和Hash表的大小选择合适的Hash桶</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">        <span class="comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span></div><div class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回HashMap的元素个数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断是否为空</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取key值为key的元素值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        <span class="comment">//如果Key值为空，则获取对应的值，这里也可以看到，</span></div><div class="line">        <span class="comment">//HashMap允许null的key，其内部针对null的key有特殊的逻辑</span></div><div class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> getForNullKey();</div><div class="line">        Entry&lt;K,V&gt; entry = getEntry(key);<span class="comment">//获取实体</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取key为null的实体</span></div><div class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            <span class="keyword">if</span> (e.key == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> e.value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断是否有键为key的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取键值为key的元素</span></div><div class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//获取key的Hash值</span></div><div class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</div><div class="line">        <span class="comment">//根据key和表的长度，定位到Hash桶</span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class="line">             e != <span class="keyword">null</span>;</div><div class="line">             e = e.next) &#123;</div><div class="line">            Object k;</div><div class="line">            <span class="comment">//判断Hash值和对应的key，合适则返回值</span></div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                <span class="keyword">return</span> e;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;<span class="comment">//如果底层表为空，则初始化</span></div><div class="line">            inflateTable(threshold);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)<span class="comment">//如果key为空，则执行空的逻辑</span></div><div class="line">            <span class="keyword">return</span> putForNullKey(value);</div><div class="line">        <span class="keyword">int</span> hash = hash(key);<span class="comment">//获取key的Hash值</span></div><div class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//定位Hash桶</span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            Object k;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class="line">                V oldValue = e.value;</div><div class="line">                e.value = value;</div><div class="line">                <span class="comment">//调用value的回调函数，其实这个函数也为空实现</span></div><div class="line">                e.recordAccess(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">return</span> oldValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        modCount++;</div><div class="line">        addEntry(hash, key, value, i);<span class="comment">//添加到对应Hash桶的链接表中</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加key为空的元素，key为null的元素添加到第0号Hash桶中</span></div><div class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</div><div class="line">                V oldValue = e.value;</div><div class="line">                e.value = value;</div><div class="line">                e.recordAccess(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">return</span> oldValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        modCount++;</div><div class="line">        addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);<span class="comment">//执行链表插入</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加元素</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putForCreate</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> hash = <span class="keyword">null</span> == key ? <span class="number">0</span> : hash(key);<span class="comment">//计算key的Hash值</span></div><div class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//定位Hash桶</span></div><div class="line"></div><div class="line">        <span class="comment">//遍历第i号Hash桶</span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            Object k;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line">                e.value = value;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//创建元素实体,这里会添加到第i号Hash桶中</span></div><div class="line">        createEntry(hash, key, value, i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//添加m中的元素到HashMap中</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putAllForCreate</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet())</div><div class="line">            putForCreate(e.getKey(), e.getValue());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//按新的容量扩容Hash表</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</div><div class="line">        Entry[] oldTable = table;</div><div class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length;</div><div class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class="line">            threshold = Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</div><div class="line">        transfer(newTable, initHashSeedAsNeeded(newCapacity));</div><div class="line">        table = newTable;</div><div class="line">        threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//将老的表中的数据拷贝到新的结构中</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> newCapacity = newTable.length;</div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</div><div class="line">                Entry&lt;K,V&gt; next = e.next;</div><div class="line">                <span class="keyword">if</span> (rehash) &#123;<span class="comment">//如果是重新Hash，则需要重新计算hash值</span></div><div class="line">                    e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);<span class="comment">//定位Hash桶</span></div><div class="line">                <span class="comment">//元素连接到桶中,这里相当于单链表的插入</span></div><div class="line">                e.next = newTable[i];</div><div class="line">                newTable[i] = e;</div><div class="line">                e = next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> numKeysToBeAdded = m.size();</div><div class="line">        <span class="keyword">if</span> (numKeysToBeAdded == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;<span class="comment">//底层数组为空</span></div><div class="line">            <span class="comment">//执行初始化</span></div><div class="line">            inflateTable((<span class="keyword">int</span>) Math.max(numKeysToBeAdded * loadFactor, threshold));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//按m的size执行HashMap的扩容</span></div><div class="line">        <span class="keyword">if</span> (numKeysToBeAdded &gt; threshold) &#123;</div><div class="line">            <span class="keyword">int</span> targetCapacity = (<span class="keyword">int</span>)(numKeysToBeAdded / loadFactor + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (targetCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">                targetCapacity = MAXIMUM_CAPACITY;</div><div class="line">            <span class="keyword">int</span> newCapacity = table.length;</div><div class="line">            <span class="keyword">while</span> (newCapacity &lt; targetCapacity)</div><div class="line">                newCapacity &lt;&lt;= <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (newCapacity &gt; table.length)</div><div class="line">                resize(newCapacity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet())</div><div class="line">            put(e.getKey(), e.getValue());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除元素，元素的键值为key</span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        Entry&lt;K,V&gt; e = removeEntryForKey(key);</div><div class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     <span class="comment">//删除元素，元素的键值为key</span></div><div class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeEntryForKey</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);<span class="comment">//计算Hash值</span></div><div class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//定位Hash桶</span></div><div class="line">        Entry&lt;K,V&gt; prev = table[i];</div><div class="line">        Entry&lt;K,V&gt; e = prev;<span class="comment">//保存前面一个指针值</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            Entry&lt;K,V&gt; next = e.next;</div><div class="line">            Object k;</div><div class="line">            <span class="comment">//在Hash桶中定位元素</span></div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line">                modCount++;</div><div class="line">                size--;</div><div class="line">                <span class="keyword">if</span> (prev == e)<span class="comment">//是否是第一个元素</span></div><div class="line">                    table[i] = next;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    prev.next = next;<span class="comment">//执行的是单链表的删除</span></div><div class="line">                e.recordRemoval(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">return</span> e;</div><div class="line">            &#125;</div><div class="line">            prev = e;<span class="comment">//单链表移动指针</span></div><div class="line">            e = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除一个Entry实体，这里通过o的key查找到元素，</span></div><div class="line">    <span class="comment">//之后删除，和上面的实现类似</span></div><div class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeMapping</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span> || !(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</div><div class="line">        Object key = entry.getKey();</div><div class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</div><div class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</div><div class="line">        Entry&lt;K,V&gt; prev = table[i];</div><div class="line">        Entry&lt;K,V&gt; e = prev;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            Entry&lt;K,V&gt; next = e.next;</div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; e.equals(entry)) &#123;</div><div class="line">                modCount++;</div><div class="line">                size--;</div><div class="line">                <span class="keyword">if</span> (prev == e)</div><div class="line">                    table[i] = next;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    prev.next = next;</div><div class="line">                e.recordRemoval(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">return</span> e;</div><div class="line">            &#125;</div><div class="line">            prev = e;</div><div class="line">            e = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//清空Hash表</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        Arrays.fill(table, <span class="keyword">null</span>);</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断是否包含值为value的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> containsNullValue();</div><div class="line"></div><div class="line">        Entry[] tab = table;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</div><div class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</div><div class="line">                <span class="keyword">if</span> (value.equals(e.value))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//执行null的逻辑</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">containsNullValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        Entry[] tab = table;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</div><div class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</div><div class="line">                <span class="keyword">if</span> (e.value == <span class="keyword">null</span>)<span class="comment">//这里直接判断引用</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//浅克隆HashMap</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        HashMap&lt;K,V&gt; result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result = (HashMap&lt;K,V&gt;)<span class="keyword">super</span>.clone();</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            <span class="comment">// assert false;</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (result.table != EMPTY_TABLE) &#123;</div><div class="line">            result.inflateTable(Math.min(</div><div class="line">                (<span class="keyword">int</span>) Math.min(</div><div class="line">                    size * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</div><div class="line">                    <span class="comment">// we have limits...</span></div><div class="line">                    HashMap.MAXIMUM_CAPACITY),</div><div class="line">               table.length));</div><div class="line">        &#125;</div><div class="line">        result.entrySet = <span class="keyword">null</span>;</div><div class="line">        result.modCount = <span class="number">0</span>;</div><div class="line">        result.size = <span class="number">0</span>;</div><div class="line">        result.init();</div><div class="line">        result.putAllForCreate(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//实现Map.Entry接口，这是HashMap内部key和value的一个抽象</span></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">final</span> K key;</div><div class="line">        V value;</div><div class="line">        Entry&lt;K,V&gt; next;</div><div class="line">        <span class="keyword">int</span> hash;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Creates new entry.</div><div class="line">         */</div><div class="line">        Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</div><div class="line">            value = v;</div><div class="line">            next = n;</div><div class="line">            key = k;</div><div class="line">            hash = h;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> key;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</div><div class="line">            V oldValue = value;</div><div class="line">            value = newValue;</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            Map.Entry e = (Map.Entry)o;</div><div class="line">            Object k1 = getKey();</div><div class="line">            Object k2 = e.getKey();</div><div class="line">            <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</div><div class="line">                Object v1 = getValue();</div><div class="line">                Object v2 = e.getValue();</div><div class="line">                <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//空实现</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//空实现</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加Entry</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断是否需要扩容</span></div><div class="line">        <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</div><div class="line">            resize(<span class="number">2</span> * table.length);<span class="comment">//按2倍扩容</span></div><div class="line">            hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;<span class="comment">//计算hash值</span></div><div class="line">            bucketIndex = indexFor(hash, table.length);<span class="comment">//定位Hash桶</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//创建元素</span></div><div class="line">        createEntry(hash, key, value, bucketIndex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//创建元素</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</div><div class="line">        size++;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//继承了Iterator接口，提供迭代器实现</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        Entry&lt;K,V&gt; next;        <span class="comment">//下一个实体</span></div><div class="line">        <span class="keyword">int</span> expectedModCount;   <span class="comment">//迭代器修改次数</span></div><div class="line">        <span class="keyword">int</span> index;              <span class="comment">//Hash桶的索引号</span></div><div class="line">        Entry&lt;K,V&gt; current;     <span class="comment">//当前实体</span></div><div class="line"></div><div class="line">        HashIterator() &#123;</div><div class="line">            expectedModCount = modCount;</div><div class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></div><div class="line">                Entry[] t = table;</div><div class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</div><div class="line">                    ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            Entry&lt;K,V&gt; e = next;</div><div class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                Entry[] t = table;</div><div class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</div><div class="line">                    ;</div><div class="line">            &#125;</div><div class="line">            current = e;</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (current == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            Object k = current.key;</div><div class="line">            current = <span class="keyword">null</span>;</div><div class="line">            HashMap.<span class="keyword">this</span>.removeEntryForKey(k);</div><div class="line">            expectedModCount = modCount;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> nextEntry().value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> nextEntry().getKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//HashMap Entry迭代器</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</div><div class="line">        <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> nextEntry();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回键集迭代器</span></div><div class="line">    <span class="function">Iterator&lt;K&gt; <span class="title">newKeyIterator</span><span class="params">()</span>   </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回值集迭代器</span></div><div class="line">    <span class="function">Iterator&lt;V&gt; <span class="title">newValueIterator</span><span class="params">()</span>   </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回Entry迭代器</span></div><div class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//视图结合，HashMap内部Entry的集合</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">//返回键集</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;K&gt; ks = keySet;</div><div class="line">        <span class="keyword">return</span> (ks != <span class="keyword">null</span> ? ks : (keySet = <span class="keyword">new</span> KeySet()));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//键集合的实现，实现了AbstractSet抽象类，调用了父类的方法</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> newKeyIterator();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> size;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> containsKey(o);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> HashMap.<span class="keyword">this</span>.removeEntryForKey(o) != <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">            HashMap.<span class="keyword">this</span>.clear();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回值集合</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</div><div class="line">        Collection&lt;V&gt; vs = values;</div><div class="line">        <span class="keyword">return</span> (vs != <span class="keyword">null</span> ? vs : (values = <span class="keyword">new</span> Values()));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//值集合的实现，实现了AbstractCollection抽象类，</span></div><div class="line">    <span class="comment">//调用了父类的方法来实现</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> newValueIterator();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> size;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> containsValue(o);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">            HashMap.<span class="keyword">this</span>.clear();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//entry集合</span></div><div class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</div><div class="line">        <span class="keyword">return</span> entrySet0();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;</div><div class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;</div><div class="line">        <span class="keyword">return</span> es != <span class="keyword">null</span> ? es : (entrySet = <span class="keyword">new</span> EntrySet());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//entry集合的实现，继承了AbstractSet抽象类</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</div><div class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</div><div class="line">            <span class="keyword">return</span> newEntryIterator();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            Map.Entry&lt;K,V&gt; e = (Map.Entry&lt;K,V&gt;) o;</div><div class="line">            Entry&lt;K,V&gt; candidate = getEntry(e.getKey());</div><div class="line">            <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> removeMapping(o) != <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> size;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">            HashMap.<span class="keyword">this</span>.clear();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//序列化的实现</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></div><div class="line">        <span class="keyword">throws</span> IOException</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></div><div class="line">        s.defaultWriteObject();</div><div class="line"></div><div class="line">        <span class="comment">// Write out number of buckets</span></div><div class="line">        <span class="keyword">if</span> (table==EMPTY_TABLE) &#123;</div><div class="line">            s.writeInt(roundUpToPowerOf2(threshold));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">           s.writeInt(table.length);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Write out size (number of Mappings)</span></div><div class="line">        s.writeInt(size);</div><div class="line"></div><div class="line">        <span class="comment">// Write out keys and values (alternating)</span></div><div class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(Map.Entry&lt;K,V&gt; e : entrySet0()) &#123;</div><div class="line">                s.writeObject(e.getKey());</div><div class="line">                s.writeObject(e.getValue());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</div><div class="line"></div><div class="line">    <span class="comment">//反序列化的实现</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></div><div class="line">         <span class="keyword">throws</span> IOException, ClassNotFoundException</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></div><div class="line">        s.defaultReadObject();</div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                               loadFactor);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// set other fields that need values</span></div><div class="line">        table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</div><div class="line"></div><div class="line">        <span class="comment">// Read in number of buckets</span></div><div class="line">        s.readInt(); <span class="comment">// ignored.</span></div><div class="line"></div><div class="line">        <span class="comment">// Read number of mappings</span></div><div class="line">        <span class="keyword">int</span> mappings = s.readInt();</div><div class="line">        <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal mappings count: "</span> +</div><div class="line">                                               mappings);</div><div class="line"></div><div class="line">        <span class="comment">// capacity chosen by number of mappings and desired load (if &gt;= 0.25)</span></div><div class="line">        <span class="keyword">int</span> capacity = (<span class="keyword">int</span>) Math.min(</div><div class="line">                    mappings * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</div><div class="line">                    <span class="comment">// we have limits...</span></div><div class="line">                    HashMap.MAXIMUM_CAPACITY);</div><div class="line"></div><div class="line">        <span class="comment">// allocate the bucket array;</span></div><div class="line">        <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</div><div class="line">            inflateTable(capacity);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            threshold = capacity;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        init();  <span class="comment">// Give subclass a chance to do its thing.</span></div><div class="line"></div><div class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</div><div class="line">            K key = (K) s.readObject();</div><div class="line">            V value = (V) s.readObject();</div><div class="line">            putForCreate(key, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// These methods are used when serializing HashSets</span></div><div class="line">    <span class="function"><span class="keyword">int</span>   <span class="title">capacity</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> table.length; &#125;</div><div class="line">    <span class="function"><span class="keyword">float</span> <span class="title">loadFactor</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> loadFactor;   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="几点总结-3"><a href="#几点总结-3" class="headerlink" title="几点总结"></a>几点总结</h2><p>关于HashMap的源码，给出几点比较重要的总结：</p>
<ol>
<li>首先要清楚HashMap的存储结构，如下图所示：<br> <img src="/uploads/list2.jpg" alt=""><br>图中，紫色部分即代表哈希表，也称为哈希数组，数组的每个元素都是一个单链表的头节点，链表是用来解决冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中。</li>
<li><p>首先看链表中节点的数据结构：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Entry是单向链表。    </span></div><div class="line"><span class="comment">// 它是 “HashMap链式存储法”对应的链表。    </span></div><div class="line"><span class="comment">// 它实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数    </span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;    </div><div class="line">    <span class="keyword">final</span> K key;    </div><div class="line">    V value;    </div><div class="line">    <span class="comment">// 指向下一个节点    </span></div><div class="line">    Entry&lt;K,V&gt; next;    </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;    </div><div class="line">  </div><div class="line">    <span class="comment">// 构造函数。    </span></div><div class="line">    <span class="comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"    </span></div><div class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;    </div><div class="line">        value = v;    </div><div class="line">        next = n;    </div><div class="line">        key = k;    </div><div class="line">        hash = h;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> key;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> value;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;    </div><div class="line">        V oldValue = value;    </div><div class="line">        value = newValue;    </div><div class="line">        <span class="keyword">return</span> oldValue;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="comment">// 判断两个Entry是否相等    </span></div><div class="line">    <span class="comment">// 若两个Entry的“key”和“value”都相等，则返回true。    </span></div><div class="line">    <span class="comment">// 否则，返回false    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        Map.Entry e = (Map.Entry)o;    </div><div class="line">        Object k1 = getKey();    </div><div class="line">        Object k2 = e.getKey();    </div><div class="line">        <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;    </div><div class="line">            Object v1 = getValue();    </div><div class="line">            Object v2 = e.getValue();    </div><div class="line">            <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="comment">// 实现hashCode()    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> (key==<span class="keyword">null</span>   ? <span class="number">0</span> : key.hashCode()) ^    </div><div class="line">               (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="comment">// 当向HashMap中添加元素时，绘调用recordAccess()。    </span></div><div class="line">    <span class="comment">// 这里不做任何处理    </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。    </span></div><div class="line">    <span class="comment">// 这里不做任何处理    </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 它的结构元素除了key、value、hash外，还有next，next指向下一个节点。另外，这里覆写了equals和hashCode方法来保证键值对的独一无二。</p>
</li>
<li>HashMap共有四个构造方法。构造方法中提到了两个很重要的参数：初始容量和加载因子。这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（从构造函数中可以看出，如果不指明，则默认为16），加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 resize 操作（即扩容）。<br> 下面说下加载因子，如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），对空间造成严重浪费。如果我们在构造方法中不指定，则系统默认加载因子为0.75，这是一个比较理想的值，一般情况下我们是无需修改的。<br> 另外，无论我们指定的容量为多少，构造方法都会将实际容量设为不小于指定容量的2的次方的一个数，且最大值不能超过2的30次方</li>
<li>HashMap中key和value都允许为null。</li>
<li>要重点分析下HashMap中用的最多的两个方法put和get。先从比较简单的get方法着手，源码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取key对应的value    </span></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;    </div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)    </div><div class="line">        <span class="keyword">return</span> getForNullKey();    </div><div class="line">    <span class="comment">// 获取key的hash值    </span></div><div class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());    </div><div class="line">    <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素    </span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];    </div><div class="line">         e != <span class="keyword">null</span>;    </div><div class="line">         e = e.next) &#123;    </div><div class="line">        Object k;    </div><div class="line">/判断key是否相同  </div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))    </div><div class="line">            <span class="keyword">return</span> e.value;    </div><div class="line">    &#125;  </div><div class="line">没找到则返回<span class="keyword">null</span>  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">&#125;    </div><div class="line">  </div><div class="line"><span class="comment">// 获取“key为null”的元素的值    </span></div><div class="line"><span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！    </span></div><div class="line"><span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;    </div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;    </div><div class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>)    </div><div class="line">            <span class="keyword">return</span> e.value;    </div><div class="line">    &#125;    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>首先，如果key为null，则直接从哈希表的第一个位置table[0]对应的链表上查找。记住，key为null的键值对永远都放在以table[0]为头结点的链表中，当然不一定是存放在头结点table[0]中。<br>    如果key不为null，则先求的key的hash值，根据hash值找到在table中的索引，在该索引对应的单链表中查找是否有键值对的key与目标key相等，有就返回对应的value，没有则返回null。<br>    put方法稍微复杂些，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 将“key-value”添加到HashMap中    </span></div><div class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;    </div><div class="line">      <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。    </span></div><div class="line">      <span class="keyword">if</span> (key == <span class="keyword">null</span>)    </div><div class="line">          <span class="keyword">return</span> putForNullKey(value);    </div><div class="line">      <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。    </span></div><div class="line">      <span class="keyword">int</span> hash = hash(key.hashCode());    </div><div class="line">      <span class="keyword">int</span> i = indexFor(hash, table.length);    </div><div class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;    </div><div class="line">          Object k;    </div><div class="line">          <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！    </span></div><div class="line">          <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;    </div><div class="line">              V oldValue = e.value;    </div><div class="line">              e.value = value;    </div><div class="line">              e.recordAccess(<span class="keyword">this</span>);    </div><div class="line">              <span class="keyword">return</span> oldValue;    </div><div class="line">          &#125;    </div><div class="line">      &#125;    </div><div class="line">  </div><div class="line">      <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中    </span></div><div class="line">      modCount++;  </div><div class="line"><span class="comment">//将key-value添加到table[i]处  </span></div><div class="line">      addEntry(hash, key, value, i);    </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>如果key为null，则将其添加到table[0]对应的链表中，putForNullKey的源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// putForNullKey()的作用是将“key为null”键值对添加到table[0]位置    </span></div><div class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;    </div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;    </div><div class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;    </div><div class="line">            V oldValue = e.value;    </div><div class="line">            e.value = value;    </div><div class="line">            e.recordAccess(<span class="keyword">this</span>);    </div><div class="line">            <span class="keyword">return</span> oldValue;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">    <span class="comment">// 如果没有存在key为null的键值对，则直接题阿见到table[0]处!    </span></div><div class="line">    modCount++;    </div><div class="line">    addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果key不为null，则同样先求出key的hash值，根据hash值得出在table中的索引，而后遍历对应的单链表，如果单链表中存在与目标key相等的键值对，则将新的value覆盖旧的value，比将旧的value返回，如果找不到与目标key相等的键值对，或者该单链表为空，则将该键值对插入到改单链表的头结点位置（每次新插入的节点都是放在头结点的位置），该操作是有addEntry方法实现的，它的源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。    </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;    </div><div class="line">    <span class="comment">// 保存“bucketIndex”位置的值到“e”中    </span></div><div class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];    </div><div class="line">    <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，    </span></div><div class="line">    <span class="comment">// 设置“e”为“新Entry的下一个节点”    </span></div><div class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </div><div class="line">    <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小    </span></div><div class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)    </div><div class="line">        resize(<span class="number">2</span> * table.length);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意这里倒数第三行的构造方法，将key-value键值对赋给table[bucketIndex]，并将其next指向元素e，这便将key-value放到了头结点中，并将之前的头结点接在了它的后面。该方法也说明，每次put键值对的时候，总是将新的该键值对放在table[bucketIndex]处（即头结点处）。<br>    两外注意最后两行代码，每次加入键值对时，都要判断当前已用的槽的数目是否大于等于阀值（容量*加载因子），如果大于等于，则进行扩容，将容量扩为原来容量的2倍。</p>
<ol>
<li>关于扩容。上面我们看到了扩容的方法，resize方法，它的源码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 重新调整HashMap的大小，newCapacity是调整后的单位    </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;    </div><div class="line">    Entry[] oldTable = table;    </div><div class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;    </div><div class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;    </div><div class="line">        threshold = Integer.MAX_VALUE;    </div><div class="line">        <span class="keyword">return</span>;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，    </span></div><div class="line">    <span class="comment">// 然后，将“新HashMap”赋值给“旧HashMap”。    </span></div><div class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];    </div><div class="line">    transfer(newTable);    </div><div class="line">    table = newTable;    </div><div class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>很明显，是新建了一个HashMap的底层数组，而后调用transfer方法，将就HashMap的全部元素添加到新的HashMap中（要重新计算元素在新的数组中的索引位置）。transfer方法的源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将HashMap中的全部元素都添加到newTable中    </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;    </div><div class="line">    Entry[] src = table;    </div><div class="line">    <span class="keyword">int</span> newCapacity = newTable.length;    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;    </div><div class="line">        Entry&lt;K,V&gt; e = src[j];    </div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;    </div><div class="line">            src[j] = <span class="keyword">null</span>;    </div><div class="line">            <span class="keyword">do</span> &#123;    </div><div class="line">                Entry&lt;K,V&gt; next = e.next;    </div><div class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);    </div><div class="line">                e.next = newTable[i];    </div><div class="line">                newTable[i] = e;    </div><div class="line">                e = next;    </div><div class="line">            &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很明显，扩容是一个相当耗时的操作，因为它需要重新计算这些元素在新的数组中的位置并进行复制处理。因此，我们在用HashMap的时，最好能提前预估下HashMap中元素的个数，这样有助于提高HashMap的性能。</p>
<ol>
<li>注意containsKey方法和containsValue方法。前者直接可以通过key的哈希值将搜索范围定位到指定索引对应的链表，而后者要对哈希数组的每个链表进行搜索。</li>
<li>我们重点来分析下求hash值和索引值的方法，这两个方法便是HashMap设计的最为核心的部分，二者结合能保证哈希表中的元素尽可能均匀地散列。<br> 计算哈希值的方法如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;  </div><div class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);  </div><div class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>它只是一个数学公式，IDK这样设计对hash值的计算，自然有它的好处，至于为什么这样设计，我们这里不去追究，只要明白一点，用的位的操作使hash值的计算效率很高。<br>    由hash值找到对应索引的方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这个我们要重点说下，我们一般对哈希表的散列很自然地会想到用hash值对length取模（即除法散列法），Hashtable中也是这样实现的，这种方法基本能保证元素在哈希表中散列的比较均匀，但取模会用到除法运算，效率很低，HashMap中则通过h&amp;(length-1)的方法来代替取模，同样实现了均匀的散列，但效率要高很多，这也是HashMap对Hashtable的一个改进。<br>    接下来，我们分析下为什么哈希表的容量一定要是2的整数次幂。首先，length为2的整数次幂的话，h&amp;(length-1)就相当于对length取模，这样便保证了散列的均匀，同时也提升了效率；其次，length为2的整数次幂的话，为偶数，这样length-1为奇数，奇数的最后一位是1，这样便保证了h&amp;(length-1)的最后一位可能为0，也可能为1（这取决于h的值），即与后的结果可能为偶数，也可能为奇数，这样便可以保证散列的均匀性，而如果length为奇数的话，很明显length-1为偶数，它的最后一位是0，这样h&amp;(length-1)的最后一位肯定为0，即只能为偶数，这样任何hash值都只会被散列到数组的偶数下标位置上，这便浪费了近一半的空间，因此，length取2的整数次幂，是为了使不同hash值发生碰撞的概率较小，这样就能使元素在哈希表中均匀地散列。</p>
<h1 id="Hashtable源码剖析"><a href="#Hashtable源码剖析" class="headerlink" title="Hashtable源码剖析"></a>Hashtable源码剖析</h1><h2 id="Hashtable简介"><a href="#Hashtable简介" class="headerlink" title="Hashtable简介"></a>Hashtable简介</h2><ul>
<li>Hashtable同样是基于哈希表实现的，同样每个元素是一个key-value对，其内部也是通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。</li>
<li>Hashtable也是JDK1.0引入的类，是线程安全的，能用于多线程环境中。</li>
<li>Hashtable同样实现了Serializable接口，它支持序列化，实现了Cloneable接口，能被克隆。</li>
</ul>
<h2 id="HashTable源码剖析-JDK1-7"><a href="#HashTable源码剖析-JDK1-7" class="headerlink" title="HashTable源码剖析(JDK1.7)"></a>HashTable源码剖析(JDK1.7)</h2><p>Hashtable的源码的很多实现都与HashMap差不多，源码如下（加入了比较详细的注释）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.util;    </div><div class="line"><span class="keyword">import</span> java.io.*;    </div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;    </span></div><div class="line">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;    </div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;    </div><div class="line">   </div><div class="line">    <span class="comment">// 保存key-value的数组。    </span></div><div class="line">    <span class="comment">// Hashtable同样采用单链表解决冲突，每一个Entry本质上是一个单向链表    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry[] table;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable中键值对的数量    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> count;    </div><div class="line">   </div><div class="line">    <span class="comment">// 阈值，用于判断是否需要调整Hashtable的容量（threshold = 容量*加载因子）    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold;    </div><div class="line">   </div><div class="line">    <span class="comment">// 加载因子    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> loadFactor;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable被改变的次数，用于fail-fast机制的实现    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// 序列版本号    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1421746759512286392L</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// 指定“容量大小”和“加载因子”的构造函数    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;    </div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+    </div><div class="line">                                               initialCapacity);    </div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Load: "</span>+loadFactor);    </div><div class="line">   </div><div class="line">        <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)    </div><div class="line">            initialCapacity = <span class="number">1</span>;    </div><div class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;    </div><div class="line">        table = <span class="keyword">new</span> Entry[initialCapacity];    </div><div class="line">        threshold = (<span class="keyword">int</span>)(initialCapacity * loadFactor);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 指定“容量大小”的构造函数    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;    </div><div class="line">        <span class="keyword">this</span>(initialCapacity, <span class="number">0.75f</span>);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 默认构造函数。    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="comment">// 默认构造函数，指定的容量大小是11；加载因子是0.75    </span></div><div class="line">        <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 包含“子Map”的构造函数    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;    </div><div class="line">        <span class="keyword">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);    </div><div class="line">        <span class="comment">// 将“子Map”的全部元素都添加到Hashtable中    </span></div><div class="line">        putAll(t);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> count;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“所有key”的枚举对象    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;K&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.&lt;K&gt;getEnumeration(KEYS);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“所有value”的枚举对象    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;V&gt; <span class="title">elements</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.&lt;V&gt;getEnumeration(VALUES);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 判断Hashtable是否包含“值(value)”    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object value)</span> </span>&#123;    </div><div class="line">        <span class="comment">//注意，Hashtable中的value不能是null，    </span></div><div class="line">        <span class="comment">// 若是null的话，抛出异常!    </span></div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 从后向前遍历table数组中的元素(Entry)    </span></div><div class="line">        <span class="comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value    </span></div><div class="line">        Entry tab[] = table;    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;) &#123;    </div><div class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">                <span class="keyword">if</span> (e.value.equals(value)) &#123;    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> contains(value);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 判断Hashtable是否包含key    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;    </div><div class="line">        Entry tab[] = table;    </div><div class="line">        <span class="comment">//计算hash值，直接用key的hashCode代替  </span></div><div class="line">        <span class="keyword">int</span> hash = key.hashCode();      </div><div class="line">        <span class="comment">// 计算在数组中的索引值   </span></div><div class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">        <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回key对应的value，没有的话返回null    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;    </div><div class="line">        Entry tab[] = table;    </div><div class="line">        <span class="keyword">int</span> hash = key.hashCode();    </div><div class="line">        <span class="comment">// 计算索引值，    </span></div><div class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">        <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">                <span class="keyword">return</span> e.value;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 调整Hashtable的长度，将长度变成原来的2倍+1   </span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">int</span> oldCapacity = table.length;    </div><div class="line">        Entry[] oldMap = table;    </div><div class="line">   </div><div class="line">        <span class="comment">//创建新容量大小的Entry数组  </span></div><div class="line">        <span class="keyword">int</span> newCapacity = oldCapacity * <span class="number">2</span> + <span class="number">1</span>;    </div><div class="line">        Entry[] newMap = <span class="keyword">new</span> Entry[newCapacity];    </div><div class="line">   </div><div class="line">        modCount++;    </div><div class="line">        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);    </div><div class="line">        table = newMap;    </div><div class="line">          </div><div class="line">        <span class="comment">//将“旧的Hashtable”中的元素复制到“新的Hashtable”中  </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;    </div><div class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; old = oldMap[i] ; old != <span class="keyword">null</span> ; ) &#123;    </div><div class="line">                Entry&lt;K,V&gt; e = old;    </div><div class="line">                old = old.next;    </div><div class="line">                <span class="comment">//重新计算index  </span></div><div class="line">                <span class="keyword">int</span> index = (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;    </div><div class="line">                e.next = newMap[index];    </div><div class="line">                newMap[index] = e;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将“key-value”添加到Hashtable中    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;    </div><div class="line">        <span class="comment">// Hashtable中不能插入value为null的元素！！！    </span></div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 若“Hashtable中已存在键为key的键值对”，    </span></div><div class="line">        <span class="comment">// 则用“新的value”替换“旧的value”    </span></div><div class="line">        Entry tab[] = table;    </div><div class="line">        <span class="keyword">int</span> hash = key.hashCode();    </div><div class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">                V old = e.value;    </div><div class="line">                e.value = value;    </div><div class="line">                <span class="keyword">return</span> old;    </div><div class="line">                &#125;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 若“Hashtable中不存在键为key的键值对”，  </span></div><div class="line">        <span class="comment">// 将“修改统计数”+1    </span></div><div class="line">        modCount++;    </div><div class="line">        <span class="comment">//  若“Hashtable实际容量” &gt; “阈值”(阈值=总的容量 * 加载因子)    </span></div><div class="line">        <span class="comment">//  则调整Hashtable的大小    </span></div><div class="line">        <span class="keyword">if</span> (count &gt;= threshold) &#123;  </div><div class="line">            rehash();    </div><div class="line">   </div><div class="line">            tab = table;    </div><div class="line">            index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">//将新的key-value对插入到tab[index]处（即链表的头结点）  </span></div><div class="line">        Entry&lt;K,V&gt; e = tab[index];           </div><div class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </div><div class="line">        count++;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除Hashtable中键为key的元素    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;    </div><div class="line">        Entry tab[] = table;    </div><div class="line">        <span class="keyword">int</span> hash = key.hashCode();    </div><div class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">          </div><div class="line">        <span class="comment">//从table[index]链表中找出要删除的节点，并删除该节点。  </span></div><div class="line">        <span class="comment">//因为是单链表，因此要保留带删节点的前一个节点，才能有效地删除节点  </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span> ; e != <span class="keyword">null</span> ; prev = e, e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">                modCount++;    </div><div class="line">                <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;    </div><div class="line">                    prev.next = e.next;    </div><div class="line">                &#125; <span class="keyword">else</span> &#123;    </div><div class="line">                    tab[index] = e.next;    </div><div class="line">                &#125;    </div><div class="line">                count--;    </div><div class="line">                V oldValue = e.value;    </div><div class="line">                e.value = <span class="keyword">null</span>;    </div><div class="line">                <span class="keyword">return</span> oldValue;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将“Map(t)”的中全部元素逐一添加到Hashtable中    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;    </div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : t.entrySet())    </div><div class="line">            put(e.getKey(), e.getValue());    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 清空Hashtable    </span></div><div class="line">    <span class="comment">// 将Hashtable的table数组的值全部设为null    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </div><div class="line">        Entry tab[] = table;    </div><div class="line">        modCount++;    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = tab.length; --index &gt;= <span class="number">0</span>; )    </div><div class="line">            tab[index] = <span class="keyword">null</span>;    </div><div class="line">        count = <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 克隆一个Hashtable，并以Object的形式返回。    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">try</span> &#123;    </div><div class="line">            Hashtable&lt;K,V&gt; t = (Hashtable&lt;K,V&gt;) <span class="keyword">super</span>.clone();    </div><div class="line">            t.table = <span class="keyword">new</span> Entry[table.length];    </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = table.length ; i-- &gt; <span class="number">0</span> ; ) &#123;    </div><div class="line">                t.table[i] = (table[i] != <span class="keyword">null</span>)    </div><div class="line">                ? (Entry&lt;K,V&gt;) table[i].clone() : <span class="keyword">null</span>;    </div><div class="line">            &#125;    </div><div class="line">            t.keySet = <span class="keyword">null</span>;    </div><div class="line">            t.entrySet = <span class="keyword">null</span>;    </div><div class="line">            t.values = <span class="keyword">null</span>;    </div><div class="line">            t.modCount = <span class="number">0</span>;    </div><div class="line">            <span class="keyword">return</span> t;    </div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;     </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">int</span> max = size() - <span class="number">1</span>;    </div><div class="line">        <span class="keyword">if</span> (max == -<span class="number">1</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="string">"&#123;&#125;"</span>;    </div><div class="line">   </div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();    </div><div class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; it = entrySet().iterator();    </div><div class="line">   </div><div class="line">        sb.append(<span class="string">'&#123;'</span>);    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;    </div><div class="line">            Map.Entry&lt;K,V&gt; e = it.next();    </div><div class="line">            K key = e.getKey();    </div><div class="line">            V value = e.getValue();    </div><div class="line">            sb.append(key   == <span class="keyword">this</span> ? <span class="string">"(this Map)"</span> : key.toString());    </div><div class="line">            sb.append(<span class="string">'='</span>);    </div><div class="line">            sb.append(value == <span class="keyword">this</span> ? <span class="string">"(this Map)"</span> : value.toString());    </div><div class="line">   </div><div class="line">            <span class="keyword">if</span> (i == max)    </div><div class="line">                <span class="keyword">return</span> sb.append(<span class="string">'&#125;'</span>).toString();    </div><div class="line">            sb.append(<span class="string">", "</span>);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 获取Hashtable的枚举类对象    </span></div><div class="line">    <span class="comment">// 若Hashtable的实际大小为0,则返回“空枚举类”对象；    </span></div><div class="line">    <span class="comment">// 否则，返回正常的Enumerator的对象。   </span></div><div class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">Enumeration&lt;T&gt; <span class="title">getEnumeration</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;    </div><div class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;    </div><div class="line">        <span class="keyword">return</span> (Enumeration&lt;T&gt;)emptyEnumerator;    </div><div class="line">    &#125; <span class="keyword">else</span> &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;T&gt;(type, <span class="keyword">false</span>);    </div><div class="line">    &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 获取Hashtable的迭代器    </span></div><div class="line">    <span class="comment">// 若Hashtable的实际大小为0,则返回“空迭代器”对象；    </span></div><div class="line">    <span class="comment">// 否则，返回正常的Enumerator的对象。(Enumerator实现了迭代器和枚举两个接口)    </span></div><div class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">Iterator&lt;T&gt; <span class="title">getIterator</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;    </div><div class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;    </div><div class="line">            <span class="keyword">return</span> (Iterator&lt;T&gt;) emptyIterator;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;T&gt;(type, <span class="keyword">true</span>);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable的“key的集合”。它是一个Set，没有重复元素    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;K&gt; keySet = <span class="keyword">null</span>;    </div><div class="line">    <span class="comment">// Hashtable的“key-value的集合”。它是一个Set，没有重复元素    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="keyword">null</span>;    </div><div class="line">    <span class="comment">// Hashtable的“key-value的集合”。它是一个Collection，可以有重复元素    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Collection&lt;V&gt; values = <span class="keyword">null</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回一个被synchronizedSet封装后的KeySet对象    </span></div><div class="line">    <span class="comment">// synchronizedSet封装的目的是对KeySet的所有方法都添加synchronized，实现多线程同步    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">if</span> (keySet == <span class="keyword">null</span>)    </div><div class="line">            keySet = Collections.synchronizedSet(<span class="keyword">new</span> KeySet(), <span class="keyword">this</span>);    </div><div class="line">        <span class="keyword">return</span> keySet;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable的Key的Set集合。    </span></div><div class="line">    <span class="comment">// KeySet继承于AbstractSet，所以，KeySet中的元素没有重复的。    </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;    </div><div class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> getIterator(KEYS);    </div><div class="line">        &#125;    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> count;    </div><div class="line">        &#125;    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> containsKey(o);    </div><div class="line">        &#125;    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> Hashtable.<span class="keyword">this</span>.remove(o) != <span class="keyword">null</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </div><div class="line">            Hashtable.<span class="keyword">this</span>.clear();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回一个被synchronizedSet封装后的EntrySet对象    </span></div><div class="line">    <span class="comment">// synchronizedSet封装的目的是对EntrySet的所有方法都添加synchronized，实现多线程同步    </span></div><div class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;    </div><div class="line">        <span class="keyword">if</span> (entrySet==<span class="keyword">null</span>)    </div><div class="line">            entrySet = Collections.synchronizedSet(<span class="keyword">new</span> EntrySet(), <span class="keyword">this</span>);    </div><div class="line">        <span class="keyword">return</span> entrySet;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable的Entry的Set集合。    </span></div><div class="line">    <span class="comment">// EntrySet继承于AbstractSet，所以，EntrySet中的元素没有重复的。    </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;    </div><div class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;    </div><div class="line">            <span class="keyword">return</span> getIterator(ENTRIES);    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Map.Entry&lt;K,V&gt; o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.add(o);    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 查找EntrySet中是否包含Object(0)    </span></div><div class="line">        <span class="comment">// 首先，在table中找到o对应的Entry链表    </span></div><div class="line">        <span class="comment">// 然后，查找Entry链表中是否存在Object    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">            Map.Entry entry = (Map.Entry)o;    </div><div class="line">            Object key = entry.getKey();    </div><div class="line">            Entry[] tab = table;    </div><div class="line">            <span class="keyword">int</span> hash = key.hashCode();    </div><div class="line">            <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">   </div><div class="line">            <span class="keyword">for</span> (Entry e = tab[index]; e != <span class="keyword">null</span>; e = e.next)    </div><div class="line">                <span class="keyword">if</span> (e.hash==hash &amp;&amp; e.equals(entry))    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 删除元素Object(0)    </span></div><div class="line">        <span class="comment">// 首先，在table中找到o对应的Entry链表  </span></div><div class="line">        <span class="comment">// 然后，删除链表中的元素Object    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">            Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;    </div><div class="line">            K key = entry.getKey();    </div><div class="line">            Entry[] tab = table;    </div><div class="line">            <span class="keyword">int</span> hash = key.hashCode();    </div><div class="line">            <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">   </div><div class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span>; e != <span class="keyword">null</span>;    </div><div class="line">                 prev = e, e = e.next) &#123;    </div><div class="line">                <span class="keyword">if</span> (e.hash==hash &amp;&amp; e.equals(entry)) &#123;    </div><div class="line">                    modCount++;    </div><div class="line">                    <span class="keyword">if</span> (prev != <span class="keyword">null</span>)    </div><div class="line">                        prev.next = e.next;    </div><div class="line">                    <span class="keyword">else</span>   </div><div class="line">                        tab[index] = e.next;    </div><div class="line">   </div><div class="line">                    count--;    </div><div class="line">                    e.value = <span class="keyword">null</span>;    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> count;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </div><div class="line">            Hashtable.<span class="keyword">this</span>.clear();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回一个被synchronizedCollection封装后的ValueCollection对象    </span></div><div class="line">    <span class="comment">// synchronizedCollection封装的目的是对ValueCollection的所有方法都添加synchronized，实现多线程同步    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;    </div><div class="line">    <span class="keyword">if</span> (values==<span class="keyword">null</span>)    </div><div class="line">        values = Collections.synchronizedCollection(<span class="keyword">new</span> ValueCollection(),    </div><div class="line">                                                        <span class="keyword">this</span>);    </div><div class="line">        <span class="keyword">return</span> values;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable的value的Collection集合。    </span></div><div class="line">    <span class="comment">// ValueCollection继承于AbstractCollection，所以，ValueCollection中的元素可以重复的。    </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueCollection</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;    </div><div class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> getIterator(VALUES);    </div><div class="line">        &#125;    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> count;    </div><div class="line">        &#125;    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> containsValue(o);    </div><div class="line">        &#125;    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </div><div class="line">            Hashtable.<span class="keyword">this</span>.clear();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 重新equals()函数    </span></div><div class="line">    <span class="comment">// 若两个Hashtable的所有key-value键值对都相等，则判断它们两个相等    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">   </div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        Map&lt;K,V&gt; t = (Map&lt;K,V&gt;) o;    </div><div class="line">        <span class="keyword">if</span> (t.size() != size())    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">   </div><div class="line">        <span class="keyword">try</span> &#123;    </div><div class="line">            <span class="comment">// 通过迭代器依次取出当前Hashtable的key-value键值对    </span></div><div class="line">            <span class="comment">// 并判断该键值对，存在于Hashtable中。    </span></div><div class="line">            <span class="comment">// 若不存在，则立即返回false；否则，遍历完“当前Hashtable”并返回true。    </span></div><div class="line">            Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = entrySet().iterator();    </div><div class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;    </div><div class="line">                Map.Entry&lt;K,V&gt; e = i.next();    </div><div class="line">                K key = e.getKey();    </div><div class="line">                V value = e.getValue();    </div><div class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </div><div class="line">                    <span class="keyword">if</span> (!(t.get(key)==<span class="keyword">null</span> &amp;&amp; t.containsKey(key)))    </div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">                &#125; <span class="keyword">else</span> &#123;    </div><div class="line">                    <span class="keyword">if</span> (!value.equals(t.get(key)))    </div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">        &#125; <span class="keyword">catch</span> (ClassCastException unused)   &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 计算Entry的hashCode    </span></div><div class="line">    <span class="comment">// 若 Hashtable的实际大小为0 或者 加载因子&lt;0，则返回0。    </span></div><div class="line">    <span class="comment">// 否则，返回“Hashtable中的每个Entry的key和value的异或值 的总和”。    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;    </div><div class="line">        <span class="keyword">if</span> (count == <span class="number">0</span> || loadFactor &lt; <span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span> h;  <span class="comment">// Returns zero    </span></div><div class="line">   </div><div class="line">        loadFactor = -loadFactor;  <span class="comment">// Mark hashCode computation in progress    </span></div><div class="line">        Entry[] tab = table;    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)    </div><div class="line">            <span class="keyword">for</span> (Entry e = tab[i]; e != <span class="keyword">null</span>; e = e.next)    </div><div class="line">                h += e.key.hashCode() ^ e.value.hashCode();    </div><div class="line">        loadFactor = -loadFactor;  <span class="comment">// Mark hashCode computation complete    </span></div><div class="line">   </div><div class="line">        <span class="keyword">return</span> h;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// java.io.Serializable的写入函数    </span></div><div class="line">    <span class="comment">// 将Hashtable的“总的容量，实际容量，所有的Entry”都写入到输出流中    </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span>    </span></div><div class="line">        <span class="keyword">throws</span> IOException    </div><div class="line">    &#123;    </div><div class="line">        <span class="comment">// Write out the length, threshold, loadfactor    </span></div><div class="line">        s.defaultWriteObject();    </div><div class="line">   </div><div class="line">        <span class="comment">// Write out length, count of elements and then the key/value objects    </span></div><div class="line">        s.writeInt(table.length);    </div><div class="line">        s.writeInt(count);    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = table.length-<span class="number">1</span>; index &gt;= <span class="number">0</span>; index--) &#123;    </div><div class="line">            Entry entry = table[index];    </div><div class="line">   </div><div class="line">            <span class="keyword">while</span> (entry != <span class="keyword">null</span>) &#123;    </div><div class="line">            s.writeObject(entry.key);    </div><div class="line">            s.writeObject(entry.value);    </div><div class="line">            entry = entry.next;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出    </span></div><div class="line">    <span class="comment">// 将Hashtable的“总的容量，实际容量，所有的Entry”依次读出    </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>    </span></div><div class="line">         <span class="keyword">throws</span> IOException, ClassNotFoundException    </div><div class="line">    &#123;    </div><div class="line">        <span class="comment">// Read in the length, threshold, and loadfactor    </span></div><div class="line">        s.defaultReadObject();    </div><div class="line">   </div><div class="line">        <span class="comment">// Read the original length of the array and number of elements    </span></div><div class="line">        <span class="keyword">int</span> origlength = s.readInt();    </div><div class="line">        <span class="keyword">int</span> elements = s.readInt();    </div><div class="line">   </div><div class="line">        <span class="comment">// Compute new size with a bit of room 5% to grow but    </span></div><div class="line">        <span class="comment">// no larger than the original size.  Make the length    </span></div><div class="line">        <span class="comment">// odd if it's large enough, this helps distribute the entries.    </span></div><div class="line">        <span class="comment">// Guard against the length ending up zero, that's not valid.    </span></div><div class="line">        <span class="keyword">int</span> length = (<span class="keyword">int</span>)(elements * loadFactor) + (elements / <span class="number">20</span>) + <span class="number">3</span>;    </div><div class="line">        <span class="keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="number">1</span>) == <span class="number">0</span>)    </div><div class="line">            length--;    </div><div class="line">        <span class="keyword">if</span> (origlength &gt; <span class="number">0</span> &amp;&amp; length &gt; origlength)    </div><div class="line">            length = origlength;    </div><div class="line">   </div><div class="line">        Entry[] table = <span class="keyword">new</span> Entry[length];    </div><div class="line">        count = <span class="number">0</span>;    </div><div class="line">   </div><div class="line">        <span class="comment">// Read the number of elements and then all the key/value objects    </span></div><div class="line">        <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;    </div><div class="line">            K key = (K)s.readObject();    </div><div class="line">            V value = (V)s.readObject();    </div><div class="line">                <span class="comment">// synch could be eliminated for performance    </span></div><div class="line">                reconstitutionPut(table, key, value);    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">this</span>.table = table;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reconstitutionPut</span><span class="params">(Entry[] tab, K key, V value)</span>    </span></div><div class="line">        <span class="keyword">throws</span> StreamCorruptedException    </div><div class="line">    &#123;    </div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();    </div><div class="line">        &#125;    </div><div class="line">        <span class="comment">// Makes sure the key is not already in the hashtable.    </span></div><div class="line">        <span class="comment">// This should not happen in deserialized version.    </span></div><div class="line">        <span class="keyword">int</span> hash = key.hashCode();    </div><div class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="comment">// Creates the new entry.    </span></div><div class="line">        Entry&lt;K,V&gt; e = tab[index];    </div><div class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </div><div class="line">        count++;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable的Entry节点，它本质上是一个单向链表。    </span></div><div class="line">    <span class="comment">// 也因此，我们才能推断出Hashtable是由拉链法实现的散列表    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;    </div><div class="line">        <span class="comment">// 哈希值    </span></div><div class="line">        <span class="keyword">int</span> hash;    </div><div class="line">        K key;    </div><div class="line">        V value;    </div><div class="line">        <span class="comment">// 指向的下一个Entry，即链表的下一个节点    </span></div><div class="line">        Entry&lt;K,V&gt; next;    </div><div class="line">   </div><div class="line">        <span class="comment">// 构造函数    </span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">Entry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> </span>&#123;    </div><div class="line">            <span class="keyword">this</span>.hash = hash;    </div><div class="line">            <span class="keyword">this</span>.key = key;    </div><div class="line">            <span class="keyword">this</span>.value = value;    </div><div class="line">            <span class="keyword">this</span>.next = next;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value,    </div><div class="line">                  (next==<span class="keyword">null</span> ? <span class="keyword">null</span> : (Entry&lt;K,V&gt;) next.clone()));    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> key;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> value;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 设置value。若value是null，则抛出异常。    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </div><div class="line">   </div><div class="line">            V oldValue = <span class="keyword">this</span>.value;    </div><div class="line">            <span class="keyword">this</span>.value = value;    </div><div class="line">            <span class="keyword">return</span> oldValue;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 覆盖equals()方法，判断两个Entry是否相等。    </span></div><div class="line">        <span class="comment">// 若两个Entry的key和value都相等，则认为它们相等。    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">            Map.Entry e = (Map.Entry)o;    </div><div class="line">   </div><div class="line">            <span class="keyword">return</span> (key==<span class="keyword">null</span> ? e.getKey()==<span class="keyword">null</span> : key.equals(e.getKey())) &amp;&amp;    </div><div class="line">               (value==<span class="keyword">null</span> ? e.getValue()==<span class="keyword">null</span> : value.equals(e.getValue()));    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> hash ^ (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> key.toString()+<span class="string">"="</span>+value.toString();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEYS = <span class="number">0</span>;    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUES = <span class="number">1</span>;    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENTRIES = <span class="number">2</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// Enumerator的作用是提供了“通过elements()遍历Hashtable的接口” 和 “通过entrySet()遍历Hashtable的接口”。    </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Enumerator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">T</span>&gt;, <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;    </div><div class="line">        <span class="comment">// 指向Hashtable的table    </span></div><div class="line">        Entry[] table = Hashtable.<span class="keyword">this</span>.table;    </div><div class="line">        <span class="comment">// Hashtable的总的大小    </span></div><div class="line">        <span class="keyword">int</span> index = table.length;    </div><div class="line">        Entry&lt;K,V&gt; entry = <span class="keyword">null</span>;    </div><div class="line">        Entry&lt;K,V&gt; lastReturned = <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">int</span> type;    </div><div class="line">   </div><div class="line">        <span class="comment">// Enumerator是 “迭代器(Iterator)” 还是 “枚举类(Enumeration)”的标志    </span></div><div class="line">        <span class="comment">// iterator为true，表示它是迭代器；否则，是枚举类。    </span></div><div class="line">        <span class="keyword">boolean</span> iterator;    </div><div class="line">   </div><div class="line">        <span class="comment">// 在将Enumerator当作迭代器使用时会用到，用来实现fail-fast机制。    </span></div><div class="line">        <span class="keyword">protected</span> <span class="keyword">int</span> expectedModCount = modCount;    </div><div class="line">   </div><div class="line">        Enumerator(<span class="keyword">int</span> type, <span class="keyword">boolean</span> iterator) &#123;    </div><div class="line">            <span class="keyword">this</span>.type = type;    </div><div class="line">            <span class="keyword">this</span>.iterator = iterator;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 从遍历table的数组的末尾向前查找，直到找到不为null的Entry。    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;    </div><div class="line">            Entry&lt;K,V&gt; e = entry;    </div><div class="line">            <span class="keyword">int</span> i = index;    </div><div class="line">            Entry[] t = table;    </div><div class="line">            <span class="comment">/* Use locals for faster loop iteration */</span>   </div><div class="line">            <span class="keyword">while</span> (e == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;    </div><div class="line">                e = t[--i];    </div><div class="line">            &#125;    </div><div class="line">            entry = e;    </div><div class="line">            index = i;    </div><div class="line">            <span class="keyword">return</span> e != <span class="keyword">null</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 获取下一个元素    </span></div><div class="line">        <span class="comment">// 注意：从hasMoreElements() 和nextElement() 可以看出“Hashtable的elements()遍历方式”    </span></div><div class="line">        <span class="comment">// 首先，从后向前的遍历table数组。table数组的每个节点都是一个单向链表(Entry)。    </span></div><div class="line">        <span class="comment">// 然后，依次向后遍历单向链表Entry。    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">nextElement</span><span class="params">()</span> </span>&#123;    </div><div class="line">            Entry&lt;K,V&gt; et = entry;    </div><div class="line">            <span class="keyword">int</span> i = index;    </div><div class="line">            Entry[] t = table;    </div><div class="line">            <span class="comment">/* Use locals for faster loop iteration */</span>   </div><div class="line">            <span class="keyword">while</span> (et == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;    </div><div class="line">                et = t[--i];    </div><div class="line">            &#125;    </div><div class="line">            entry = et;    </div><div class="line">            index = i;    </div><div class="line">            <span class="keyword">if</span> (et != <span class="keyword">null</span>) &#123;    </div><div class="line">                Entry&lt;K,V&gt; e = lastReturned = entry;    </div><div class="line">                entry = e.next;    </div><div class="line">                <span class="keyword">return</span> type == KEYS ? (T)e.key : (type == VALUES ? (T)e.value : (T)e);    </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Enumerator"</span>);    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 迭代器Iterator的判断是否存在下一个元素    </span></div><div class="line">        <span class="comment">// 实际上，它是调用的hasMoreElements()    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> hasMoreElements();    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 迭代器获取下一个元素    </span></div><div class="line">        <span class="comment">// 实际上，它是调用的nextElement()    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </div><div class="line">            <span class="keyword">return</span> nextElement();    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 迭代器的remove()接口。    </span></div><div class="line">        <span class="comment">// 首先，它在table数组中找出要删除元素所在的Entry，    </span></div><div class="line">        <span class="comment">// 然后，删除单向链表Entry中的元素。    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (!iterator)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();    </div><div class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Hashtable Enumerator"</span>);    </div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </div><div class="line">   </div><div class="line">            <span class="keyword">synchronized</span>(Hashtable.<span class="keyword">this</span>) &#123;    </div><div class="line">                Entry[] tab = Hashtable.<span class="keyword">this</span>.table;    </div><div class="line">                <span class="keyword">int</span> index = (lastReturned.hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">   </div><div class="line">                <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span>; e != <span class="keyword">null</span>;    </div><div class="line">                     prev = e, e = e.next) &#123;    </div><div class="line">                    <span class="keyword">if</span> (e == lastReturned) &#123;    </div><div class="line">                        modCount++;    </div><div class="line">                        expectedModCount++;    </div><div class="line">                        <span class="keyword">if</span> (prev == <span class="keyword">null</span>)    </div><div class="line">                            tab[index] = e.next;    </div><div class="line">                        <span class="keyword">else</span>   </div><div class="line">                            prev.next = e.next;    </div><div class="line">                        count--;    </div><div class="line">                        lastReturned = <span class="keyword">null</span>;    </div><div class="line">                        <span class="keyword">return</span>;    </div><div class="line">                    &#125;    </div><div class="line">                &#125;    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Enumeration emptyEnumerator = <span class="keyword">new</span> EmptyEnumerator();    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Iterator emptyIterator = <span class="keyword">new</span> EmptyIterator();    </div><div class="line">   </div><div class="line">    <span class="comment">// 空枚举类    </span></div><div class="line">    <span class="comment">// 当Hashtable的实际大小为0；此时，又要通过Enumeration遍历Hashtable时，返回的是“空枚举类”的对象。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyEnumerator</span> <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">Object</span>&gt; </span>&#123;    </div><div class="line">   </div><div class="line">        EmptyEnumerator() &#123;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 空枚举类的hasMoreElements() 始终返回false    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 空枚举类的nextElement() 抛出异常    </span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">nextElement</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Enumerator"</span>);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// 空迭代器    </span></div><div class="line">    <span class="comment">// 当Hashtable的实际大小为0；此时，又要通过迭代器遍历Hashtable时，返回的是“空迭代器”的对象。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Object</span>&gt; </span>&#123;    </div><div class="line">   </div><div class="line">        EmptyIterator() &#123;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Iterator"</span>);    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Hashtable Iterator"</span>);    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="几点总结-4"><a href="#几点总结-4" class="headerlink" title="几点总结"></a>几点总结</h2><p> 针对Hashtable，我们同样给出几点比较重要的总结，但要结合与HashMap的比较来总结。</p>
<ol>
<li>二者的存储结构和解决冲突的方法都是相同的。</li>
<li>HashTable在不指定容量的情况下的默认容量为11，而HashMap为16，Hashtable不要求底层数组的容量一定要为2的整数次幂，而HashMap则要求一定为2的整数次幂。</li>
<li><p>Hashtable中key和value都不允许为null，而HashMap中key和value都允许为null（key只能有一个为null，而value则可以有多个为null）。但是如果在Hashtable中有类似put(null,null)的操作，编译同样可以通过，因为key和value都是Object类型，但运行时会抛出NullPointerException异常，这是JDK的规范规定的。我们来看下ContainsKey方法和ContainsValue的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断Hashtable是否包含“值(value)”    </span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object value)</span> </span>&#123;    </div><div class="line">     <span class="comment">//注意，Hashtable中的value不能是null，    </span></div><div class="line">     <span class="comment">// 若是null的话，抛出异常!    </span></div><div class="line">     <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </div><div class="line">     &#125;    </div><div class="line">  </div><div class="line">     <span class="comment">// 从后向前遍历table数组中的元素(Entry)    </span></div><div class="line">     <span class="comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value    </span></div><div class="line">     Entry tab[] = table;    </div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;) &#123;    </div><div class="line">         <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">             <span class="keyword">if</span> (e.value.equals(value)) &#123;    </div><div class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">             &#125;    </div><div class="line">         &#125;    </div><div class="line">     &#125;    </div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line"> &#125;    </div><div class="line">  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;    </div><div class="line">     <span class="keyword">return</span> contains(value);    </div><div class="line"> &#125;    </div><div class="line">  </div><div class="line"> <span class="comment">// 判断Hashtable是否包含key    </span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;    </div><div class="line">     Entry tab[] = table;    </div><div class="line">/计算hash值，直接用key的hashCode代替  </div><div class="line">     <span class="keyword">int</span> hash = key.hashCode();      </div><div class="line">     <span class="comment">// 计算在数组中的索引值   </span></div><div class="line">     <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">     <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></div><div class="line">     <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">         <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">         &#125;    </div><div class="line">     &#125;    </div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p> 很明显，如果value为null，会直接抛出NullPointerException异常，但源码中并没有对key是否为null判断，有点小不解！不过NullPointerException属于RuntimeException异常，是可以由JVM自动抛出的，也许对key的值在JVM中有所限制吧。</p>
</li>
<li>Hashtable扩容时，将容量变为原来的2倍加1，而HashMap扩容时，将容量变为原来的2倍。</li>
<li>Hashtable计算hash值，直接用key的hashCode()，而HashMap重新计算了key的hash值，Hashtable在求hash值对应的位置索引时，用取模运算，而HashMap在求位置索引时，则用与运算，且这里一般先用hash&amp;0x7FFFFFFF后，再对length取模，&amp;0x7FFFFFFF的目的是为了将负的hash值转化为正值，因为hash值有可能为负数，而&amp;0x7FFFFFFF后，只有符号外改变，而后面的位都不变。 </li>
</ol>
<h1 id="TreeMap源码剖析"><a href="#TreeMap源码剖析" class="headerlink" title="TreeMap源码剖析"></a>TreeMap源码剖析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>本文不打算延续前几篇的风格（对所有的源码加入注释），因为要理解透TreeMap的所有源码，对博主来说，确实需要耗费大量的时间和经历，目前看来不大可能有这么多时间的投入，故这里意在通过于阅读源码对TreeMap有个宏观上的把握，并就其中一些方法的实现做比较深入的分析。<h2 id="红黑树简介"><a href="#红黑树简介" class="headerlink" title="红黑树简介"></a>红黑树简介</h2></li>
<li>TreeMap是基于红黑树实现的，这里只对红黑树做个简单的介绍，红黑树是一种特殊的二叉排序树，关于二叉排序树，参见：<a href="http://blog.csdn.net/ns_code/article/details/19823463，红黑树通过一些限制，使其不会出现二叉树排序树中极端的一边倒的情况，相对二叉排序树而言，这自然提高了查询的效率。" target="_blank" rel="external">http://blog.csdn.net/ns_code/article/details/19823463，红黑树通过一些限制，使其不会出现二叉树排序树中极端的一边倒的情况，相对二叉排序树而言，这自然提高了查询的效率。</a></li>
</ul>
<p>二叉排序树的基本性质如下：</p>
<ol>
<li>每个节点都只能是红色或者黑色</li>
<li>根节点是黑色</li>
<li>每个叶节点（NIL节点，空节点）是黑色的。</li>
<li>如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。</li>
<li>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。<br> 正是这些性质的限制，使得红黑树中任一节点到其子孙叶子节点的最长路径不会长于最短路径的2倍，因此它是一种接近平衡的二叉树。<br> 说到红黑树，自然不免要和AVL树对比一番。相比较而言，AVL树是严格的平衡二叉树，而红黑树不算严格意义上的平衡二叉树，只是接近平衡，不会让树的高度如BST极端情况那样等于节点的个数。其实能用到红黑树的地方，也都可以用AVL树来实现，但红黑树的应用却非常广泛，而AVL树则很少被使用。在执行插入、删除操作时，AVL树需要调整的次数一般要比红黑树多（红黑树的旋转调整最多只需三次），效率相对较低，且红黑树的统计性能较AVL树要好，当然AVL树在查询效率上可能更胜一筹，但实际上也高不了多少。<br> 红黑树的插入删除操作很简单，就是单纯的二叉排序树的插入删除操作。红黑树被认为比较变态的地方自然在于插入删除后对红黑树的调整操作（旋转和着色），主要是情况分的很多，限于篇幅及博主的熟悉程度优先，这里不打算详细介绍插入删除后调整红黑树的各种情况及其实现，我们有个宏观上的了解即可，如须详细了解，参见算法导论或一些相关的资料。</li>
</ol>
<h2 id="TreeMap源码剖析-1"><a href="#TreeMap源码剖析-1" class="headerlink" title="TreeMap源码剖析"></a>TreeMap源码剖析</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>TreeMap的排序是基于对key的排序实现的，它的每一个Entry代表红黑树的一个节点，Entry的数据结构如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;    </div><div class="line">     <span class="comment">// 键    </span></div><div class="line">     K key;    </div><div class="line">     <span class="comment">// 值    </span></div><div class="line">     V value;    </div><div class="line">     <span class="comment">// 左孩子    </span></div><div class="line">     Entry&lt;K,V&gt; left = <span class="keyword">null</span>;    </div><div class="line">     <span class="comment">// 右孩子    </span></div><div class="line">     Entry&lt;K,V&gt; right = <span class="keyword">null</span>;    </div><div class="line">     <span class="comment">// 父节点    </span></div><div class="line">     Entry&lt;K,V&gt; parent;    </div><div class="line">     <span class="comment">// 当前节点颜色    </span></div><div class="line">     <span class="keyword">boolean</span> color = BLACK;    </div><div class="line">  </div><div class="line">     <span class="comment">// 构造函数    </span></div><div class="line">     Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;    </div><div class="line">         <span class="keyword">this</span>.key = key;    </div><div class="line">         <span class="keyword">this</span>.value = value;    </div><div class="line">         <span class="keyword">this</span>.parent = parent;    </div><div class="line">     &#125;    </div><div class="line">  </div><div class="line">。。。。。  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>先来看下TreeMap的构造方法。TreeMap一共有4个构造方法。</p>
<ol>
<li>无参构造方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">()</span> </span>&#123;    </div><div class="line">    comparator = <span class="keyword">null</span>;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>采用无参构造方法，不指定比较器，这时候，排序的实现要依赖key.compareTo()方法，因此key必须实现Comparable接口，并覆写其中的compareTo方法。</p>
<ol>
<li><p>带有比较器的构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> K&gt; comparator)</span> </span>&#123;    </div><div class="line">    <span class="keyword">this</span>.comparator = comparator;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>采用带比较器的构造方法，这时候，排序依赖该比较器，key可以不用实现Comparable接口。</p>
</li>
<li>带Map的构造方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;    </div><div class="line">    comparator = <span class="keyword">null</span>;    </div><div class="line">    putAll(m);    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>该构造方法同样不指定比较器，调用putAll方法将Map中的所有元素加入到TreeMap中。putAll的源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将map中的全部节点添加到TreeMap中    </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span> </span>&#123;    </div><div class="line">    <span class="comment">// 获取map的大小    </span></div><div class="line">    <span class="keyword">int</span> mapSize = map.size();    </div><div class="line">    <span class="comment">// 如果TreeMap的大小是0,且map的大小不是0,且map是已排序的“key-value对”    </span></div><div class="line">    <span class="keyword">if</span> (size==<span class="number">0</span> &amp;&amp; mapSize!=<span class="number">0</span> &amp;&amp; map <span class="keyword">instanceof</span> SortedMap) &#123;    </div><div class="line">        Comparator c = ((SortedMap)map).comparator();    </div><div class="line">        <span class="comment">// 如果TreeMap和map的比较器相等；    </span></div><div class="line">        <span class="comment">// 则将map的元素全部拷贝到TreeMap中，然后返回！    </span></div><div class="line">        <span class="keyword">if</span> (c == comparator || (c != <span class="keyword">null</span> &amp;&amp; c.equals(comparator))) &#123;    </div><div class="line">            ++modCount;    </div><div class="line">            <span class="keyword">try</span> &#123;    </div><div class="line">                buildFromSorted(mapSize, map.entrySet().iterator(),    </div><div class="line">                            <span class="keyword">null</span>, <span class="keyword">null</span>);    </div><div class="line">            &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;    </div><div class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;    </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">return</span>;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">    <span class="comment">// 调用AbstractMap中的putAll();    </span></div><div class="line">    <span class="comment">// AbstractMap中的putAll()又会调用到TreeMap的put()    </span></div><div class="line">    <span class="keyword">super</span>.putAll(map);    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>显然，如果Map里的元素是排好序的，就调用buildFromSorted方法来拷贝Map中的元素，这在下一个构造方法中会重点提及，而如果Map中的元素不是排好序的，就调用AbstractMap的putAll(map)方法，该方法源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;    </div><div class="line">    <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet())    </div><div class="line">        put(e.getKey(), e.getValue());    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很明显它是将Map中的元素一个个put（插入）到TreeMap中的，主要因为Map中的元素是无序存放的，因此要一个个插入到红黑树中，使其有序存放，并满足红黑树的性质。</p>
<ol>
<li>带有SortedMap的构造方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(SortedMap&lt;K, ? extends V&gt; m)</span> </span>&#123;    </div><div class="line">    comparator = m.comparator();    </div><div class="line">    <span class="keyword">try</span> &#123;    </div><div class="line">        buildFromSorted(m.size(), m.entrySet().iterator(), <span class="keyword">null</span>, <span class="keyword">null</span>);    </div><div class="line">    &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;    </div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>首先将比较器指定为m的比较器，这取决于生成m时调用构造方法是否传入了指定的构造器，而后调用buildFromSorted方法，将SortedMap中的元素插入到TreeMap中，由于SortedMap中的元素师有序的，实际上它是根据SortedMap创建的TreeMap，将SortedMap中对应的元素添加到TreeMap中。</p>
<h3 id="插入删除"><a href="#插入删除" class="headerlink" title="插入删除"></a>插入删除</h3><p>插入操作即对应TreeMap的put方法，put操作实际上只需按照二叉排序树的插入步骤来操作即可，插入到指定位置后，再做调整，使其保持红黑树的特性。put源码的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;    </div><div class="line">    Entry&lt;K,V&gt; t = root;    </div><div class="line">    <span class="comment">// 若红黑树为空，则插入根节点    </span></div><div class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;    </div><div class="line">    <span class="comment">// TBD:    </span></div><div class="line">    <span class="comment">// 5045147: (coll) Adding null to an empty TreeSet should    </span></div><div class="line">    <span class="comment">// throw NullPointerException    </span></div><div class="line">    <span class="comment">//    </span></div><div class="line">    <span class="comment">// compare(key, key); // type check    </span></div><div class="line">        root = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, <span class="keyword">null</span>);    </div><div class="line">        size = <span class="number">1</span>;    </div><div class="line">        modCount++;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">    <span class="keyword">int</span> cmp;    </div><div class="line">    Entry&lt;K,V&gt; parent;    </div><div class="line">    <span class="comment">// split comparator and comparable paths    </span></div><div class="line">    Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;    </div><div class="line">    <span class="comment">// 找出(key, value)在二叉排序树中的插入位置。    </span></div><div class="line">    <span class="comment">// 红黑树是以key来进行排序的，所以这里以key来进行查找。    </span></div><div class="line">    <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;    </div><div class="line">        <span class="keyword">do</span> &#123;    </div><div class="line">            parent = t;    </div><div class="line">            cmp = cpr.compare(key, t.key);    </div><div class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)    </div><div class="line">                t = t.left;    </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)    </div><div class="line">                t = t.right;    </div><div class="line">            <span class="keyword">else</span>   </div><div class="line">                <span class="keyword">return</span> t.setValue(value);    </div><div class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);    </div><div class="line">    &#125;    </div><div class="line">    <span class="keyword">else</span> &#123;    </div><div class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </div><div class="line">        Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;    </div><div class="line">        <span class="keyword">do</span> &#123;    </div><div class="line">            parent = t;    </div><div class="line">            cmp = k.compareTo(t.key);    </div><div class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)    </div><div class="line">                t = t.left;    </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)    </div><div class="line">                t = t.right;    </div><div class="line">            <span class="keyword">else</span>   </div><div class="line">                <span class="keyword">return</span> t.setValue(value);    </div><div class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);    </div><div class="line">    &#125;    </div><div class="line">    <span class="comment">// 为（key-value）新建节点    </span></div><div class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, parent);    </div><div class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)    </div><div class="line">        parent.left = e;    </div><div class="line">    <span class="keyword">else</span>   </div><div class="line">        parent.right = e;    </div><div class="line">    <span class="comment">// 插入新的节点后，调用fixAfterInsertion调整红黑树。    </span></div><div class="line">    fixAfterInsertion(e);    </div><div class="line">    size++;    </div><div class="line">    modCount++;    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的fixAfterInsertion便是节点插入后对树进行调整的方法，这里不做介绍。<br>    删除操作及对应TreeMap的deleteEntry方法，deleteEntry方法同样也只需按照二叉排序树的操作步骤实现即可，删除指定节点后，再对树进行调整即可。deleteEntry方法的实现源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 删除“红黑树的节点p”    </span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteEntry</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;    </div><div class="line">    modCount++;    </div><div class="line">    size--;    </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (p.left != <span class="keyword">null</span> &amp;&amp; p.right != <span class="keyword">null</span>) &#123;    </div><div class="line">        Entry&lt;K,V&gt; s = successor (p);    </div><div class="line">        p.key = s.key;    </div><div class="line">        p.value = s.value;    </div><div class="line">        p = s;    </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    Entry&lt;K,V&gt; replacement = (p.left != <span class="keyword">null</span> ? p.left : p.right);    </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (replacement != <span class="keyword">null</span>) &#123;    </div><div class="line">        replacement.parent = p.parent;    </div><div class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)    </div><div class="line">            root = replacement;    </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.left)    </div><div class="line">            p.parent.left  = replacement;    </div><div class="line">        <span class="keyword">else</span>   </div><div class="line">            p.parent.right = replacement;    </div><div class="line">  </div><div class="line">        p.left = p.right = p.parent = <span class="keyword">null</span>;    </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (p.color == BLACK)    </div><div class="line">            fixAfterDeletion(replacement);    </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>) &#123;   </div><div class="line">        root = <span class="keyword">null</span>;    </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="keyword">if</span> (p.color == BLACK)    </div><div class="line">            fixAfterDeletion(p);    </div><div class="line">  </div><div class="line">        <span class="keyword">if</span> (p.parent != <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">if</span> (p == p.parent.left)    </div><div class="line">                p.parent.left = <span class="keyword">null</span>;    </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.right)    </div><div class="line">                p.parent.right = <span class="keyword">null</span>;    </div><div class="line">            p.parent = <span class="keyword">null</span>;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>后面的fixAfterDeletion方法便是节点删除后对树进行调整的方法，这里不做介绍。<br>    其他很多方法这里不再一一介绍。</p>
<h2 id="几点总结-5"><a href="#几点总结-5" class="headerlink" title="几点总结"></a>几点总结</h2><ol>
<li>TreeMap是根据key进行排序的，它的排序和定位需要依赖比较器或覆写Comparable接口，也因此不需要key覆写hashCode方法和equals方法，就可以排除掉重复的key，而HashMap的key则需要通过覆写hashCode方法和equals方法来确保没有重复的key。</li>
<li>TreeMap的查询、插入、删除效率均没有HashMap高，一般只有要对key排序时才使用TreeMap。</li>
<li>TreeMap的key不能为null，而HashMap的key可以为null。</li>
</ol>
<p>注：对TreeSet和HashSet的源码不再进行剖析，二者分别是基于TreeMap和HashMap实现的，只是对应的节点中只有key，而没有value，因此对TreeMap和HashMap比较了解的话，对TreeSet和HashSet的理解就会非常容易。</p>
<h1 id="LinkedHashmap源码剖析"><a href="#LinkedHashmap源码剖析" class="headerlink" title="LinkedHashmap源码剖析"></a>LinkedHashmap源码剖析</h1><h2 id="LinkedHashMap简介"><a href="#LinkedHashMap简介" class="headerlink" title="LinkedHashMap简介"></a>LinkedHashMap简介</h2><ul>
<li>LinkedHashMap是HashMap的子类，与HashMap有着同样的存储结构，但它加入了一个双向链表的头结点，将所有put到LinkedHashmap的节点一一串成了一个双向循环链表，因此它保留了节点插入的顺序，可以使节点的输出顺序与输入顺序相同。</li>
<li>LinkedHashMap可以用来实现LRU算法（这会在下面的源码中进行分析）。</li>
<li>LinkedHashMap同样是非线程安全的，只在单线程环境下使用。</li>
</ul>
<h2 id="LinkedHashMap源码剖析"><a href="#LinkedHashMap源码剖析" class="headerlink" title="LinkedHashMap源码剖析"></a>LinkedHashMap源码剖析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.util;  </div><div class="line"><span class="keyword">import</span> java.io.*;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;  </span></div><div class="line">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;  </div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;  </div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3801124242820219131L</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">//双向循环链表的头结点，整个LinkedHa只哟shMap中只有一个header，  </span></div><div class="line">    <span class="comment">//它将哈希表中所有的Entry贯穿起来，header中不保存key-value对，只保存前后节点的引用  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; header;  </div><div class="line">  </div><div class="line">    <span class="comment">//双向链表中元素排序规则的标志位。  </span></div><div class="line">    <span class="comment">//accessOrder为false，表示按插入顺序排序  </span></div><div class="line">    <span class="comment">//accessOrder为true，表示按访问顺序排序  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;  </div><div class="line">  </div><div class="line">    <span class="comment">//调用HashMap的构造方法来构造底层的数组  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(initialCapacity, loadFactor);  </div><div class="line">        accessOrder = <span class="keyword">false</span>;    <span class="comment">//链表中的元素默认按照插入顺序排序  </span></div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//加载因子取默认的0.75f  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(initialCapacity);  </div><div class="line">        accessOrder = <span class="keyword">false</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//加载因子取默认的0.75f，容量取默认的16  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>();  </div><div class="line">        accessOrder = <span class="keyword">false</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//含有子Map的构造方法，同样调用HashMap的对应的构造方法  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(m);  </div><div class="line">        accessOrder = <span class="keyword">false</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//该构造方法可以指定链表中的元素排序的规则  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,<span class="keyword">float</span> loadFactor,<span class="keyword">boolean</span> accessOrder)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(initialCapacity, loadFactor);  </div><div class="line">        <span class="keyword">this</span>.accessOrder = accessOrder;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//覆写父类的init()方法（HashMap中的init方法为空），  </span></div><div class="line">    <span class="comment">//该方法在父类的构造方法和Clone、readObject中在插入元素前被调用，  </span></div><div class="line">    <span class="comment">//初始化一个空的双向循环链表，头结点中不保存数据，头结点的下一个节点才开始保存数据。  </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;  </div><div class="line">        header = <span class="keyword">new</span> Entry&lt;K,V&gt;(-<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);  </div><div class="line">        header.before = header.after = header;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="comment">//覆写HashMap中的transfer方法，它在父类的resize方法中被调用，  </span></div><div class="line">    <span class="comment">//扩容后，将key-value对重新映射到新的newTable中  </span></div><div class="line">    <span class="comment">//覆写该方法的目的是为了提高复制的效率，  </span></div><div class="line">    <span class="comment">//这里充分利用双向循环链表的特点进行迭代，不用对底层的数组进行for循环。  </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(HashMap.Entry[] newTable)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> newCapacity = newTable.length;  </div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = header.after; e != header; e = e.after) &#123;  </div><div class="line">            <span class="keyword">int</span> index = indexFor(e.hash, newCapacity);  </div><div class="line">            e.next = newTable[index];  </div><div class="line">            newTable[index] = e;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="comment">//覆写HashMap中的containsValue方法，  </span></div><div class="line">    <span class="comment">//覆写该方法的目的同样是为了提高查询的效率，  </span></div><div class="line">    <span class="comment">//利用双向循环链表的特点进行查询，少了对数组的外层for循环  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;  </div><div class="line">        <span class="comment">// Overridden to take advantage of faster iterator  </span></div><div class="line">        <span class="keyword">if</span> (value==<span class="keyword">null</span>) &#123;  </div><div class="line">            <span class="keyword">for</span> (Entry e = header.after; e != header; e = e.after)  </div><div class="line">                <span class="keyword">if</span> (e.value==<span class="keyword">null</span>)  </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            <span class="keyword">for</span> (Entry e = header.after; e != header; e = e.after)  </div><div class="line">                <span class="keyword">if</span> (value.equals(e.value))  </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="comment">//覆写HashMap中的get方法，通过getEntry方法获取Entry对象。  </span></div><div class="line">    <span class="comment">//注意这里的recordAccess方法，  </span></div><div class="line">    <span class="comment">//如果链表中元素的排序规则是按照插入的先后顺序排序的话，该方法什么也不做，  </span></div><div class="line">    <span class="comment">//如果链表中元素的排序规则是按照访问的先后顺序排序的话，则将e移到链表的末尾处。  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;  </div><div class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)getEntry(key);  </div><div class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        e.recordAccess(<span class="keyword">this</span>);  </div><div class="line">        <span class="keyword">return</span> e.value;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//清空HashMap，并将双向链表还原为只有头结点的空链表  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.clear();  </div><div class="line">        header.before = header.after = header;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//Enty的数据结构，多了两个指向前后节点的引用  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;  </div><div class="line">        <span class="comment">// These fields comprise the doubly linked list used for iteration.  </span></div><div class="line">        Entry&lt;K,V&gt; before, after;  </div><div class="line">  </div><div class="line">        <span class="comment">//调用父类的构造方法  </span></div><div class="line">        Entry(<span class="keyword">int</span> hash, K key, V value, HashMap.Entry&lt;K,V&gt; next) &#123;  </div><div class="line">            <span class="keyword">super</span>(hash, key, value, next);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="comment">//双向循环链表中，删除当前的Entry  </span></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;  </div><div class="line">            before.after = after;  </div><div class="line">            after.before = before;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="comment">//双向循环立链表中，将当前的Entry插入到existingEntry的前面  </span></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Entry&lt;K,V&gt; existingEntry)</span> </span>&#123;  </div><div class="line">            after  = existingEntry;  </div><div class="line">            before = existingEntry.before;  </div><div class="line">            before.after = <span class="keyword">this</span>;  </div><div class="line">            after.before = <span class="keyword">this</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">        <span class="comment">//覆写HashMap中的recordAccess方法（HashMap中该方法为空），  </span></div><div class="line">        <span class="comment">//当调用父类的put方法，在发现插入的key已经存在时，会调用该方法，  </span></div><div class="line">        <span class="comment">//调用LinkedHashmap覆写的get方法时，也会调用到该方法，  </span></div><div class="line">        <span class="comment">//该方法提供了LRU算法的实现，它将最近使用的Entry放到双向循环链表的尾部，  </span></div><div class="line">        <span class="comment">//accessOrder为true时，get方法会调用recordAccess方法  </span></div><div class="line">        <span class="comment">//put方法在覆盖key-value对时也会调用recordAccess方法  </span></div><div class="line">        <span class="comment">//它们导致Entry最近使用，因此将其移到双向链表的末尾  </span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;  </div><div class="line">            LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;  </div><div class="line">            <span class="comment">//如果链表中元素按照访问顺序排序，则将当前访问的Entry移到双向循环链表的尾部，  </span></div><div class="line">            <span class="comment">//如果是按照插入的先后顺序排序，则不做任何事情。  </span></div><div class="line">            <span class="keyword">if</span> (lm.accessOrder) &#123;  </div><div class="line">                lm.modCount++;  </div><div class="line">                <span class="comment">//移除当前访问的Entry  </span></div><div class="line">                remove();  </div><div class="line">                <span class="comment">//将当前访问的Entry插入到链表的尾部  </span></div><div class="line">                addBefore(lm.header);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;  </div><div class="line">            remove();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//迭代器  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;  </div><div class="line">    Entry&lt;K,V&gt; nextEntry    = header.after;  </div><div class="line">    Entry&lt;K,V&gt; lastReturned = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * The modCount value that the iterator believes that the backing </div><div class="line">     * List should have.  If this expectation is violated, the iterator </div><div class="line">     * has detected concurrent modification. </div><div class="line">     */  </div><div class="line">    <span class="keyword">int</span> expectedModCount = modCount;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;  </div><div class="line">            <span class="keyword">return</span> nextEntry != header;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();  </div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();  </div><div class="line">  </div><div class="line">            LinkedHashMap.<span class="keyword">this</span>.remove(lastReturned.key);  </div><div class="line">            lastReturned = <span class="keyword">null</span>;  </div><div class="line">            expectedModCount = modCount;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//从head的下一个节点开始迭代  </span></div><div class="line">    <span class="function">Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)  </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();  </div><div class="line">            <span class="keyword">if</span> (nextEntry == header)  </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();  </div><div class="line">  </div><div class="line">            Entry&lt;K,V&gt; e = lastReturned = nextEntry;  </div><div class="line">            nextEntry = e.after;  </div><div class="line">            <span class="keyword">return</span> e;  </div><div class="line">    &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//key迭代器  </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">LinkedHashIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextEntry().getKey(); &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//value迭代器  </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">LinkedHashIterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextEntry().value; &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//Entry迭代器  </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">LinkedHashIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;  </div><div class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextEntry(); &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// These Overrides alter the behavior of superclass view iterator() methods  </span></div><div class="line">    <span class="function">Iterator&lt;K&gt; <span class="title">newKeyIterator</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();   &#125;  </div><div class="line">    <span class="function">Iterator&lt;V&gt; <span class="title">newValueIterator</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator(); &#125;  </div><div class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator() &#123; <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator(); &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="comment">//覆写HashMap中的addEntry方法，LinkedHashmap并没有覆写HashMap中的put方法，  </span></div><div class="line">    <span class="comment">//而是覆写了put方法所调用的addEntry方法和recordAccess方法，  </span></div><div class="line">    <span class="comment">//put方法在插入的key已存在的情况下，会调用recordAccess方法，  </span></div><div class="line">    <span class="comment">//在插入的key不存在的情况下，要调用addEntry插入新的Entry  </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;  </div><div class="line">        <span class="comment">//创建新的Entry，并插入到LinkedHashMap中  </span></div><div class="line">        createEntry(hash, key, value, bucketIndex);  </div><div class="line">  </div><div class="line">        <span class="comment">//双向链表的第一个有效节点（header后的那个节点）为近期最少使用的节点  </span></div><div class="line">        Entry&lt;K,V&gt; eldest = header.after;  </div><div class="line">        <span class="comment">//如果有必要，则删除掉该近期最少使用的节点，  </span></div><div class="line">        <span class="comment">//这要看对removeEldestEntry的覆写,由于默认为false，因此默认是不做任何处理的。  </span></div><div class="line">        <span class="keyword">if</span> (removeEldestEntry(eldest)) &#123;  </div><div class="line">            removeEntryForKey(eldest.key);  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            <span class="comment">//扩容到原来的2倍  </span></div><div class="line">            <span class="keyword">if</span> (size &gt;= threshold)  </div><div class="line">                resize(<span class="number">2</span> * table.length);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;  </div><div class="line">        <span class="comment">//创建新的Entry，并将其插入到数组对应槽的单链表的头结点处，这点与HashMap中相同  </span></div><div class="line">        HashMap.Entry&lt;K,V&gt; old = table[bucketIndex];  </div><div class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, old);  </div><div class="line">        table[bucketIndex] = e;  </div><div class="line">        <span class="comment">//每次插入Entry时，都将其移到双向链表的尾部，  </span></div><div class="line">        <span class="comment">//这便会按照Entry插入LinkedHashMap的先后顺序来迭代元素，  </span></div><div class="line">        <span class="comment">//同时，新put进来的Entry是最近访问的Entry，把其放在链表末尾 ，符合LRU算法的实现  </span></div><div class="line">        e.addBefore(header);  </div><div class="line">        size++;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//该方法是用来被覆写的，一般如果用LinkedHashmap实现LRU算法，就要覆写该方法，  </span></div><div class="line">    <span class="comment">//比如可以将该方法覆写为如果设定的内存已满，则返回true，这样当再次向LinkedHashMap中put  </span></div><div class="line">    <span class="comment">//Entry时，在调用的addEntry方法中便会将近期最少使用的节点删除掉（header后的那个节点）。  </span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="几点总结-6"><a href="#几点总结-6" class="headerlink" title="几点总结"></a>几点总结</h2><p>关于LinkedHashMap的源码，给出以下几点比较重要的总结：</p>
<ol>
<li>从源码中可以看出，LinkedHashMap中加入了一个head头结点，将所有插入到该LinkedHashMap中的Entry按照插入的先后顺序依次加入到以head为头结点的双向循环链表的尾部。<br> <img src="/uploads/list2.jpg" alt=""><br> <img src="/uploads/list1.jpg" alt=""><br>实际上就是HashMap和LinkedList两个集合类的存储结构的结合。在LinkedHashMapMap中，所有put进来的Entry都保存在如第一个图所示的哈希表中，但它又额外定义了一个以head为头结点的空的双向循环链表，每次put进来Entry，除了将其保存到对哈希表中对应的位置上外，还要将其插入到双向循环链表的尾部。</li>
<li>LinkedHashMap由于继承自HashMap，因此它具有HashMap的所有特性，同样允许key和value为null。</li>
<li>注意源码中的accessOrder标志位，当它false时，表示双向链表中的元素按照Entry插入LinkedHashMap到中的先后顺序排序，即每次put到LinkedHashMap中的Entry都放在双向链表的尾部，这样遍历双向链表时，Entry的输出顺序便和插入的顺序一致，这也是默认的双向链表的存储顺序；当它为true时，表示双向链表中的元素按照访问的先后顺序排列，可以看到，虽然Entry插入链表的顺序依然是按照其put到LinkedHashMap中的顺序，但put和get方法均有调用recordAccess方法（put方法在key相同，覆盖原有的Entry的情况下调用recordAccess方法），该方法判断accessOrder是否为true，如果是，则将当前访问的Entry（put进来的Entry或get出来的Entry）移到双向链表的尾部（key不相同时，put新Entry时，会调用addEntry，它会调用creatEntry，该方法同样将新插入的元素放入到双向链表的尾部，既符合插入的先后顺序，又符合访问的先后顺序，因为这时该Entry也被访问了），否则，什么也不做。</li>
<li>注意构造方法，前四个构造方法都将accessOrder设为false，说明默认是按照插入顺序排序的，而第五个构造方法可以自定义传入的accessOrder的值，因此可以指定双向循环链表中元素的排序规则，一般要用LinkedHashMap实现LRU算法，就要用该构造方法，将accessOrder置为true。</li>
<li>LinkedHashMap并没有覆写HashMap中的put方法，而是覆写了put方法中调用的addEntry方法和recordAccess方法，我们回过头来再看下HashMap的put方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将“key-value”添加到HashMap中      </span></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;      </div><div class="line">    <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。      </span></div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)      </div><div class="line">        <span class="keyword">return</span> putForNullKey(value);      </div><div class="line">    <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。      </span></div><div class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());      </div><div class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);      </div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;      </div><div class="line">        Object k;      </div><div class="line">        <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！      </span></div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;      </div><div class="line">            V oldValue = e.value;      </div><div class="line">            e.value = value;      </div><div class="line">            e.recordAccess(<span class="keyword">this</span>);      </div><div class="line">            <span class="keyword">return</span> oldValue;      </div><div class="line">        &#125;      </div><div class="line">    &#125;      </div><div class="line">  </div><div class="line">    <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中      </span></div><div class="line">    modCount++;    </div><div class="line">    <span class="comment">//将key-value添加到table[i]处    </span></div><div class="line">    addEntry(hash, key, value, i);      </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>当要put进来的Entry的key在哈希表中已经在存在时，会调用recordAccess方法，当该key不存在时，则会调用addEntry方法将新的Entry插入到对应槽的单链表的头部。<br>    我们先来看recordAccess方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//覆写HashMap中的recordAccess方法（HashMap中该方法为空），  </span></div><div class="line"><span class="comment">//当调用父类的put方法，在发现插入的key已经存在时，会调用该方法，  </span></div><div class="line"><span class="comment">//调用LinkedHashmap覆写的get方法时，也会调用到该方法，  </span></div><div class="line"><span class="comment">//该方法提供了LRU算法的实现，它将最近使用的Entry放到双向循环链表的尾部，  </span></div><div class="line"><span class="comment">//accessOrder为true时，get方法会调用recordAccess方法  </span></div><div class="line"><span class="comment">//put方法在覆盖key-value对时也会调用recordAccess方法  </span></div><div class="line"><span class="comment">//它们导致Entry最近使用，因此将其移到双向链表的末尾  </span></div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;  </div><div class="line">          LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;  </div><div class="line">    <span class="comment">//如果链表中元素按照访问顺序排序，则将当前访问的Entry移到双向循环链表的尾部，  </span></div><div class="line">    <span class="comment">//如果是按照插入的先后顺序排序，则不做任何事情。  </span></div><div class="line">          <span class="keyword">if</span> (lm.accessOrder) &#123;  </div><div class="line">              lm.modCount++;  </div><div class="line">        <span class="comment">//移除当前访问的Entry  </span></div><div class="line">              remove();  </div><div class="line">        <span class="comment">//将当前访问的Entry插入到链表的尾部  </span></div><div class="line">              addBefore(lm.header);  </div><div class="line">          &#125;  </div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<pre><code>该方法会判断accessOrder是否为true，如果为true，它会将当前访问的Entry（在这里指put进来的Entry）移动到双向循环链表的尾部，从而实现双向链表中的元素按照访问顺序来排序（最近访问的Entry放到链表的最后，这样多次下来，前面就是最近没有被访问的元素，在实现、LRU算法时，当双向链表中的节点数达到最大值时，将前面的元素删去即可，因为前面的元素是最近最少使用的），否则什么也不做。
再来看addEntry方法：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//覆写HashMap中的addEntry方法，LinkedHashmap并没有覆写HashMap中的put方法，  </span></div><div class="line"><span class="comment">//而是覆写了put方法所调用的addEntry方法和recordAccess方法，  </span></div><div class="line"><span class="comment">//put方法在插入的key已存在的情况下，会调用recordAccess方法，  </span></div><div class="line"><span class="comment">//在插入的key不存在的情况下，要调用addEntry插入新的Entry  </span></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;  </div><div class="line">    <span class="comment">//创建新的Entry，并插入到LinkedHashMap中  </span></div><div class="line">       createEntry(hash, key, value, bucketIndex);  </div><div class="line">  </div><div class="line">       <span class="comment">//双向链表的第一个有效节点（header后的那个节点）为近期最少使用的节点  </span></div><div class="line">       Entry&lt;K,V&gt; eldest = header.after;  </div><div class="line">    <span class="comment">//如果有必要，则删除掉该近期最少使用的节点，  </span></div><div class="line">    <span class="comment">//这要看对removeEldestEntry的覆写,由于默认为false，因此默认是不做任何处理的。  </span></div><div class="line">       <span class="keyword">if</span> (removeEldestEntry(eldest)) &#123;  </div><div class="line">           removeEntryForKey(eldest.key);  </div><div class="line">       &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="comment">//扩容到原来的2倍  </span></div><div class="line">           <span class="keyword">if</span> (size &gt;= threshold)  </div><div class="line">               resize(<span class="number">2</span> * table.length);  </div><div class="line">       &#125;  </div><div class="line">   &#125;  </div><div class="line">  </div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;  </div><div class="line">    <span class="comment">//创建新的Entry，并将其插入到数组对应槽的单链表的头结点处，这点与HashMap中相同  </span></div><div class="line">       HashMap.Entry&lt;K,V&gt; old = table[bucketIndex];  </div><div class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, old);  </div><div class="line">       table[bucketIndex] = e;  </div><div class="line">    <span class="comment">//每次插入Entry时，都将其移到双向链表的尾部，  </span></div><div class="line">    <span class="comment">//这便会按照Entry插入LinkedHashMap的先后顺序来迭代元素，  </span></div><div class="line">    <span class="comment">//同时，新put进来的Entry是最近访问的Entry，把其放在链表末尾 ，符合LRU算法的实现  </span></div><div class="line">       e.addBefore(header);  </div><div class="line">       size++;  </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<pre><code>同样是将新的Entry插入到table中对应槽所对应单链表的头结点中，但可以看出，在createEntry中，同样把新put进来的Entry插入到了双向链表的尾部，从插入顺序的层面来说，新的Entry插入到双向链表的尾部，可以实现按照插入的先后顺序来迭代Entry，而从访问顺序的层面来说，新put进来的Entry又是最近访问的Entry，也应该将其放在双向链表的尾部。
上面还有个removeEldestEntry方法，该方法如下：
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//该方法是用来被覆写的，一般如果用LinkedHashmap实现LRU算法，就要覆写该方法，  </span></div><div class="line">    <span class="comment">//比如可以将该方法覆写为如果设定的内存已满，则返回true，这样当再次向LinkedHashMap中put  </span></div><div class="line">    <span class="comment">//Entry时，在调用的addEntry方法中便会将近期最少使用的节点删除掉（header后的那个节点）。  </span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>该方法默认返回false，我们一般在用LinkedHashMap实现LRU算法时，要覆写该方法，一般的实现是，当设定的内存（这里指节点个数）达到最大值时，返回true，这样put新的Entry（该Entry的key在哈希表中没有已经存在）时，就会调用removeEntryForKey方法，将最近最少使用的节点删除（head后面的那个节点，实际上是最近没有使用）。
</code></pre><ol>
<li><p>LinkedHashMap覆写了HashMap的get方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//覆写HashMap中的get方法，通过getEntry方法获取Entry对象。  </span></div><div class="line"><span class="comment">//注意这里的recordAccess方法，  </span></div><div class="line"><span class="comment">//如果链表中元素的排序规则是按照插入的先后顺序排序的话，该方法什么也不做，  </span></div><div class="line"><span class="comment">//如果链表中元素的排序规则是按照访问的先后顺序排序的话，则将e移到链表的末尾处。  </span></div><div class="line">   <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;  </div><div class="line">       Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)getEntry(key);  </div><div class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)  </div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">       e.recordAccess(<span class="keyword">this</span>);  </div><div class="line">       <span class="keyword">return</span> e.value;  </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p> 先取得Entry，如果不为null，一样调用recordAccess方法，上面已经说得很清楚，这里不在多解释了。</p>
</li>
<li><p>最后说说LinkedHashMap是如何实现LRU的。首先，当accessOrder为true时，才会开启按访问顺序排序的模式，才能用来实现LRU算法。我们可以看到，无论是put方法还是get方法，都会导致目标Entry成为最近访问的Entry，因此便把该Entry加入到了双向链表的末尾（get方法通过调用recordAccess方法来实现，put方法在覆盖已有key的情况下，也是通过调用recordAccess方法来实现，在插入新的Entry时，则是通过createEntry中的addBefore方法来实现），这样便把最近使用了的Entry放入到了双向链表的后面，多次操作后，双向链表前面的Entry便是最近没有使用的，这样当节点个数满的时候，删除的最前面的Entry(head后面的那个Entry)便是最近最少使用的Entry。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      集合框架源码剖析
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>玩转HTML5</title>
    <link href="http://yoursite.com/2016/08/27/h5/"/>
    <id>http://yoursite.com/2016/08/27/h5/</id>
    <published>2016-08-27T05:35:25.000Z</published>
    <updated>2016-11-12T04:13:58.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><ol>
<li>HTML</li>
<li>XHTML</li>
<li>CSS</li>
<li>CSS3</li>
<li>JavaScript</li>
<li>JQuery</li>
<li>HTML5</li>
</ol>
<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="HTML5特性"><a href="#HTML5特性" class="headerlink" title="HTML5特性"></a>HTML5特性</h2><h3 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h3><ol>
<li>用于绘画的canvas标签</li>
<li>用于媒介回放的video和audio元素</li>
<li>对本地离线储存的更好支持</li>
<li>新的特殊内容元素<br> 如：article、footer、header、nav、section</li>
<li>新的表单控件<br> 如：calendar、date、time、email、url、search</li>
<li>浏览器的支持<br> Safari、Chrome、Firefox以及Opera包括IE9基本支持了HTML5</li>
</ol>
<h2 id="HTML5元素、属性和格式化"><a href="#HTML5元素、属性和格式化" class="headerlink" title="HTML5元素、属性和格式化"></a>HTML5元素、属性和格式化</h2><h3 id="HTML最基础代码"><a href="#HTML最基础代码" class="headerlink" title="HTML最基础代码"></a>HTML最基础代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- HTML5的声明 --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="HTML5元素"><a href="#HTML5元素" class="headerlink" title="HTML5元素"></a>HTML5元素</h3><ol>
<li>元素指的是从开始标签到结束标签的所有代码</li>
<li>大多数HTML元素可拥有属性</li>
<li>大多数的HTML元素都是可以嵌套的</li>
</ol>
<h4 id="主题内容标签body"><a href="#主题内容标签body" class="headerlink" title="主题内容标签body"></a>主题内容标签<code>body</code></h4><p>一般网页内容均放入此标签组之间<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">设置网页背景颜色</div><div class="line">bgcolor="aquamarine"</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"aquamarine"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">标题位置默认居左，align可以设置标题位置居左居中居右</div><div class="line">align="left"</div><div class="line">align="center"</div><div class="line">align="right"</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="链接-lt-a-gt"><a href="#链接-lt-a-gt" class="headerlink" title="链接&lt;a&gt;"></a>链接<code>&lt;a&gt;</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- </span></div><div class="line"> 默认在当前页面打开新链接，即target="_self";target="_blank"指在新页面打开链接</div><div class="line">target="_self"</div><div class="line">target="_blank"</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.yanghuii.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>杨辉的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 图片链接 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.yanghuii.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/风景.jpg"</span> <span class="attr">width</span>=<span class="string">"100px"</span> <span class="attr">height</span>=<span class="string">"100px"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"tips"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#tips"</span>&gt;</span>跳转到hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="图片-lt-img-gt"><a href="#图片-lt-img-gt" class="headerlink" title="图片&lt;img&gt;"></a>图片<code>&lt;img&gt;</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- alt属性当图片没有显示出来时，会显示出alt的文字 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/风景.jpg"</span> <span class="attr">width</span>=<span class="string">"100px"</span> <span class="attr">height</span>=<span class="string">"100px"</span> <span class="attr">alt</span>=<span class="string">"logo"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="HTML5属性"><a href="#HTML5属性" class="headerlink" title="HTML5属性"></a>HTML5属性</h3><h4 id="常用标签属性"><a href="#常用标签属性" class="headerlink" title="常用标签属性"></a>常用标签属性</h4><p>特定HTML元素属性在上面的HTML元素中贴出</p>
<h4 id="通用属性"><a href="#通用属性" class="headerlink" title="通用属性"></a>通用属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">class   ：规定元素的类名</div><div class="line">id      ：规定元素唯一ID</div><div class="line">style   ：规定元素的样式,一般放在头文件引入css样式</div><div class="line">title   ：规定元素的额外信息</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>杨辉的博客<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"标题1"</span> <span class="attr">class</span>=<span class="string">"标题1"</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="HTML5格式化"><a href="#HTML5格式化" class="headerlink" title="HTML5格式化"></a>HTML5格式化</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">正常文字<span class="tag">&lt;<span class="name">b</span>&gt;</span>定义粗体文字<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">正常文字<span class="tag">&lt;<span class="name">big</span>&gt;</span>定义大号字<span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">正常文字<span class="tag">&lt;<span class="name">em</span>&gt;</span>定义着重文字<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">正常文字<span class="tag">&lt;<span class="name">i</span>&gt;</span>定义斜体字<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">正常文字<span class="tag">&lt;<span class="name">small</span>&gt;</span>定义小号字<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">正常文字<span class="tag">&lt;<span class="name">strong</span>&gt;</span>定义加重语气<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">正常文字<span class="tag">&lt;<span class="name">sub</span>&gt;</span>定义下标字<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">正常文字<span class="tag">&lt;<span class="name">sup</span>&gt;</span>定义上标字<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">正常文字<span class="tag">&lt;<span class="name">ins</span>&gt;</span>定义插入字<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">正常文字<span class="tag">&lt;<span class="name">del</span>&gt;</span>定义删除字<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>效果展示：<br><img src="/uploads/html51.jpg" alt=""></p>
<h2 id="HTML5样式和表格"><a href="#HTML5样式和表格" class="headerlink" title="HTML5样式和表格"></a>HTML5样式和表格</h2><h3 id="HTML样式"><a href="#HTML样式" class="headerlink" title="HTML样式"></a>HTML样式</h3><ol>
<li><p>外部样式表</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">ref</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>内部样式表</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:red&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>内联样式表</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="demo"><a href="#demo" class="headerlink" title="demo:"></a>demo:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/mystyle.css"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-tag">p</span>&#123;</div><div class="line">				<span class="attribute">color</span>:red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span>	</div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.yanghuii.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">style</span>=<span class="string">"color:chartreuse"</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h3><table>
<thead>
<tr>
<th>表格</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;table&gt;</code></td>
<td>定义表格</td>
</tr>
<tr>
<td><code>&lt;caption&gt;</code></td>
<td>定义表格标题</td>
</tr>
<tr>
<td><code>&lt;th&gt;</code></td>
<td>定义表格的表头</td>
</tr>
<tr>
<td><code>&lt;tr&gt;</code></td>
<td>定义表格的行</td>
</tr>
<tr>
<td><code>&lt;td&gt;</code></td>
<td>定义表格的单元</td>
</tr>
<tr>
<td><code>&lt;thead&gt;</code></td>
<td>定义表格的页眉</td>
</tr>
<tr>
<td><code>&lt;tbody&gt;</code></td>
<td>定义表格的主体</td>
</tr>
<tr>
<td><code>&lt;tfoot&gt;</code></td>
<td>定义表格的页脚</td>
</tr>
<tr>
<td><code>&lt;col&gt;</code></td>
<td>定义表格的列属性</td>
</tr>
</tbody>
</table>
<h4 id="各种形式的表格"><a href="#各种形式的表格" class="headerlink" title="各种形式的表格"></a>各种形式的表格</h4><h5 id="没有边框的表格"><a href="#没有边框的表格" class="headerlink" title="没有边框的表格"></a>没有边框的表格</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="表格中的表头-th"><a href="#表格中的表头-th" class="headerlink" title="表格中的表头(th)"></a>表格中的表头(th)</h5><p>表格中的表头有着重效果(字体加黑加粗)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>单元格3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="带有标题的表格caption"><a href="#带有标题的表格caption" class="headerlink" title="带有标题的表格caption"></a>带有标题的表格caption</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="表格内的标签"><a href="#表格内的标签" class="headerlink" title="表格内的标签"></a>表格内的标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">				</div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="单元格边距cellpadding"><a href="#单元格边距cellpadding" class="headerlink" title="单元格边距cellpadding"></a>单元格边距cellpadding</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">cellpadding</span>=<span class="string">"10px"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="单元格间距cellspacing"><a href="#单元格间距cellspacing" class="headerlink" title="单元格间距cellspacing"></a>单元格间距cellspacing</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">cellspacing</span>=<span class="string">"10px"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="表格内的背景颜色和图像"><a href="#表格内的背景颜色和图像" class="headerlink" title="表格内的背景颜色和图像"></a>表格内的背景颜色和图像</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- bgcolor是给单元格添加背景颜色，也可以添加图片:background="img/风景.jpg"; --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">bgcolor</span>=<span class="string">"#FFFF00"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="跨行跨列单元格"><a href="#跨行跨列单元格" class="headerlink" title="跨行跨列单元格"></a>跨行跨列单元格</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- colspan="2"跨2行;rowspan="2"跨2列 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> &gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="HTML5列表、块、布局和表单"><a href="#HTML5列表、块、布局和表单" class="headerlink" title="HTML5列表、块、布局和表单"></a>HTML5列表、块、布局和表单</h2><h3 id="HTML列表"><a href="#HTML列表" class="headerlink" title="HTML列表"></a>HTML列表</h3><ol>
<li><p>无序列表<br> 使用标签：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    属性：disc、cricle、square</div><div class="line">2. 有序列表</div><div class="line">    使用标签：```&lt;ol&gt;、&lt;li&gt;</div></pre></td></tr></table></figure></p>
<p> 属性：A、a、I、i、start</p>
</li>
<li>嵌套列表<br> 使用标签：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">4. 自定义列表</div><div class="line">    使用标签：```&lt;dl&gt;、&lt;dt&gt;、&lt;dd&gt;</div></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 无序列表 默认type为disc,实体圆。cricle为空心圆。square为方块--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"disc"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 有序列表 默认为数字。A为ABCD，a为abcd，I为大写罗马数字，i为小写罗马数字，start代表从几开始--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"I"</span> <span class="attr">start</span>=<span class="string">"10"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 嵌套列表 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>动物<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">li</span>&gt;</span>猫<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">li</span>&gt;</span>狗<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="HTML块"><a href="#HTML块" class="headerlink" title="HTML块"></a>HTML块</h3><ol>
<li>HTML块元素<br> 块元素在显示时，通常会以新行开始，如：<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>ul</code></li>
<li>HTML内联元素<br> 内联元素通常不会以新行开始，如：<code>&lt;b&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code></li>
<li>HTML<code>div</code>元素<br> <code>&lt;div&gt;</code>元素也被称为块元素，其主要是组合HTML元素的容器</li>
<li>HTML<code>&lt;span&gt;</code>元素<br> <code>&lt;span&gt;</code>元素是内联元素，可作为文本的容器</li>
</ol>
<h3 id="HTML布局"><a href="#HTML布局" class="headerlink" title="HTML布局"></a>HTML布局</h3><ol>
<li>使用<code>&lt;div&gt;</code>元素布局</li>
<li>使用<code>&lt;table&gt;</code>元素布局</li>
</ol>
<h3 id="HTML5表单"><a href="#HTML5表单" class="headerlink" title="HTML5表单"></a>HTML5表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">			用户名：</div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">			密码：</div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">			你喜欢的水果有？</div><div class="line">			<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">			苹果<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span></div><div class="line">			西红柿<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span></div><div class="line">			香蕉<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">			请选择您的性别:</div><div class="line">			男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span></div><div class="line">			女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">			下拉框</div><div class="line">			<span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span>/&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交确定"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"30"</span> &gt;</span>文本域<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果：<br><img src="/uploads/html52.jpg" alt=""></p>
<h2 id="HTML框架"><a href="#HTML框架" class="headerlink" title="HTML框架"></a>HTML框架</h2><h3 id="内联框架iframe"><a href="#内联框架iframe" class="headerlink" title="内联框架iframe"></a>内联框架<code>iframe</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"index03.html"</span> <span class="attr">width</span>=<span class="string">"600px"</span> <span class="attr">height</span>=<span class="string">"600px"</span>&gt;</span></div><div class="line">			</div><div class="line">		<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="HTML实体-gt-lt-amp"><a href="#HTML实体-gt-lt-amp" class="headerlink" title="HTML实体(&gt;&lt;&amp;)"></a>HTML实体(<code>&gt;&lt;&amp;</code>)</h3><table>
<thead>
<tr>
<th>表格</th>
<th>描述</th>
<th>实体名称</th>
<th>实体编号</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&quot;</code></td>
<td>quotation mark</td>
<td><code>&amp;quot;</code></td>
<td><code>&quot;</code></td>
</tr>
<tr>
<td><code>&#39;</code></td>
<td>apostrophe</td>
<td><code>&amp;apos;</code></td>
<td><code>&#39;</code></td>
</tr>
<tr>
<td><code>&amp;</code></td>
<td>ampersand</td>
<td><code>&amp;amp;</code></td>
<td><code>&amp;</code></td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>less-than</td>
<td><code>&amp;lt;</code></td>
<td><code>&lt;</code></td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>greater-than</td>
<td><code>&amp;gt;</code></td>
<td><code>&gt;</code></td>
</tr>
</tbody>
</table>
<h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="CSS3-入门基础"><a href="#CSS3-入门基础" class="headerlink" title="CSS3 入门基础"></a>CSS3 入门基础</h2><p>引入CSS文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/mystyle.css"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>background-attachment</code></td>
<td>背景图像是否固定或者随着页面的其余部分滚动</td>
<td><code>background-attachment:fixed</code></td>
</tr>
<tr>
<td><code>background-color</code></td>
<td>设置元素的背景颜色</td>
<td><code>background-color:black</code></td>
</tr>
<tr>
<td><code>background-image</code></td>
<td>把图片设置为背景</td>
<td><code>background-image:url(&quot;bg.jpg&quot;)</code></td>
</tr>
<tr>
<td><code>background-position</code></td>
<td>设置背景图片的起始位置</td>
<td><code>background-position:right</code> right/center/top/left/100px 100px/10% 10%</td>
</tr>
<tr>
<td><code>background-repeat</code></td>
<td>设置背景图片是否及如何重复</td>
<td><code>background-repeat:no-repeat</code></td>
</tr>
<tr>
<td><code>background-size</code></td>
<td>规定背景图片的尺寸</td>
<td><code>background-size:1000px 1000px</code></td>
</tr>
</tbody>
</table>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>通过文本属性，可以改变文本的颜色、字符间距、对齐文本、装饰文本、对文本缩进<br>CSS文本效果<br>| 属性 | 描述 | 使用场景 |<br>| —– | —– | —– |<br>| <code>color</code> | <strong>文本颜色</strong> | <code>color:red</code> |<br>| <code>direction</code> | 文本方向 |  |<br>| <code>line-height</code> | <strong>行高</strong> |  |<br>| <code>letter-spacing</code> | 字符间距 |  |<br>| <code>text-align</code> | <strong>对齐元素中的文本</strong> | <code>text-align:right</code> |<br>| <code>text-decoration</code> | 向文本添加修饰 |  |<br>| <code>text-indent</code> | <strong>缩进元素中文本的首行</strong> | <code>text-indent:-2em</code>(-2字符) |<br>| <code>text-transform</code> | 元素中的字母 | <code>text-transform：capitalize/lowercase/uppercase</code> |<br>| <code>unicode-bidi</code> | 设置文本方向 |  |<br>| <code>white-space</code> | 元素中空白的处理方式 |  |<br>| <code>word-spacing</code> | 字间距 |  |<br>注：capitalize(首字母大写)/lowercase(全小写)/uppercase(全大写)<br>CSS3文本效果<br>| 属性 | 描述 | 使用场景 |<br>| —– | —– | —– |<br>| <code>text-shadow</code> | 向文本添加阴影 | <code>text-shadow:5px 5px 5px #FF0000</code> |<br>| <code>text-wrap</code> | 规定文本的换行规则 | <code>width:100px;text-wrap:normal</code> |<br>注：text-shadow:5px 5px 5px #FF0000的各参数为：背景距当前文本左边距离、背景距当前文本上方距离、清晰度设计、背景颜色</p>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>CSS字体属性定义文本的字体系列、大小、加粗、风格和变形<br>CSS字体<br>| 属性 | 描述 | 使用场景 |<br>| —– | —– | —– |<br>| <code>font-family</code> | 设置字体系列 | <code>font-family:fantasy</code> |<br>| <code>font-size</code> | 设置字体的尺寸 | <code>font-size:40px</code> |<br>| <code>font-style</code> | 设置字体风格 |  |<br>| <code>font-variant</code> | 以小型大写字体或正常字体显示文本 |  |<br>| <code>font-weight</code> | 设置字体的粗细 |  |</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>CSS链接的4种状态</p>
<pre><code>1. `a:link` 普通的、未被访问的链接
2. `a:visited` 用户已访问的链接
3. `a:hover` 鼠标指针位于链接的上方
4. `a:active` 链接被点击的时刻
</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#FF0000</span></div><div class="line">    text-decoration: none   //去掉链接下划线</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>CSS列表<br>| 属性 | 描述 |<br>| —– | —– |<br>| <code>list-style</code> | 简写列表项 |<br>| <code>list-style-image</code> | 列表项图像 |<br>| <code>list-style-position</code> | 列表标志位置 |<br>| <code>list-style-type</code> | 列表类型 |<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ul li&#123;</div><div class="line">list-style-type:decimal</div><div class="line">list-style-image: url("icon1.gif");</div><div class="line">&#125;</div><div class="line">//ul1为ul的class名</div><div class="line">ul.ul1&#123;</div><div class="line">list-style-position: inside;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>CSS表格属性可以帮助我们极大的改善表格的外观<br>| 属性 | 描述 | 使用场景 |<br>| —– | —– | —– |<br>| <code>border</code> | 表格边框 | <code>border: 1px solid blue</code> |<br>| <code>border-collapse</code> | 折叠边框 | <code>border-collapse: collapse</code> |<br>| <code>width/height</code> | 表格宽高 | <code>width: 400px;height: 400px</code> |</p>
<h3 id="轮廓"><a href="#轮廓" class="headerlink" title="轮廓"></a>轮廓</h3><p>CSS轮廓主要是用来突出元素的作用(轮廓指的是包裹元素的线框)<br>| 属性 | 描述 | 使用场景 |<br>| —– | —– | —– |<br>| <code>outline</code> | 设置轮廓属性 |  |<br>| <code>outline-color</code> | 设置轮廓的颜色 | <code>outline-color: aqua</code> |<br>| <code>outline-style</code> | 设置轮廓的样式 | <code>outline-style: dotted</code>(虚线) |<br>| <code>outline-width</code> | 设置轮廓的宽度 | <code>outline-width: 2px</code> |</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><p>属性大于1个之后,属性之间要用分号隔开</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">h1 &#123;color:red;font-size:14px;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果值大于1个单词,则需要加上引号</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p &#123;font-family:"sans serif";&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>选择器分组</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">h1,h2,h3,h4,h5,h6&#123;color:red;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>继承</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 如果body的子元素有自己的color属性，就用自己的，没有就用body的 --&gt;</span></div><div class="line">body&#123;</div><div class="line">    color:green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>文档的元素就是最基本的选择器<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">h1&#123;</div><div class="line">    color: blue;</div><div class="line">&#125;</div><div class="line"><span class="comment">&lt;!-- 通配符 --&gt;</span></div><div class="line">*&#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="派生选择器"><a href="#派生选择器" class="headerlink" title="派生选择器"></a>派生选择器</h4><p>通过依据元素在其位置的上下文关系来定义样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">li strong&#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>后代选择器可以选择作为某元素后代的元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- p标签里面包含一个strong标签 --&gt;</span></div><div class="line">p strong&#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><p>与后代选择器相比，子元素选择器只能选择作为某元素子元素的元素<br>例如：h1&gt;strong{};<br>后代选择器和子元素选择器的区别可以看<a href="http://jingyan.baidu.com/article/b0b63dbfee7fe64a48307083.html" target="_blank" rel="external">这里</a></p>
<h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><ul>
<li>id选择器可以为标有id的HTML元素指定特定的样式</li>
<li>id选择器以”#”来定义</li>
<li>目前比较常用的方式是id选择器常常用于建立派生选择器</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- id为pid的元素下的a标签单独定义颜色 --&gt;</span></div><div class="line">#pid a&#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul>
<li>类选择器以一个点显示</li>
<li>class也可以用作派生选择器</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.pclass a&#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div><div class="line"><span class="comment">&lt;!-- 多类选择器 p1、p2 --&gt;</span></div><div class="line">.p1.p2&#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul>
<li>对带有指定属性的HTML元素设置样式</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">		    <span class="selector-attr">[title]</span>&#123;</div><div class="line">		        <span class="attribute">color</span>: blue;</div><div class="line">		    &#125;</div><div class="line">		    <span class="selector-attr">[title=te]</span>&#123;</div><div class="line">		        <span class="attribute">color</span>: red;</div><div class="line">		    &#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	    <span class="comment">&lt;!-- 选择器不指定值[title]，值怎么写无所谓 --&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">P</span> <span class="attr">title</span>=<span class="string">"t"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">P</span>&gt;</span></div><div class="line">	    <span class="comment">&lt;!-- 选择器指定值[title=te]，选择对应的效果 --&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">P</span> <span class="attr">title</span>=<span class="string">"te"</span>&gt;</span>属性和值选择器<span class="tag">&lt;/<span class="name">P</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul>
<li>盒子模型的内容范围包括：<br>  margin、border、padding、content部分组成</li>
</ul>
<p><img src="/uploads/html53.jpg" alt=""></p>
<h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><ul>
<li>内边距在content外，边框内</li>
<li>内边距属性<br>| 属性 | 描述 |<br>| —– | —– |<br>| <code>padding</code> | 设置所有边距 |<br>| <code>padding-bottom</code> | 设置底边距 |<br>| <code>padding-left</code> | 设置左边距 |<br>| <code>padding-right</code> | 设置右边距 |<br>| <code>padding-top</code> | 设置上边距 | <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">td&#123;</div><div class="line">    padding: 100px;</div><div class="line">    <span class="comment">&lt;!-- padding:1px(top) 1px(right) 1px(bottom) 1px(left)(顺时针) --&gt;</span></div><div class="line">    padding: 10px 10px 10px 10px;</div><div class="line">    padding-top: 100px;</div><div class="line">    padding-right: 100px;</div><div class="line">    padding-bottom: 100px;</div><div class="line">    padding-left: 100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><ul>
<li>我们可以创建出效果出色的边框，并且可以应用于任何元素</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>border-style</code></td>
<td>边框的样式，定义了10个不同的非继承样式，包括none</td>
</tr>
<tr>
<td><code>border-top/left/right/bottom-style</code></td>
<td>边框的单边样式</td>
</tr>
<tr>
<td><code>border-width</code></td>
<td>边框的宽度</td>
</tr>
<tr>
<td><code>border-top/left/right/bottom-width</code></td>
<td>边框单边的宽度</td>
</tr>
<tr>
<td><code>border-color</code></td>
<td>边框的颜色</td>
</tr>
<tr>
<td><code>border-top/left/right/bottom-color</code></td>
<td>边框单边的颜色</td>
</tr>
<tr>
<td><code>border-radius</code></td>
<td>圆角边框(CSS3边框)</td>
</tr>
<tr>
<td><code>box-shadow</code></td>
<td>边框阴影(CSS3边框)</td>
</tr>
<tr>
<td><code>border-image</code></td>
<td>边框图片(CSS3边框)</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">p&#123;</div><div class="line">    border-style: dotted;</div><div class="line">    border-top-width: 10px;</div><div class="line">    border-color: red;</div><div class="line">    border-radius： 10px;</div><div class="line">    <span class="comment">&lt;!-- 4个属性分别是：右，下，透明度，颜色 --&gt;</span></div><div class="line">    box-shadow: 10px 10px 5px red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><ul>
<li>围绕在内容边框的区域就是外边距，外边距默认为透明区域</li>
<li>外边距接受任何长度单位、百分数值</li>
<li>外边距合并：<br>  外边距合并就是一个叠加的概念，遵循多的那一部分(2个盒子的margin都是100px，那么它们的外边距距离就是100px，若是一个50，一个100，距离也是100px(遵循多的一部分))</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>margin</code></td>
<td>设置所有的外边距</td>
</tr>
<tr>
<td><code>margin-top/left/right/bottom</code></td>
<td>设置单边外边距</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- auto是居中的意思 --&gt;</span></div><div class="line">margin:0 auto;</div><div class="line"><span class="comment">&lt;!-- margin:1px(top) 1px(right) 1px(bottom) 1px(left)(顺时针) --&gt;</span></div><div class="line">margin: 10px 10px 10px 10px;</div></pre></td></tr></table></figure>
<h2 id="定位和浮动"><a href="#定位和浮动" class="headerlink" title="定位和浮动"></a>定位和浮动</h2><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li>CSS定位：<br>  改变元素在页面上的位置</li>
<li>CSS定位机制：<br>  普通流：元素按照其在HTML中的位置顺序决定排布的过程<br>  浮动<br>  绝对布局</li>
<li>CSS定位属性<br>| 属性 | 描述 |<br>| —– | —– |<br>| <code>position</code> | 把元素放在一个静态的、相对的、绝对的、或固定的位置中 |<br>| <code>top/left/right/bottom</code> | 元素向上/左/右/下的偏移量 |<br>| <code>overflow</code> | 设置元素溢出其区域发生的事情 |<br>| <code>clip</code> | 设置元素显示的形状 |<br>| <code>vertical-align</code> | 设置元素垂直对齐方式 |<br>| <code>z-index</code> | 设置元素的堆叠顺序(看哪个div在上面) |<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="xml"></span></div><div class="line">		    #position&#123;</div><div class="line">		        width: 100px;</div><div class="line">		        height: 100px;</div><div class="line">		        background-color: blue;</div><div class="line">		        <span class="comment">&lt;!-- 包括static/relative/absolute/fixed --&gt;</span></div><div class="line">		        position: relative;</div><div class="line">		        left: 10px;</div><div class="line">		    &#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"position"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><ul>
<li>浮动<br>  float属性可用的值：<br>  left/right：元素向左/右移动<br>  none：元素不浮动<br>  inherit：从父级继承浮动属性</li>
<li>clear属性：<br>  去掉浮动属性(包括继承来的属性)<br>  clear属性值：<pre><code>left、right：去掉元素向左、向右浮动
both：左右两侧均去掉浮动
inherit：从父级继承来clear的值
</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#position&#123;</div><div class="line">   width: 100px;</div><div class="line">   height: 100px;</div><div class="line">   background-color: blue;</div><div class="line">   <span class="comment">&lt;!-- 向左浮动 --&gt;</span></div><div class="line">   float: left;</div><div class="line">   <span class="comment">&lt;!-- 去掉向左的浮动 --&gt;</span></div><div class="line">   clear: left;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="CSS常用操作"><a href="#CSS常用操作" class="headerlink" title="CSS常用操作"></a>CSS常用操作</h2><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><ul>
<li>使用margin属性进行水平对齐<code>margin: 0 auto</code>(设置居中)</li>
<li>使用position属性进行左右对齐</li>
<li>使用float属性进行左右对齐</li>
</ul>
<h3 id="尺寸操作"><a href="#尺寸操作" class="headerlink" title="尺寸操作"></a>尺寸操作</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>height</code></td>
<td>设置元素高度</td>
</tr>
<tr>
<td><code>line-height</code></td>
<td>设置行高</td>
</tr>
<tr>
<td><code>max-height</code></td>
<td>设置元素最大高度</td>
</tr>
<tr>
<td><code>min-height</code></td>
<td>设置元素最小高度</td>
</tr>
<tr>
<td><code>width</code></td>
<td>设置元素宽度</td>
</tr>
<tr>
<td><code>max-width</code></td>
<td>设置元素最大宽度</td>
</tr>
<tr>
<td><code>min-width</code></td>
<td>设置元素最小宽度</td>
</tr>
</tbody>
</table>
<h3 id="分类操作"><a href="#分类操作" class="headerlink" title="分类操作"></a>分类操作</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clear</code></td>
<td>设置一个元素的侧面是否允许其他的浮动元素</td>
</tr>
<tr>
<td><code>cursor</code></td>
<td>规定当指向某元素之上时显示的指针类型</td>
</tr>
<tr>
<td><code>display</code></td>
<td>设置是否及如何显示元素</td>
</tr>
<tr>
<td><code>float</code></td>
<td>定义元素在哪个方向浮动</td>
</tr>
<tr>
<td><code>position</code></td>
<td>把元素放置到一个静态的、相对的、绝对的、固定的位置</td>
</tr>
<tr>
<td><code>visibility</code></td>
<td>设置元素是否可见或不可见</td>
</tr>
</tbody>
</table>
<h2 id="页面特效"><a href="#页面特效" class="headerlink" title="页面特效"></a>页面特效</h2><h3 id="CSS3瀑布流效果"><a href="#CSS3瀑布流效果" class="headerlink" title="CSS3瀑布流效果"></a>CSS3瀑布流效果</h3><p>mark</p>
<h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><ul>
<li>JavaScript是互联网上最流行的脚本语言，这门语言可用于web和HTML，更可广泛用于服务器、pc端、移动端。</li>
<li>JavaScript脚本语言：<br>  JavaScript是一种轻量级的编程语言<br>  JavaScript是可插入HTML页面的编程代码<br>  JavaScript插入HTML页面后，可由所有的浏览器执行</li>
</ul>
<h3 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h3><ul>
<li>JavaScript用法:<br>  HTML中的脚本必须位于<code>&lt;script&gt;&lt;/script&gt;</code>标签之间<br>  脚本可被放置在HTML页面的<code>&lt;body&gt;</code>和<code>&lt;head&gt;</code>部分中</li>
<li>JavaScript标签<br>  在HTML中插入JavaScript,使用<code>&lt;script&gt;</code>标签<br>  在<code>&lt;script&gt;&lt;/script&gt;</code>之间书写代码</li>
<li>JavaScript使用限制：<br>  在HTML中，不限制脚本数量<br>  通常会把脚本放置于<code>&lt;head&gt;</code>中,以不干扰页面内容</li>
</ul>
<p>demo：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">	&lt;meta charset="UTF-8"/&gt;</div><div class="line">	&lt;script src="test.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;</div><div class="line">	&lt;script type="text/javascript"&gt;</div><div class="line">		addEventListener("DOMContentLoaded",function () &#123;</div><div class="line">			finishLesson(1)</div><div class="line">		&#125;)</div><div class="line">	&lt;/script&gt;</div><div class="line">	&lt;link rel="stylesheet" type="text/css" href="test.css"/&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure></p>
<h2 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h2><ul>
<li>JavaScript语句：<br>  JavaScript语句向浏览器发出的命令。语句的作用是告诉浏览器该做什么。</li>
<li>分号<br>  语句之间的分割是分号(;)<br>  注意：分号是可选项，有时候看到不以分号隔开的。</li>
<li>JavaScript代码:<br>  按照编写顺序依次执行</li>
<li>标识符:<br>  JavaScript标识符必须以字母、下划线或美元符号开始<br>  JavaScript关键字</li>
<li>JavaScript对大小写敏感</li>
<li>JavaScript注释<br>  单行注释://<br>  多行注释:/**/</li>
</ul>
<h3 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h3><ol>
<li>字符串(String)</li>
<li>数字(Number)</li>
<li>布尔(Boolean)</li>
<li>数组(Array)</li>
<li>对象(Object)</li>
<li>空(null)</li>
<li>未定义</li>
<li>可以通过赋值为null的方式清除变量</li>
<li><strong>所有的变量都是通过var来声明的</strong></li>
</ol>
<h3 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h3><ul>
<li><p>定义函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;</div><div class="line">    函数体; (代码块)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注意:JavaScript对大小写十分敏感，所以这里的function必须小写。在函数调用时，也必须按照函数的相同名称来调用函数</p>
</li>
<li>调用函数：<br>  函数在定义好之后，不能自动执行，需要进行调用</li>
<li>调用方式：<br>  1).在<code>&lt;script&gt;</code>标签内调用：<code>demo();</code><br>  2).在HTML文件中调用：<code>onclick=&quot;demo();&quot;</code></li>
<li>函数的返回值<br>  通过return语句可以将函数的值返回给调用他的地方</li>
<li>全局变量：在函数外</li>
<li>局部变量：在方法内</li>
</ul>
<h3 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h3><p>try{<br>    发生异常的代码块;<br>}catch(err){<br>    错误信息处理;<br>}<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            alert(str);</div><div class="line">        &#125;<span class="keyword">catch</span>(err)&#123;</div><div class="line">            alert(err);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    demo();</div><div class="line">    <span class="comment">//这个可以用于input框中是否有输入值的情况</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">var</span> e = <span class="built_in">document</span>.getElementById(<span class="string">"txt"</span>).value;</div><div class="line">            <span class="keyword">if</span>(e==<span class="string">""</span>)&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="string">"请输入"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span>(err)&#123;</div><div class="line">            alert(err);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="JavaScript事件"><a href="#JavaScript事件" class="headerlink" title="JavaScript事件"></a>JavaScript事件</h3><ul>
<li>什么是事件？<br>  事件是可以被JavaScript侦测到的行为</li>
</ul>
<table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>onclick</code></td>
<td>单击事件</td>
</tr>
<tr>
<td><code>onmouseover</code></td>
<td>鼠标经过事件</td>
</tr>
<tr>
<td><code>onmouseout</code></td>
<td>鼠标移出事件</td>
</tr>
<tr>
<td><code>onchange</code></td>
<td>文本内容改变事件</td>
</tr>
<tr>
<td><code>onselect</code></td>
<td>文本框选中事件</td>
</tr>
<tr>
<td><code>onfocus</code></td>
<td>光标聚集事件</td>
</tr>
<tr>
<td><code>onblur</code></td>
<td>移开光标事件</td>
</tr>
<tr>
<td><code>onload</code></td>
<td>网页加载事件</td>
</tr>
<tr>
<td><code>onunload</code></td>
<td>关闭网页事件</td>
</tr>
</tbody>
</table>
<h1 id="HTML5新特性-1"><a href="#HTML5新特性-1" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h1><h2 id="HTML5音频视频"><a href="#HTML5音频视频" class="headerlink" title="HTML5音频视频"></a>HTML5音频视频</h2><h3 id="音频播放"><a href="#音频播放" class="headerlink" title="音频播放"></a>音频播放</h3><ul>
<li>Audio音频<br>  HTML5 提供了播放音频文件的标准</li>
<li>control(控制器)<br>  control 属性供添加播放、暂停和音量控件</li>
<li>标签<br>  <code>&lt;audio&gt;</code>定义声音<br>  <code>&lt;source&gt;</code>规定多媒体资源,可以是多个</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>播放音频<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 加上controls="controls" 可以显示播放条--&gt;</span></div><div class="line">		<span class="comment">&lt;!--&lt;audio src="raw/董小姐.mp3" controls="controls"&gt;您的浏览器不支持&lt;/audio&gt; --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"clickA()"</span>&gt;</span>播放/暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"audio"</span> <span class="attr">src</span>=<span class="string">"raw/董小姐.mp3"</span> &gt;</span>您的浏览器不支持<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">"audio"</span>);</div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">clickA</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">if</span>(a.paused)&#123;<span class="comment">//如果暂停</span></div><div class="line">					a.play();</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					a.pause();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h3><h4 id="视频编解码工具"><a href="#视频编解码工具" class="headerlink" title="视频编解码工具"></a>视频编解码工具</h4><ul>
<li>FFmpeg</li>
<li>官方网址:www.ffmpeg.org 点击<a href="http://www.ffmpeg.org" target="_blank" rel="external">这里</a> </li>
<li>下载流程：进入网站–&gt;Download–&gt;Windows–&gt;Windows builds–&gt;Download FFmpeg<h2 id="HTML5拖放"><a href="#HTML5拖放" class="headerlink" title="HTML5拖放"></a>HTML5拖放</h2><h2 id="HTML5Canvas标签"><a href="#HTML5Canvas标签" class="headerlink" title="HTML5Canvas标签"></a>HTML5Canvas标签</h2><h2 id="HTML5Canvas应用"><a href="#HTML5Canvas应用" class="headerlink" title="HTML5Canvas应用"></a>HTML5Canvas应用</h2><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><h2 id="Web储存"><a href="#Web储存" class="headerlink" title="Web储存"></a>Web储存</h2><h2 id="HTML5-应用缓存与Web-Workers"><a href="#HTML5-应用缓存与Web-Workers" class="headerlink" title="HTML5 应用缓存与Web Workers"></a>HTML5 应用缓存与Web Workers</h2><h2 id="服务器推送事件"><a href="#服务器推送事件" class="headerlink" title="服务器推送事件"></a>服务器推送事件</h2></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	addEventListener(<span class="string">"DOMContentLoaded"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		finishLesson(<span class="number">1</span>)</div><div class="line">	&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      HTML5+CSS3学习
    
    </summary>
    
      <category term="玩转HTML5" scheme="http://yoursite.com/categories/%E7%8E%A9%E8%BD%ACHTML5/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java相关软件安装</title>
    <link href="http://yoursite.com/2016/08/21/installSoftware/"/>
    <id>http://yoursite.com/2016/08/21/installSoftware/</id>
    <published>2016-08-21T11:35:25.000Z</published>
    <updated>2017-08-02T16:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h1><p>eclipse是一个基于Java的开发环境，所以说要在系统中安装eclipse需要先安装Java运行环境(JDK)</p>
<h2 id="Windows7版"><a href="#Windows7版" class="headerlink" title="Windows7版"></a>Windows7版</h2><p>查看JDK是否安装：<br>打开DOS命令行(cmd)，输入:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> java -version</span></div></pre></td></tr></table></figure></p>
<p>如果已经安装会输出相应的版本信息<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version <span class="string">"1.7.0_79"</span></div><div class="line">Java(TM) SE Runtime Environment (build 1.7.0_79-b15)</div><div class="line">Java HotSpot(TM) 64-Bit<span class="built_in"> Server </span>VM (build 24.79-b02, mixed mode)</div></pre></td></tr></table></figure></p>
<p>如果没有安装我们就先安装一下JDK：</p>
<h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><ol>
<li>浏览器中输入java.com，点击免费java下载，网站会根据你所使用的系统版本自动提供适合你系统的Java运行环境。</li>
<li>点击中间的同意并开始免费下载下载和安装Java运行环境</li>
<li>如果你想要下载低版本的JDK（Java8还不是特别稳定）：<br>点击<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="external">这里</a><br><img src="/uploads/installSoftware1.jpg" alt=""></li>
<li>下载完毕后双击运行，可以更改JDK的安装目录，其他的默认下一步</li>
<li>JDK安装完后会自动弹出jre的安装对话框，可以更改jre的安装目录，其他的默认下一步。</li>
<li>安装完毕后，打开cmd，输入：<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> java --version</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>会出现版本信息，说明JDK安装成功！</p>
<h3 id="JDK环境变量配置"><a href="#JDK环境变量配置" class="headerlink" title="JDK环境变量配置"></a>JDK环境变量配置</h3><p>如果用开发工具Myeclipse就不需要设置JDK环境变量,myeclipse自带jdk。<br>而eclipse启动时候会要求path,可以设置path,也可以不设置。<br>不设置的方法是:<br>在eclipse.exe目录里面有一个eclipse.ini文件进行配置<br>比如<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-vm </div><div class="line">C:<span class="symbol">\J</span>ava<span class="symbol">\j</span>re1.6.0<span class="symbol">\b</span>in<span class="symbol">\j</span>avaw.exe</div></pre></td></tr></table></figure></p>
<p>配置环境变量：<br>环境变量分为2种，用户变量(只针对当前用户有效)和系统变量(所有用户)</p>
<ol>
<li>计算机–&gt;属性–&gt;高级系统设置–&gt;高级–&gt;环境变量</li>
<li><p>系统变量–&gt;新建JAVA_HOME，变量值填写JDK的安装目录(本人的是<code>D:\Java\JDK\jdk1.7.0_79</code>)：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME                   <span class="comment">//变量名</span></div><div class="line"><span class="symbol">D:</span>\Java\JDK\jdk1<span class="number">.7</span><span class="number">.0</span>_79     <span class="comment">//变量值</span></div></pre></td></tr></table></figure>
</li>
<li><p>系统变量–&gt;寻找Path变量–&gt;编辑<br>在变量值最后输入(注意原来Path的变量值末尾有没有;号。如果没有，先输入)：</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">%JAVA_HOME%</span><span class="symbol">\b</span>in;<span class="variable">%JAVA_HOME%</span><span class="symbol">\j</span>re<span class="symbol">\b</span>in;</div></pre></td></tr></table></figure>
</li>
<li><p>系统变量–&gt;新建CLASSPATH变量</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CLASSPATH                   <span class="comment">//变量名</span></div><div class="line">.;<span class="meta">%</span>JAVA_HOME<span class="meta">%</span>\lib;<span class="meta">%</span>JAVA_HOME<span class="meta">%</span>\lib\tools.jar;        <span class="comment">//变量值，注意最前面有一点</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="eclipse安装"><a href="#eclipse安装" class="headerlink" title="eclipse安装"></a>eclipse安装</h3><ol>
<li>直接下载免安装版，点击<a href="http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/neonr" target="_blank" rel="external">这里</a>，由于我的电脑是64位的选择64位下载。这个版本需要JDK1.8+支持</li>
<li>如果只需JDK1.7版本支持的eclipse，点击<a href="http://www.eclipse.org/downloads/packages/release/Mars/2" target="_blank" rel="external">这里</a>，选择<code>Eclipse IDE for Java EE Developers</code>，64-bit</li>
<li>下载完成后解压放到指定目录，双击eclipse目录下的eclipse.exe即可运行(免安装)<h3 id="eclipse的配置和优化"><a href="#eclipse的配置和优化" class="headerlink" title="eclipse的配置和优化"></a>eclipse的配置和优化</h3></li>
<li>查看JDK：Window–&gt;Preferences–&gt;Java–&gt;Installed JREs：正是自己下载安装的JDK版本</li>
<li>默认文件编码设置：Window–&gt;Preferences–&gt;General–&gt;Workspace:<br>Text file encoding   修改为UTF-8(默认的是GBK)，然后点击应用(Apply)</li>
<li>取消拼写检查(这个可不做)：Window–&gt;Preferences–&gt;General–&gt;Editors–&gt;Text Editors–&gt;Spelling<br>将<code>Enable spell checking</code>的勾去掉并应用(Apply)</li>
<li>安装插件(可不做)：Help–&gt;Eclipse Marketplace，点击popular(注意下方的Marketplaces为Eclipse Marketplace)，可以看到排行第二的是Eclipse Color Theme 插件(如果不是，在Search中搜索该插件，这是一个用来美化Eclipse编辑器的插件)，点击Install–&gt;Confirm–&gt;accept–&gt;finish–&gt;OK–&gt;Yes；重启Eclipse<br>Eclipse启动之后，Window–&gt;Preferences–&gt;General–&gt;Appearance–&gt;Color Theme：选择一个主题</li>
<li>卸载插件(可不做)：<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">H<span class="function"><span class="title">elp</span>--&gt;</span>E<span class="function"><span class="title">clipse</span> Marketplace--&gt;</span>I<span class="function"><span class="title">nstalled</span>--&gt;</span>Uninstall(在Change按钮上)</div><div class="line"><span class="comment">//第二种做法</span></div><div class="line">H<span class="function"><span class="title">elp</span>--&gt;</span>I<span class="function"><span class="title">nstall</span> New Software--&gt;</span><span class="function"><span class="title">already</span> installed--&gt;</span>Uninstall(点击要卸载的插件)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="在eclipse中配置tomcat"><a href="#在eclipse中配置tomcat" class="headerlink" title="在eclipse中配置tomcat"></a>在eclipse中配置tomcat</h3><ol>
<li>点击<a href="http://tomcat.apache.org/" target="_blank" rel="external">这里</a>，左侧边栏Download–&gt;Tomcat 8–&gt;下载tomcat8.0.36并解压放到指定目录<br><img src="/uploads/installSoftware2.jpg" alt=""></li>
<li>Window–&gt;Preferences–&gt;Server–&gt;Runtime Environments–&gt;add–&gt;Apache–&gt;Apache Tomcat v8.0–&gt;next</li>
<li>Tomcat installation directory–&gt;Browse–&gt;<code>D:\Java\Tomcat\apache-tomcat-8.0.36</code></li>
<li>JRE–&gt;jdk1.7.0_79–&gt;finish–&gt;ok</li>
<li>Window–&gt;Show View–&gt;Servers<br>点击这里，增加Tomcat服务器：<br><img src="/uploads/installSoftware3.jpg" alt=""></li>
<li>Tomcat v8.0–&gt;next–&gt;增加J2EE应用–&gt;finish</li>
<li>启动Tomcat<br><img src="/uploads/installSoftware4.jpg" alt=""></li>
</ol>
<h3 id="在eclipse中构建Maven项目"><a href="#在eclipse中构建Maven项目" class="headerlink" title="在eclipse中构建Maven项目"></a>在eclipse中构建Maven项目</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol>
<li>最新版的eclipse默认已经集成了Maven插件，如果所使用的eclipse没有Maven插件，可以通过EclipseMarketPlace来安装这个插件：<br>打开EclipseMarketPlace–&gt;搜索maven–&gt;找到m2e这个图标–&gt;安装</li>
<li>配置Maven：<br>Window–&gt;Preferences–&gt;Maven–&gt;Installations–&gt;add–&gt;Directory–&gt;<code>D:\Java\Maven\apache-maven-3.3.9</code>–&gt;Finish–&gt;选中我们刚刚添加的Maven，不要用eclipse内置的Maven(EMBEDDED)–&gt;Apply;<br>Window–&gt;Preferences–&gt;Maven–&gt;User Settings–&gt;Global Settings–&gt;Browse–&gt;<code>D:\Java\Maven\apache-maven-3.3.9\conf\settings.xml</code>;其他的两个设置是默认的，其中User Settings在<code>D:\Java\Maven\apache-maven-3.3.9\conf\settings.xml</code>中设置</li>
<li>其他配置(可不操作)：<br>Window–&gt;Preferences–&gt;Maven–&gt;Download Artifact Sources(下载依赖的源码),Download Artifact JavaDoc(下载依赖的JavaDoc)–&gt;Apply–&gt;OK</li>
</ol>
<h4 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h4><ol>
<li>新建项目：<br>New–&gt;Other–&gt;Maven–&gt;Maven Project–&gt;Next–&gt;Next–&gt;选择Artifect Id为<code>maven-archetype-quickstart</code>一项–&gt;Next–&gt;Group Id(com.yh),Artifact Id(mvnstudy)–&gt;finish</li>
<li>设置Run Configurations–&gt;Maven Build–&gt;右键New–&gt;设置Name,Bash directory,Goals–&gt;Apply–&gt;Run<br><img src="/uploads/installSoftware5.jpg" alt=""><br>或者：项目右键–&gt;Run as –&gt;Maven build…–&gt;Goals(package)–&gt;Run</li>
<li>Console窗口中看到BUILD SUCCESS则构建完成(打jar包完成)</li>
<li>导入Maven项目：<br>右键Import–&gt;Import…–&gt;Maven–&gt;Existing Maven Projects–&gt;Next–&gt;选择要导入的Maven项目–&gt;finish</li>
</ol>
<h1 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h1><h1 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h1><h2 id="Windows7版-1"><a href="#Windows7版-1" class="headerlink" title="Windows7版"></a>Windows7版</h2><p>查看<a href="#在eclipse中配置tomcat">这里</a>,下载合适的tomcat包并解压</p>
<h3 id="tomcat目录结构"><a href="#tomcat目录结构" class="headerlink" title="tomcat目录结构"></a>tomcat目录结构</h3><ol>
<li>tomcat的bin目录下存放了windows和linux平台上启动和关闭tomcat的脚本(bat(windows),.sh(linux,mac))</li>
<li>tomcat的conf目录下存放了tomcat服务器的各种配置文件</li>
<li>conf/server.xml：tomcat的全局配置文件</li>
<li>conf/tomcat-users.xml：配置tomcat的用户</li>
<li>conf/web.xml：缺省文件，用于覆盖web应用下的web.xml文件的配置</li>
<li>lib目录存放了tomcat的依赖jar包</li>
<li>logs目录用于存放tomcat执行时生成的日志文件</li>
<li>temp目录用于存放临时文件</li>
<li>webapps目录用于存放web应用</li>
<li>work目录用于存放一些中间文件</li>
</ol>
<h3 id="tomcat的启动"><a href="#tomcat的启动" class="headerlink" title="tomcat的启动"></a>tomcat的启动</h3><p>进入<code>D:\Java\Tomcat\apache-tomcat-8.0.36\bin</code>，双击<code>startup.bat</code>启动tomcat，当cmd窗口出现<code>Server startup in xxx ms</code>时，表示启动成功</p>
<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Windows7版-2"><a href="#Windows7版-2" class="headerlink" title="Windows7版"></a>Windows7版</h2><h3 id="Maven目录结构"><a href="#Maven目录结构" class="headerlink" title="Maven目录结构"></a>Maven目录结构</h3><ol>
<li>bin目录里包含了运行Maven的脚本</li>
<li>boot目录包含了一个jar文件，这个jar文件是创建Maven运行所需要的类加载器的jar文件</li>
<li>conf目录包含一个setting.xml；用来定义Maven的一些行为</li>
<li>lib目录里面是Maven的核心jar文件</li>
</ol>
<h3 id="配置Maven的环境变量"><a href="#配置Maven的环境变量" class="headerlink" title="配置Maven的环境变量"></a>配置Maven的环境变量</h3><p>注：安装maven前请确保已安装JDK并成功配置其环境变量</p>
<ol>
<li>计算机–&gt;属性–&gt;高级系统设置–&gt;高级–&gt;环境变量</li>
<li><p>系统变量–&gt;新建M2_HOME，变量值填写Maven的安装目录(本人的是<code>D:\Java\Maven\apache-maven-3.3.9</code>)：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">M2_HOME                  <span class="comment">//变量名</span></div><div class="line"><span class="symbol">D:</span>\Java\Maven\apache-maven<span class="number">-3.3</span><span class="number">.9</span>    <span class="comment">//变量值</span></div></pre></td></tr></table></figure>
</li>
<li><p>系统变量–&gt;寻找Path变量–&gt;编辑<br>在变量值最后输入(注意原来Path的变量值末尾有没有;号。如果没有，先输入)：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">%<span class="selector-tag">M2_HOME</span></span>%\bin;</div></pre></td></tr></table></figure>
</li>
<li><p>测试Maven配置是否成功：cmd–&gt;mvn -v;如果有maven 版本信息输出则证明配置成功</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Apache Maven <span class="number">3.3</span><span class="number">.9</span> (bb52d8502b132ec0a5a3f4c09453c07478323dc5; <span class="number">2015</span><span class="number">-11</span><span class="number">-11</span><span class="string">T00:</span><span class="number">41</span>:<span class="number">47</span>+<span class="number">08</span>:<span class="number">00</span>)</div><div class="line">Maven <span class="string">home:</span> <span class="string">D:</span>\Java\Maven\apache-maven<span class="number">-3.3</span><span class="number">.9</span></div><div class="line">Java <span class="string">version:</span> <span class="number">1.7</span><span class="number">.0</span>_79, <span class="string">vendor:</span> Oracle Corporation</div><div class="line">Java <span class="string">home:</span> <span class="string">D:</span>\Java\JDK\jdk1<span class="number">.7</span><span class="number">.0</span>_79\jre</div><div class="line">Default <span class="string">locale:</span> zh_CN, platform <span class="string">encoding:</span> GBK</div><div class="line">OS <span class="string">name:</span> <span class="string">"windows 7"</span>, <span class="string">version:</span> <span class="string">"6.1"</span>, <span class="string">arch:</span> <span class="string">"amd64"</span>, <span class="string">family:</span> <span class="string">"windows"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h3><ol>
<li>点击<a href="http://maven.apache.org/" target="_blank" rel="external">这里</a>–&gt;左侧导航栏–&gt;Download–&gt;页面拉倒中下部位–&gt;点击<code>apache-maven-3.3.9-bin.zip</code>下载</li>
<li>下载完成后解压放到指定目录</li>
<li>查看<a href="#配置Maven的环境变量">这里</a>，配置Maven的环境变量</li>
</ol>
<h2 id="Linux版"><a href="#Linux版" class="headerlink" title="Linux版"></a>Linux版</h2><h3 id="使用命令行工具构建Maven项目"><a href="#使用命令行工具构建Maven项目" class="headerlink" title="使用命令行工具构建Maven项目"></a>使用命令行工具构建Maven项目</h3><ol>
<li>安装完成maven后，创建Maven目录，并在Maven目录下打开shell终端</li>
<li><p>执行命令(第一次运行比较慢，因为会下载很多核心的插件)：</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Maven $ mvn archetype:<span class="keyword">generate</span></div></pre></td></tr></table></figure>
</li>
<li><p>输入以下几个属性：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//所属组织的标识输入：com.yh</span></div><div class="line">Define value <span class="keyword">for</span> property <span class="string">'groupId'</span>::com.yh</div><div class="line"><span class="comment">//唯一标识，实际对应项目的名称，输入：mvnstudy</span></div><div class="line">Define value <span class="keyword">for</span> property <span class="string">'artifactId'</span>::mvnstudy</div><div class="line"><span class="comment">//version，package都有默认值，直接entry;确认以上属性配置，输入：Y</span></div><div class="line">Y::Y</div></pre></td></tr></table></figure>
</li>
</ol>
<p>最后出现提示信息，<code>BUILD SUCCESS</code>，说明项目的骨架结构创建完毕了</p>
<ol>
<li>打包<br>进入mvnstudy目录，启动shell终端，执行命令：<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mvnstudy </span>$ <span class="keyword">mvn </span>package</div></pre></td></tr></table></figure>
</li>
</ol>
<p>看到<code>BUILD SUCCESS</code>，说明项目打包成功</p>
<ol>
<li>在mvnstudy目录下多了一个target文件夹，在该文件夹下多了一个jar文件</li>
<li>运行5中多了的jar文件(<code>mvnstudy-1.0-SNAPSHOT.jar</code>)<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvnstudy $ java -cp target/mvnstudy-<span class="number">1.0</span>-SNAPSHOT<span class="selector-class">.jar</span> com<span class="selector-class">.yh</span><span class="selector-class">.App</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>输出<code>Hello World!</code>(之前生成的Maven项目中com.yh/App.java中的main函数为打印Hello World!)</p>
<h2 id="Maven核心概念"><a href="#Maven核心概念" class="headerlink" title="Maven核心概念"></a>Maven核心概念</h2><h3 id="POM概述"><a href="#POM概述" class="headerlink" title="POM概述"></a>POM概述</h3><p>POM是Project Object Model的缩写。项目的属性、依赖、构建配置这些信息都被抽象到项目对象模型里边。</p>
<h4 id="POM组成"><a href="#POM组成" class="headerlink" title="POM组成"></a>POM组成</h4><ol>
<li><p>项目基本信息</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面4项是Maven的坐标，唯一确定一个项目</span></div><div class="line"><span class="params">&lt;groupId&gt;</span>com.yh<span class="params">&lt;/groupId&gt;</span></div><div class="line"><span class="params">&lt;artifactId&gt;</span>mvnstudy<span class="params">&lt;/artifactId&gt;</span></div><div class="line"><span class="params">&lt;version&gt;</span><span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT<span class="params">&lt;/version&gt;</span></div><div class="line"><span class="params">&lt;packaging&gt;</span>jar<span class="params">&lt;/packaging&gt;</span>      <span class="comment">//打包的类型</span></div></pre></td></tr></table></figure>
</li>
<li><p>构建环境</p>
</li>
<li>POM关系</li>
<li>构建设置</li>
</ol>
<h4 id="插件与目标"><a href="#插件与目标" class="headerlink" title="插件与目标"></a>插件与目标</h4><p>一个目标是一个工作单元，插件是一个或多个目标的集合，Maven实质上是一个插件的框架，其实不执行具体的构建任务，这些任务是由插件完成的。<br>例：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn archetype:<span class="keyword">generate</span>      <span class="comment">//执行archetype插件的generate目标</span></div></pre></td></tr></table></figure></p>
<p>调用插件目标的2种方式：</p>
<ol>
<li>将插件目标与生命周期绑定，执行生命周期</li>
<li>直接执行插件目标</li>
</ol>
<p>Maven常用插件：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">maven-archetype-plugins  <span class="comment">//快速生成一个简单的项目骨架</span></div><div class="line">maven-dependency-<span class="keyword">plugin</span> <span class="comment">//帮助分析项目依赖</span></div><div class="line">maven-<span class="keyword">help</span>-<span class="keyword">plugin</span>       <span class="comment">//辅助工具</span></div><div class="line">maven-resources-<span class="keyword">plugin</span>  <span class="comment">//为项目提供更清晰的项目结构</span></div><div class="line">maven-surefire-<span class="keyword">plugin</span>   <span class="comment">//执行单元测试</span></div><div class="line">jetty-maven-<span class="keyword">plugin</span>      <span class="comment">//有内置jetty容器，能通过一个命令将项目运行在jetty容器中</span></div><div class="line">maven-enforcer-<span class="keyword">plugin</span>   <span class="comment">//设置一些规则，强制执行</span></div></pre></td></tr></table></figure></p>
<p>更多插件点击<a href="http://maven.apache.org/plugins/index.html" target="_blank" rel="external">这里</a></p>
<h4 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h4><p>Maven仓库就是一个存放了所有依赖的仓库，这个仓库通过依赖的坐标对其进行管理。</p>
<h5 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h5><p>修改本地仓库位置：<br>Windows系统默认在C盘；打开<code>D:\Java\Maven\apache-maven-3.3.9\conf\settings.xml</code>;将默认地址修改在<code>d:/Java/Maven/repository</code>。<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- localRepository</span></span></div><div class="line"> | The path to the local repository maven will use to store artifacts.</div><div class="line"> |</div><div class="line"> | Default: $<span class="template-variable">&#123;user.home&#125;</span><span class="xml"><span class="comment">/.m2/repository</span></span></div><div class="line">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>d:/Java/Maven/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h5><p>点击pom.xml–&gt;Effective POM–&gt;远程仓库位置：<code>https://repo.maven.apache.org/maven2</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改远程仓库(这里使用开源中国提供的远程仓库)：<br>点击pom.xml–&gt;pom.xml–&gt;输入以下内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>oschina<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>oschina repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>MySQL数据库</p>
<h2 id="Windows7版-3"><a href="#Windows7版-3" class="headerlink" title="Windows7版"></a>Windows7版</h2><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><ol>
<li>点击<a href="http://www.mysql.com/" target="_blank" rel="external">这里</a>进入MySQL官方主页–&gt;Downloads–&gt;Community–&gt;MySQL Community Server–&gt;MySQL Community Server 5.6–&gt;滚动到页面底部–&gt;Windows(x86,32-bit),MySQL Installer MSI–&gt;点击Download按钮–&gt;滚动到页面底部–&gt;Windows (x86, 32-bit), MSI Installer(260+M那个)–&gt;跳转到一个页面–&gt;No thanks, just start my download–&gt;进行下载</li>
<li>双击下载好的.msi文件开始安装</li>
<li>期间提示要安装.NET Framework 4.0，百度搜索下载安装即可，若无该提示可忽略</li>
<li>双击.msi文件开始安装后弹出安装界面–&gt;勾选I accept the license terms–&gt;Next–&gt;Next(第二个向导页Choosing a Setup Type)–&gt;Next(第三个向导页Check Requirements)–&gt;是(Y)–&gt;Execute(第三个向导页Installation)–&gt;Next–&gt;Next(第四个向导页Product Configuration)–&gt;Next–&gt;设置root用户的密码(MySQL Root Password)–&gt;Next–&gt;Next–&gt;Execute–&gt;Finish–&gt;Cancel–&gt;是(Y)</li>
<li>安装完成</li>
<li>进入MySQL的bin目录<code>C:\Program Files\MySQL\MySQL Server 5.6\bin</code>,按住Shift+鼠标右键–&gt;在此处打开命令窗口–&gt;mysql -u root -p–&gt;输入密码–&gt;进入mysql成功–&gt;说明安装成功</li>
<li>如果不想mysql服务自启动，可以在运行窗口输入<code>services.msc</code>进入服务,找到MySQL56,双击,启动类型改为手动</li>
</ol>
<h3 id="MySQL目录结构"><a href="#MySQL目录结构" class="headerlink" title="MySQL目录结构"></a>MySQL目录结构</h3><p>进入MySQL的安装目录:<code>C:\Program Files\MySQL\MySQL Server 5.6</code></p>
<ol>
<li>bin目录里包含了MySQL常用的命令工具及管理工具</li>
<li>data目录是mysql数据库默认保存数据和log文件的地方</li>
<li>include和lib目录是mysql所依赖的头文件及库文件</li>
<li>share目录用来保存一些配置文件和错误信息等</li>
</ol>
<h2 id="Linux版-阿里云Ubuntu-16-04"><a href="#Linux版-阿里云Ubuntu-16-04" class="headerlink" title="Linux版(阿里云Ubuntu 16.04)"></a>Linux版(阿里云Ubuntu 16.04)</h2><h3 id="MySQL安装-1"><a href="#MySQL安装-1" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><ol>
<li><p>安装前先更新软件包列表：</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Ubuntu 16.04上安装MySQL：</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get <span class="keyword">install</span> mysql-<span class="keyword">server</span> mysql-<span class="keyword">client</span></div></pre></td></tr></table></figure>
</li>
<li><p>在安装过程中需要你输入MySQL 管理员用户(root)密码，如下图：<br> <img src="/uploads/installSoftware6.jpg" alt=""></p>
</li>
<li><p>运行MySQL初始化安全脚本：</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo mysql_secure_installation</span></div></pre></td></tr></table></figure>
</li>
<li><p>根据提示信息设置：<br> <img src="/uploads/installSoftware7.jpg" alt=""><br> mysql_secure_installation脚本设置的东西：更改root密码、移除MySQL的匿名用户、禁止root远程登录、删除test数据库。使用上面的这些选项可以提高MySQL的安全。</p>
</li>
</ol>
<h3 id="MySQL基本使用"><a href="#MySQL基本使用" class="headerlink" title="MySQL基本使用"></a>MySQL基本使用</h3><ol>
<li><p>使用root用户登录：</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p</span></div></pre></td></tr></table></figure>
</li>
<li><p>输入root密码：<br> <img src="/uploads/installSoftware8.jpg" alt=""></p>
</li>
<li><p>创建MySQL数据库和用户：下面命令创建了一个名为snailblog的数据库。 </p>
 <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; <span class="keyword">create</span> <span class="keyword">database</span> snailblog;</div></pre></td></tr></table></figure>
</li>
<li><p>创建用户，并使用snailblog数据库：</p>
 <figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; grant <span class="literal">all</span> <span class="keyword">on</span> snailblog.* <span class="keyword">to</span> <span class="string">'man_user'</span> identified <span class="keyword">by</span> <span class="string">'test1234'</span>;</div></pre></td></tr></table></figure>
<p> <img src="/uploads/installSoftware9.jpg" alt=""></p>
</li>
<li><p>使用新用户登录：</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mysql -u man_user -p snailblog</span></div></pre></td></tr></table></figure>
<p> <img src="/uploads/installSoftware10.jpg" alt=""></p>
</li>
<li><p>创建表：</p>
 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE<span class="built_in"> user </span>(id INT, name VARCHAR(20), email VARCHAR(20));</div></pre></td></tr></table></figure>
</li>
<li><p>插入记录：</p>
 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; INSERT INTO<span class="built_in"> user </span>(id,name,email) VALUES(1,<span class="string">"bar"</span>,<span class="string">"bar@gmail.com"</span>);mysql&gt; INSERT INTO<span class="built_in"> user </span>(id,name,email) VALUES(2,<span class="string">"foo"</span>,<span class="string">"foo@163.com"</span>);mysql&gt; INSERT INTO<span class="built_in"> user </span>(id,name,email) VALUES(3,<span class="string">"cat"</span>,<span class="string">"cat@gmail.com"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>简单查询：</p>
 <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span>;</div></pre></td></tr></table></figure>
<p> <img src="/uploads/installSoftware11.jpg" alt=""></p>
</li>
<li>退出MySQL命令行： <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> quitBye</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="MySQL服务启动"><a href="#MySQL服务启动" class="headerlink" title="MySQL服务启动"></a>MySQL服务启动</h3><p>重启MySQL数据库服务：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/mysql restart</div><div class="line">sudo<span class="built_in"> service </span>mysql restart</div></pre></td></tr></table></figure></p>
<h3 id="开启端口远程访问"><a href="#开启端口远程访问" class="headerlink" title="开启端口远程访问"></a>开启端口远程访问</h3><ol>
<li><p>查看3306端口是否正常</p>
 <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root<span class="variable">@node1</span><span class="symbol">:~</span><span class="comment"># netstat -an | grep 3306</span></div><div class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">3306</span>          <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:*</span>               LISTEN</div></pre></td></tr></table></figure>
<p> 注意：现在的3306端口绑定的IP地址是本地的127.0.0.1</p>
</li>
<li><p>修改Mysql配置文件</p>
 <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root<span class="variable">@node1</span><span class="symbol">:~</span><span class="comment"># vim /etc/mysql/mysql.conf.d/mysqld.cnf</span></div></pre></td></tr></table></figure>
<p> 找到 </p>
 <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind-address            = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div></pre></td></tr></table></figure>
<p> 前面加#注释掉</p>
</li>
<li><p>重启Mysql</p>
 <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root<span class="variable">@node1</span><span class="symbol">:~</span><span class="comment"># /etc/init.d/mysql restart</span></div><div class="line">[ ok ] Restarting mysql (via systemctl): mysql.service.</div></pre></td></tr></table></figure>
</li>
<li><p>再次查看端口信息</p>
 <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root<span class="variable">@node1</span><span class="symbol">:~</span><span class="comment"># netstat -an | grep 3306</span></div><div class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:</span><span class="number">3306</span>                 <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                    LISTEN</div></pre></td></tr></table></figure>
</li>
</ol>
<p>OK<br>如果是使用的阿里云服务器,可能还是无法远程访问;这是因为阿里云的安全组规则默认只开启了22和3389端口<br><img src="/uploads/installSoftware12.jpg" alt=""><br>需要开启端口访问<br><img src="/uploads/installSoftware13.jpg" alt=""></p>
<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="Windows7版-4"><a href="#Windows7版-4" class="headerlink" title="Windows7版"></a>Windows7版</h2><h3 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h3><ol>
<li>点击<a href="https://www.mongodb.com/" target="_blank" rel="external">这里</a>进入MongoDB官方主页–&gt;Download(右上角)–&gt;Windows Server 2008 R2 64-bit and later,with SSL support–&gt;点击按钮DOWNLOAD(msi)–&gt;下载</li>
<li>下载完毕后，双击.msi文件–&gt;next–&gt;勾选 I accept the terms in the License Agreement–&gt;next–&gt;Complete–&gt;Install–&gt;Finish</li>
<li>在MongoDB安装盘符下创建文件夹data\db:<code>C:\data\db</code></li>
<li>在MongoDB的bin目录下(<code>C:\Program Files\MongoDB\Server\3.2\bin</code>)运行mongod</li>
<li>在MongoDB的bin目录下运行mongo，进入mongo数据库</li>
</ol>
<h2 id="Linux版-阿里云Ubuntu-16-04-1"><a href="#Linux版-阿里云Ubuntu-16-04-1" class="headerlink" title="Linux版(阿里云Ubuntu 16.04)"></a>Linux版(阿里云Ubuntu 16.04)</h2><h3 id="MongoDB安装-集群"><a href="#MongoDB安装-集群" class="headerlink" title="MongoDB安装(集群)"></a>MongoDB安装(集群)</h3><ol>
<li><p>下载到服务器</p>
 <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -c https:<span class="regexp">//</span>fastdl.mongodb.org<span class="regexp">/linux/m</span>ongodb-linux-x86_64-ubuntu1604-<span class="number">3.2</span>.<span class="number">8</span>.tgz</div></pre></td></tr></table></figure>
</li>
<li><p>解压</p>
 <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar -zxvf mongodb-linux-x86_64-ubuntu1604<span class="number">-3.2</span><span class="number">.8</span>.tgz</div><div class="line">$ mv mongodb-linux-x86_64-ubuntu1604<span class="number">-3.2</span><span class="number">.8</span> mongodb</div></pre></td></tr></table></figure>
</li>
<li><p>进入解压后的目录，建立文件夹(该集群只开启shard1)</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mkdir logs</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir logs/shard1</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir data</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir data/shard1</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir run</span></div><div class="line"><span class="meta">$</span><span class="bash"> touch run/shard1.pid</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir etc</span></div><div class="line"><span class="meta">$</span><span class="bash"> touch etc/shard1.conf</span></div></pre></td></tr></table></figure>
</li>
<li><p>进入etc目录，设置配置文件</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> etc</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim shard1.conf</span></div></pre></td></tr></table></figure>
 <figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">dbpath</span>=/home/mongo/mongodb/data/shard1</div><div class="line"><span class="attr">logpath</span>=/home/mongo/mongodb/logs/shard.log</div><div class="line"><span class="attr">pidfilepath</span>=/home/mongo/mongodb/run/shard1.pid</div><div class="line"><span class="attr">directoryperdb</span>=<span class="literal">true</span></div><div class="line"><span class="attr">logappend</span>=<span class="literal">true</span></div><div class="line"><span class="comment">#replSet=testrs</span></div><div class="line"><span class="comment">#bind_ip=10.10.148.130</span></div><div class="line"><span class="attr">port</span>=<span class="number">10001</span></div><div class="line"><span class="attr">oplogSize</span>=<span class="number">10000</span></div><div class="line"><span class="attr">fork</span>=<span class="literal">true</span></div><div class="line"><span class="attr">noprealloc</span>=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p> 参数解释：</p>
 <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dbpath：数据存放目录</div><div class="line">logpath：日志存放路径</div><div class="line">pidfilepath：进程文件，方便停止mongodb</div><div class="line">directoryperdb：为每一个数据库按照数据库名建立文件夹存放</div><div class="line">logappend：以追加的方式记录日志</div><div class="line">replSet：replica set的名字</div><div class="line">bind_ip：mongodb所绑定的ip地址</div><div class="line">port：mongodb进程所使用的端口号，默认为<span class="number">27017</span></div><div class="line">oplogSize：mongodb操作日志文件的最大大小。单位为Mb，默认为硬盘剩余空间的<span class="number">5</span>%</div><div class="line">fork：以后台方式运行进程</div><div class="line">noprealloc：不预先分配存储</div></pre></td></tr></table></figure>
</li>
<li><p>启动mongodb</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/mongo/mongodb/bin</span></div><div class="line"><span class="meta">$</span><span class="bash"> ./monood -f ../etc/shard1.conf</span></div></pre></td></tr></table></figure>
</li>
<li><p>进入mongo</p>
 <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="string">./mongo</span> <span class="params">--port</span> 10001</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Linux版-阿里云Ubuntu-16-04-2"><a href="#Linux版-阿里云Ubuntu-16-04-2" class="headerlink" title="Linux版(阿里云Ubuntu 16.04)"></a>Linux版(阿里云Ubuntu 16.04)</h2><h3 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h3><ol>
<li><p>安装</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> wget http://download.redis.io/releases/redis-3.2.3.tar.gz  </span></div><div class="line"><span class="meta">$</span><span class="bash"> tar xzf redis-3.2.3.tar.gz  </span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> redis-3.2.3  </span></div><div class="line"><span class="meta">$</span><span class="bash"> make</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> src</span></div><div class="line"><span class="meta">$</span><span class="bash"> ./redis-server</span></div></pre></td></tr></table></figure>
</li>
<li><p>连接</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./redis-cli -h localhost -p 6379</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="Linux版-阿里云Ubuntu-16-04-3"><a href="#Linux版-阿里云Ubuntu-16-04-3" class="headerlink" title="Linux版(阿里云Ubuntu 16.04)"></a>Linux版(阿里云Ubuntu 16.04)</h2><h3 id="Zookeeper安装-需要先安装jdk"><a href="#Zookeeper安装-需要先安装jdk" class="headerlink" title="Zookeeper安装(需要先安装jdk)"></a>Zookeeper安装(需要先安装jdk)</h3><p>ZooKeeper是用Java编写的，运行在Java环境上，因此，在部署zk的机器上需要安装Java运行环境。为了正常运行zk，我们需要JRE1.6或者以上的版本。</p>
<ol>
<li><p>下载到服务器</p>
 <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -c http:<span class="regexp">//</span>apache.fayea.com<span class="regexp">/zookeeper/</span>zookeeper-<span class="number">3.5</span>.<span class="number">1</span>-alpha<span class="regexp">/zookeeper-3.5.1-alpha.tar.gz</span></div></pre></td></tr></table></figure>
</li>
<li><p>解压</p>
 <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar -zxvf zookeeper<span class="number">-3.5</span><span class="number">.1</span>-alpha.tar.gz</div><div class="line">$ mv zookeeper<span class="number">-3.5</span><span class="number">.1</span>-alpha zookeeper</div></pre></td></tr></table></figure>
</li>
<li><p>新建文件</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/zookeeper/zookeeper</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir data</span></div><div class="line"><span class="meta">$</span><span class="bash"> mkdir logs</span></div></pre></td></tr></table></figure>
</li>
<li><p>编辑配置文件</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/zookeeper/zookeeper/conf</span></div><div class="line"><span class="meta">$</span><span class="bash"> cp zoo_sample.cfg zoo.cfg</span></div><div class="line"><span class="meta">$</span><span class="bash"> vim zoo.cfg</span></div></pre></td></tr></table></figure>
<p> 完善配置如下：</p>
 <figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tickTime=2000               //基本时间度量单位,一次心跳时间</div><div class="line">dataDir=/home/zookeeper/zookeeper/data</div><div class="line">dataLogDir=/home/zookeeper/zookeeper/logs</div><div class="line">clientPort=2181</div><div class="line">initLimit=5                 //初始化连接时, follower和leader之间的最长心跳时间5 * 2000ms = 10s</div><div class="line">syncLimit=2                 //请求和应答的最大时间长度 2 * 2000ms</div><div class="line"><span class="section">server.1=zoo1:2888:3888		//server.1=192.168.111.101:2888:3888	</span></div><div class="line"><span class="section">server.2=zoo2:2888:3888		//server.2=192.168.111.102:2888:3888	</span></div><div class="line"><span class="section">server.3=zoo3:2888:3888		//server.3=192.168.111.103:2888:3888</span></div></pre></td></tr></table></figure>
<p> 在dataDir对应目录下创建myid文件，文件中只包含一行，且内容为该节点对应的server.id中的id编号</p>
</li>
<li><p>启动zookeeper</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/zookeeper/zookeeper/bin</span></div><div class="line"><span class="meta">$</span><span class="bash"> ./zkServer.sh start</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看状态</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./zkServer.sh status</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h1><h2 id="Linux版-阿里云Ubuntu-16-04-4"><a href="#Linux版-阿里云Ubuntu-16-04-4" class="headerlink" title="Linux版(阿里云Ubuntu 16.04)"></a>Linux版(阿里云Ubuntu 16.04)</h2><h3 id="JDK安装-1"><a href="#JDK安装-1" class="headerlink" title="JDK安装"></a>JDK安装</h3><ol>
<li><p>安装<br>直接使用apt install 安装</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt <span class="keyword">install</span> openjdk-<span class="number">8</span>-jre-headless</div></pre></td></tr></table></figure>
</li>
<li><p>查看版本</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ java -version</div><div class="line">openjdk version <span class="string">"1.8.0_131"</span></div><div class="line">OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11)</div><div class="line">OpenJDK 64-Bit<span class="built_in"> Server </span>VM (build 25.131-b11, mixed mode)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      一些Java相关的软件的安装
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring各个包的作用</title>
    <link href="http://yoursite.com/2016/05/20/Spring%E5%90%84%E4%B8%AA%E5%8C%85%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2016/05/20/Spring各个包的作用/</id>
    <published>2016-05-19T16:35:25.000Z</published>
    <updated>2016-05-19T17:17:54.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-spring-core-jar"><a href="#1-spring-core-jar" class="headerlink" title="1. spring-core.jar"></a>1. spring-core.jar</h1><p>这个jar文件包含Spring框架基本的核心工具类，Spring其它组件要都要使用到这个包里的类，是其它组件的基本核心。</p>
<h1 id="2-spring-beans-jar"><a href="#2-spring-beans-jar" class="headerlink" title="2. spring-beans.jar"></a>2. spring-beans.jar</h1><p>这个jar文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类。<br>如果应用只需基本的IoC/DI支持，引入spring-core.jar及spring-beans.jar文件就可以了。</p>
<h1 id="3-spring-aop-jar"><a href="#3-spring-aop-jar" class="headerlink" title="3. spring-aop.jar"></a>3. spring-aop.jar</h1><p>这个jar文件包含在应用中使用Spring的AOP特性时所需的类。<br>使用基于AOP的Spring特性，如声明型事务管理（Declarative Transaction Management），也要在应用里包含这个jar包。</p>
<h1 id="4-spring-context-jar"><a href="#4-spring-context-jar" class="headerlink" title="4. spring-context.jar　　"></a>4. spring-context.jar　　</h1><p>这个jar文件为Spring核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，<br>JDNI所需的全部类，UI方面的用来与模板（Templating）引擎如Velocity、FreeMarker、JasperReports集成的类，以及校验Validation方面的相关类。</p>
<h1 id="5-spring-dao-jar"><a href="#5-spring-dao-jar" class="headerlink" title="5. spring-dao.jar　　"></a>5. spring-dao.jar　　</h1><p>这个jar文件包含Spring DAO、Spring Transaction进行数据访问的所有类。<br>为了使用声明型事务支持，还需在自己的应用里包含spring-aop.jar。</p>
<h1 id="6-spring-hibernate-jar"><a href="#6-spring-hibernate-jar" class="headerlink" title="6. spring-hibernate.jar　　"></a>6. spring-hibernate.jar　　</h1><p>这个jar文件包含Spring对Hibernate 2及Hibernate 3进行封装的所有类。</p>
<h1 id="7-spring-jdbc-jar"><a href="#7-spring-jdbc-jar" class="headerlink" title="7. spring-jdbc.jar　　"></a>7. spring-jdbc.jar　　</h1><p>这个jar文件包含对Spring对JDBC数据访问进行封装的所有类。</p>
<h1 id="8-spring-orm-jar"><a href="#8-spring-orm-jar" class="headerlink" title="8. spring-orm.jar　　"></a>8. spring-orm.jar　　</h1><p>这个jar文件包含Spring对DAO特性集进行了扩展，使其支持 iBATIS、JDO、OJB、TopLink，因为Hibernate已经独立成包了，现在不包含在这个包里了。<br>这个jar文件里大部分的类都要依赖spring-dao.jar里的类，用这个包时你需要同时包含spring-dao.jar包。</p>
<h1 id="9-spring-remoting-jar"><a href="#9-spring-remoting-jar" class="headerlink" title="9. spring-remoting.jar　　"></a>9. spring-remoting.jar　　</h1><p>这个jar文件包含支持EJB、JMS、远程调用Remoting（RMI、Hessian、Burlap、Http Invoker、JAX-RPC）方面的类。</p>
<h1 id="10-spring-support-jar"><a href="#10-spring-support-jar" class="headerlink" title="10. spring-support.jar　　"></a>10. spring-support.jar　　</h1><p>这个jar文件包含支持缓存Cache（ehcache）、JCA、JMX、邮件服务（Java Mail、COS Mail）、任务计划Scheduling（Timer、Quartz）方面的类。</p>
<h1 id="11-spring-web-jar"><a href="#11-spring-web-jar" class="headerlink" title="11. spring-web.jar　　"></a>11. spring-web.jar　　</h1><p>这个jar文件包含Web应用开发时，用到Spring框架时所需的核心类，<br>包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。</p>
<h1 id="12-spring-webmvc-jar"><a href="#12-spring-webmvc-jar" class="headerlink" title="12. spring-webmvc.jar　　"></a>12. spring-webmvc.jar　　</h1><p>这个jar文件包含Spring MVC框架相关的所有类。包含国际化、标签、Theme、视图展现的FreeMarker、JasperReports、Tiles、Velocity、XSLT相关类。当然，如果你的应用使用了独立的MVC框架，则无需这个JAR文件里的任何类。</p>
<h1 id="13-spring-mock-jar"><a href="#13-spring-mock-jar" class="headerlink" title="13. spring-mock.jar　　"></a>13. spring-mock.jar　　</h1><pre><code>这个jar文件包含Spring一整套mock类来辅助应用的测试。Spring测试套件使用了其中大量mock类，这样测试就更加简单。
模拟HttpServletRequest和HttpServletResponse类在Web应用单元测试是很方便的。　　
</code></pre><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p>如何选择这些发布包，决定选用哪些发布包其实相当简单。<br>如果你正在构建Web应用并将全程使用Spring，那么最好就使用单个全部的spring.jar文件；<br>如果你的应用仅仅用到简单的Inversion of Control / Dependency Injection（IoC/DI）容器，那么只需spring-core.jar与spring-beans.jar即可；<br>如果你对发布的大小要求很高，那么就得精挑细选了，只取包含自己所需特性的jar文件了。</p>
<h1 id="Spring包依赖说明"><a href="#Spring包依赖说明" class="headerlink" title="Spring包依赖说明"></a>Spring包依赖说明</h1><ul>
<li><p>spring-core.jar需commons-logging.jar。spring-core.jar是以下其它各个的基本。</p>
</li>
<li><p>spring-beans.jar需spring-core.jar</p>
</li>
<li><p>spring-aop.jar需spring-core.jar，spring-beans.jar</p>
</li>
<li><p>spring-context.jar需spring-core.jar，spring-beans.jar，spring-aop.jar</p>
</li>
<li><p>spring-dao.jar需spring-core.jar，spring-beans.jar，spring-aop.jar，spring-context.jar</p>
</li>
<li><p>spring-jdbc.jar需spring-core.jar，spring-beans.jar，spring-dao.jar</p>
</li>
<li><p>spring-web.jar需spring-core.jar，spring-beans.jar，spring-context.jar</p>
</li>
<li><p>spring-webmvc.jar需spring-core.jar，spring-beans.jar，spring-context.jar，spring-web.jar</p>
</li>
<li><p>spring-hibernate.jar需spring-core.jar，spring-beans.jar，spring-aop.jar，spring-dao.jar，spring-jdbc.jar，spring-orm.jar，spring-web.jar， spring-webmvc.jar</p>
</li>
<li><p>spring-orm.jar需spring-core.jar，spring-beans.jar，spring-aop.jar，spring-dao.jar，spring-jdbc.jar，spring-web.jar，spring-webmvc.jar</p>
</li>
<li><p>spring-remoting.jar需spring-core.jar，spring-beans.jar，spring-aop.jar，spring-dao.jar，spring-context.jar，spring-web.jar，spring-webmvc.jar</p>
</li>
<li><p>spring-support.jar需spring-core.jar，spring-beans.jar，spring-aop.jar，spring-dao.jar，spring-context.jar，spring-jdbc.jar</p>
</li>
<li><p>spring-mock.jar需spring-core.jar，spring-beans.jar，spring-dao.jar，spring-context.jar，spring-jdbc.jar </p>
</li>
</ul>
<h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><ol>
<li><p>commons-logging.jar包是使用spring的必备包。用来记录程序运行时的活动的日志记录。</p>
</li>
<li><p>使用Spring框架一般也需要这个包:spring-expression.jar(Spring表达式语言)</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Spring包括有很多独立的jar包，各自包含着对应的Spring组件，用户可以根据自己的需要来选择组合自己的jar包，而不必引入整个spring.jar的所有类文件。
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Storm集群安装部署步骤</title>
    <link href="http://yoursite.com/2016/05/11/Storm%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2016/05/11/Storm集群安装部署步骤/</id>
    <published>2016-05-11T04:50:25.000Z</published>
    <updated>2016-05-15T13:24:43.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Storm集群组件"><a href="#Storm集群组件" class="headerlink" title="Storm集群组件"></a>Storm集群组件</h1><p>Storm集群中包含两类节点：主控节点（Master Node）和工作节点（Work Node）。其分别对应的角色如下：</p>
<ul>
<li>主控节点（Master Node）上运行一个被称为Nimbus的后台程序，它负责在Storm集群内分发代码，分配任务给工作机器，并且负责监控集群运行状态。Nimbus的作用类似于Hadoop中JobTracker的角色。</li>
<li>每个工作节点（Work Node）上运行一个被称为Supervisor的后台程序。Supervisor负责监听从Nimbus分配给它执行的任务，据此启动或停止执行任务的工作进程。每一个工作进程执行一个Topology的子集；一个运行中的Topology由分布在不同工作节点上的多个工作进程组成。</li>
</ul>
<p><img src="/uploads/storm1.jpg" alt=""><br>Nimbus和Supervisor节点之间所有的协调工作是通过Zookeeper集群来实现的。此外，Nimbus和Supervisor进程都是快速失败（fail-fast)和无状态（stateless）的；Storm集群所有的状态要么在Zookeeper集群中，要么存储在本地磁盘上。这意味着你可以用kill -9来杀死Nimbus和Supervisor进程，它们在重启后可以继续工作。这个设计使得Storm集群拥有不可思议的稳定性。</p>
<h1 id="安装Storm集群"><a href="#安装Storm集群" class="headerlink" title="安装Storm集群"></a>安装Storm集群</h1><p>依次完成的安装步骤：</p>
<ul>
<li>搭建Zookeeper集群；</li>
<li>安装Storm依赖库；</li>
<li>下载并解压Storm发布版本；</li>
<li>修改storm.yaml配置文件；</li>
<li>启动Storm各个后台进程。</li>
</ul>
<h2 id="搭建Zookeeper集群"><a href="#搭建Zookeeper集群" class="headerlink" title="搭建Zookeeper集群"></a>搭建Zookeeper集群</h2><p>Storm使用Zookeeper协调集群，由于Zookeeper并不用于消息传递，所以Storm给Zookeeper带来的压力相当低。大多数情况下，单个节点的Zookeeper集群足够胜任，不过为了确保故障恢复或者部署大规模Storm集群，可能需要更大规模节点的Zookeeper集群（对于Zookeeper集群的话，官方推荐的最小节点数为3个）。在Zookeeper集群的每台机器上完成以下安装部署步骤：</p>
<ul>
<li>下载安装Java JDK，官方下载链接为点击<a href="http://java.sun.com/javase/downloads/index.jsp" target="_blank" rel="external">这里</a>，JDK版本为JDK 6或以上。</li>
<li>根据Zookeeper集群的负载情况，合理设置Java堆大小，尽可能避免发生swap，导致Zookeeper性能下降。保守期间，4GB内存的机器可以为Zookeeper分配3GB最大堆空间。</li>
<li>下载后解压安装Zookeeper包，官方下载链接点击<a href="http://hadoop.apache.org/zookeeper/releases.html" target="_blank" rel="external">这里</a></li>
<li>根据Zookeeper集群节点情况，创建如下格式的Zookeeper配置文件zoo.cfg：<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">tickTime=2000</div><div class="line">dataDir=/var/zookeeper/config</div><div class="line">clientPort=2181</div><div class="line">initLimit=5</div><div class="line">syncLimit=2</div><div class="line"><span class="section">server.1=zoo1:2888:3888		//server.1=192.168.111.101:2888:3888	</span></div><div class="line"><span class="section">server.2=zoo2:2888:3888		//server.2=192.168.111.102:2888:3888	</span></div><div class="line"><span class="section">server.3=zoo3:2888:3888		//server.3=192.168.111.103:2888:3888</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中，dataDir指定Zookeeper的数据文件目录；其中server.id=host:port:port，id是为每个Zookeeper节点的编号，保存在dataDir目录下的myid文件中，zoo1~zoo3表示各个Zookeeper节点的hostname，第一个port是用于连接leader的端口，第二个port是用于leader选举的端口。</p>
<ul>
<li>在dataDir目录下创建myid文件，文件中只包含一行，且内容为该节点对应的server.id中的id编号。</li>
<li>启动Zookeeper服务：<br>java -cp zookeeper.jar:lib/log4j-1.2.15.jar:conf \ org.apache.zookeeper.server.quorum.QuorumPeerMain zoo.cfg<br>也可以通过<strong>bin/zkServer.sh</strong>脚本启动Zookeeper服务。<br>7）通过Zookeeper客户端测试服务是否可用：<br>Java客户端下，执行如下命令：<br>java -cp zookeeper.jar:src/java/lib/log4j-1.2.15.jar:conf:src/java/lib/jline-0.9.94.jar \ org.apache.zookeeper.ZooKeeperMain -server 127.0.0.1:2181<br>也可以通过<strong>bin/zkCli.sh</strong>脚本启动Zookeeper Java客户端。</li>
</ul>
<p>注意事项：<br>由于Zookeeper是快速失败（fail-fast)的，且遇到任何错误情况，进程均会退出，因此，最好能通过监控程序将Zookeeper管理起来，保证Zookeeper退出后能被自动重启。<br>Zookeeper运行过程中会在dataDir目录下生成很多日志和快照文件，而Zookeeper运行进程并不负责定期清理合并这些文件，导致占用大量磁盘空间，因此，需要通过cron等方式定期清除没用的日志和快照文件。具体命令格式如下：<br>java -cp zookeeper.jar:log4j.jar:conf org.apache.zookeeper.server.PurgeTxnLog <datadir> <snapdir> -n <count><br>也可以在 zoo.cfg中加配置:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">autopurge.<span class="attribute">purgeInterval</span>=24</div></pre></td></tr></table></figure></count></snapdir></datadir></p>
<h2 id="安装Storm依赖库"><a href="#安装Storm依赖库" class="headerlink" title="安装Storm依赖库"></a>安装Storm依赖库</h2><p>接下来，需要在Nimbus和Supervisor机器上安装Storm的依赖库，具体如下：</p>
<p>ZeroMQ 2.1.7 – 请勿使用2.1.10版本，因为该版本的一些严重bug会导致Storm集群运行时出现奇怪的问题。少数用户在2.1.7版本会遇到”IllegalArgumentException”的异常，此时降为2.1.4版本可修复这一问题。<br>JZMQ<br>Java 6<br>Python 2.6.6<br>unzip<br>以上依赖库的版本是经过Storm测试的，Storm并不能保证在其他版本的Java或Python库下可运行。</p>
<h3 id="安装ZMQ-2-1-7"><a href="#安装ZMQ-2-1-7" class="headerlink" title="安装ZMQ 2.1.7"></a>安装ZMQ 2.1.7</h3><p>下载后编译安装ZMQ：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http:<span class="comment">//download.zeromq.org/zeromq-2.1.7.tar.gz</span></div><div class="line">tar -xzf zeromq-<span class="number">2.1</span>.<span class="number">7</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line">cd zeromq-<span class="number">2.1</span>.<span class="number">7</span></div><div class="line">./configure</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure></p>
<p>注意事项：</p>
<ol>
<li>如果安装过程报错uuid找不到，则通过如下的包安装uuid库：<br>sudo yum install e2fsprogsl  -b current<br>sudo yum install e2fsprogs-devel  -b current<h3 id="安装JZMQ"><a href="#安装JZMQ" class="headerlink" title="安装JZMQ"></a>安装JZMQ</h3></li>
</ol>
<p>下载后编译安装JZMQ：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/nathanmarz/jzmq.git</div><div class="line"><span class="keyword">cd</span> jzmq</div><div class="line">./autogen.<span class="keyword">sh</span></div><div class="line">./configure</div><div class="line"><span class="keyword">make</span></div><div class="line">sudo <span class="keyword">make</span> install</div></pre></td></tr></table></figure></p>
<p>为了保证JZMQ正常工作，可能需要完成以下配置：</p>
<ul>
<li>正确设置 JAVA_HOME环境变量</li>
<li>安装Java开发包</li>
<li>升级autoconf</li>
</ul>
<h3 id="安装Java-6"><a href="#安装Java-6" class="headerlink" title="安装Java 6"></a>安装Java 6</h3><ul>
<li>下载并安装JDK 6</li>
<li>配置JAVA_HOME环境变量；</li>
<li>运行java、javac命令，测试java正常安装。</li>
</ul>
<h3 id="安装Python2-6-6"><a href="#安装Python2-6-6" class="headerlink" title="安装Python2.6.6"></a>安装Python2.6.6</h3><ul>
<li>下载Python2.6.6：<br>点击<a href="http://www.python.org/ftp/python/2.6.6/Python-2.6.6.tar.bz2" target="_blank" rel="external">这里</a></li>
<li><p>编译安装Python2.6.6：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tar –jxvf Python<span class="number">-2.6</span><span class="number">.6</span>.tar.bz2</div><div class="line">cd Python<span class="number">-2.6</span><span class="number">.6</span></div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>测试Python2.6.6：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python -V</div><div class="line">Python <span class="number">2.6</span><span class="number">.6</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装unzip"><a href="#安装unzip" class="headerlink" title="安装unzip"></a>安装unzip</h3><ul>
<li><p>如果使用RedHat系列Linux系统，执行以下命令安装unzip：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="builtin-name">get</span> install unzip</div></pre></td></tr></table></figure>
</li>
<li><p>如果使用Debian系列Linux系统，执行以下命令安装unzip：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> unzip</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="下载并解压Storm发布版本"><a href="#下载并解压Storm发布版本" class="headerlink" title="下载并解压Storm发布版本"></a>下载并解压Storm发布版本</h2><p>下一步，需要在Nimbus和Supervisor机器上安装Storm发行版本。</p>
<ul>
<li>下载Storm发行版本，推荐使用Storm0.9.6：</li>
<li>解压到安装目录下：<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">unzip</span> <span class="selector-tag">storm-0</span><span class="selector-class">.8</span><span class="selector-class">.1</span><span class="selector-class">.zip</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="修改storm-yaml配置文件"><a href="#修改storm-yaml配置文件" class="headerlink" title="修改storm.yaml配置文件"></a>修改storm.yaml配置文件</h2><p>Storm发行版本解压目录下有一个conf/storm.yaml文件，用于配置Storm。默认配置在这里可以查看。conf/storm.yaml中的配置选项将覆盖defaults.yaml中的默认配置。以下配置选项是必须在conf/storm.yaml中进行配置的：</p>
<ul>
<li>storm.zookeeper.servers: Storm集群使用的Zookeeper集群地址，其格式如下：<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">storm</span><span class="selector-class">.zookeeper</span><span class="selector-class">.servers</span>:</div><div class="line">  <span class="selector-tag">-</span> "111<span class="selector-class">.222</span><span class="selector-class">.333</span><span class="selector-class">.444</span>"</div><div class="line">  <span class="selector-tag">-</span> "555<span class="selector-class">.666</span><span class="selector-class">.777</span><span class="selector-class">.888</span>"</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果Zookeeper集群使用的不是默认端口，那么还需要storm.zookeeper.port选项。</p>
<ul>
<li>storm.local.dir: Nimbus和Supervisor进程用于存储少量状态，如jars、confs等的本地磁盘目录，需要提前创建该目录并给以足够的访问权限。然后在storm.yaml中配置该目录，如：<br>storm.local.dir: “/home/admin/storm/workdir”</li>
<li>java.library.path: Storm使用的本地库（ZMQ和JZMQ）加载路径，默认为”/usr/local/lib:/opt/local/lib:/usr/lib”，一般来说ZMQ和JZMQ默认安装在/usr/local/lib 下，因此不需要配置即可。</li>
<li>nimbus.host: Storm集群Nimbus机器地址，各个Supervisor工作节点需要知道哪个机器是Nimbus，以便下载Topologies的jars、confs等文件，如：<br>nimbus.host: “111.222.333.444”</li>
<li>supervisor.slots.ports: 对于每个Supervisor工作节点，需要配置该工作节点可以运行的worker数量。每个worker占用一个单独的端口用于接收消息，该配置选项即用于定义哪些端口是可被worker使用的。默认情况下，每个节点上可运行4个workers，分别在6700、6701、6702和6703端口，如：<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">supervisor.slots.ports:</div><div class="line">    -<span class="ruby"> <span class="number">6700</span></span></div><div class="line">    -<span class="ruby"> <span class="number">6701</span></span></div><div class="line">    -<span class="ruby"> <span class="number">6702</span></span></div><div class="line">    -<span class="ruby"> <span class="number">6703</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="启动Storm各个后台进程"><a href="#启动Storm各个后台进程" class="headerlink" title="启动Storm各个后台进程"></a>启动Storm各个后台进程</h2><p>最后一步，启动Storm的所有后台进程。和Zookeeper一样，Storm也是快速失败（fail-fast)的系统，这样Storm才能在任意时刻被停止，并且当进程重启后被正确地恢复执行。这也是为什么Storm不在进程内保存状态的原因，即使Nimbus或Supervisors被重启，运行中的Topologies不会受到影响。</p>
<p>以下是启动Storm各个后台进程的方式：</p>
<p>Nimbus: 在Storm主控节点上运行”bin/storm nimbus &gt;/dev/null 2&gt;&amp;1 &amp;”启动Nimbus后台程序，并放到后台执行；<br>Supervisor: 在Storm各个工作节点上运行”bin/storm supervisor &gt;/dev/null 2&gt;&amp;1 &amp;”启动Supervisor后台程序，并放到后台执行；<br>UI: 在Storm主控节点上运行”bin/storm ui &gt;/dev/null 2&gt;&amp;1 &amp;”启动UI后台程序，并放到后台执行，启动后可以通过<a href="http://{nimbus" target="_blank" rel="external">http://{nimbus</a> host}:8080观察集群的worker资源使用情况、Topologies的运行状态等信息。<br>上述开启进程的方式可以写成.sh脚本的形式,如:start.sh; 开启的话 bash start.sh<br>注意事项：<br>Storm后台进程被启动后，将在Storm安装部署目录下的logs/子目录下生成各个进程的日志文件。<br>经测试，Storm UI必须和Storm Nimbus部署在同一台机器上，否则UI无法正常工作，因为UI进程会检查本机是否存在Nimbus链接。<br>为了方便使用，可以将bin/storm加入到系统环境变量中。<br>至此，Storm集群已经部署、配置完毕，可以向集群提交拓扑运行了。</p>
<h2 id="storm启动验证"><a href="#storm启动验证" class="headerlink" title="storm启动验证"></a>storm启动验证</h2><p>启动storm集群后，访问storm ui (<a href="http://{nimbus" target="_blank" rel="external">http://{nimbus</a> host}:8080) ,若页面正常访问且supervisor全部启动则启动正常</p>
<h1 id="向集群提交任务"><a href="#向集群提交任务" class="headerlink" title="向集群提交任务"></a>向集群提交任务</h1><p>1）启动Storm Topology：</p>
<p>storm jar allmycode.jar org.me.MyTopology arg1 arg2 arg3<br>其中，allmycode.jar是包含Topology实现代码的jar包，org.me.MyTopology的main方法是Topology的入口，arg1、arg2和arg3为org.me.MyTopology执行时需要传入的参数。</p>
<p>2）停止Storm Topology：</p>
<p>storm kill {toponame}<br>其中，{toponame}为Topology提交到Storm集群时指定的Topology任务名称。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主要要修改的地方:<br>zookeeper中<br>zoo.cfg的dataDir、Server list<br>保存在dataDir目录下的myid文件中的id和Server id相同</p>
<p>Storm中:<br>conf下的storm.yaml中的:<br>storm.zookeeper.servers:安装了zookeeper的集群机子的ip<br>storm.local.dir:storm-local地址<br>supervisor.slots.ports:  slot端口<br>nimbus.host:nimbus所在的机子ip<br>drpc.servers:drpc所在的机子的ip<br>其中:nimbus所在的机子需要开启 nimbus、ui、supervisor、logviewer<br>     drpc所在的机子需要开启 drpc、supervisor、logviewer<br>     没有nimbus也没有drpc所在的机子需要开启supervisor、logviewer<br>容易出错的地方:<br>可能会由于没有权限的原因导致启动失败<br>chmod +x storm<br>chmod +x zkServer.sh</p>
<p>可能会出现无法识别指令<br>./zkServer.sh start    需要在前面加 ./</p>
]]></content>
    
    <summary type="html">
    
      详细描述如何快速搭建一个Storm集群(搭建Zookeeper集群及安装Storm)
    
    </summary>
    
      <category term="Storm" scheme="http://yoursite.com/categories/Storm/"/>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>一些了解的书</title>
    <link href="http://yoursite.com/2016/05/10/%E4%B8%80%E4%BA%9B%E6%83%B3%E4%BA%86%E8%A7%A3%E7%9A%84%E4%B9%A6/"/>
    <id>http://yoursite.com/2016/05/10/一些想了解的书/</id>
    <published>2016-05-10T11:50:25.000Z</published>
    <updated>2016-08-21T17:32:14.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB权威指南"><a href="#MongoDB权威指南" class="headerlink" title="MongoDB权威指南"></a>MongoDB权威指南</h1><p>详细介绍了MongoDB<br><img src="/uploads/book1.jpg" alt=""></p>
<h1 id="Effective-Java"><a href="#Effective-Java" class="headerlink" title="Effective Java"></a>Effective Java</h1><p>Effective Java包含了从静态工厂，序列化，equals和hashcode到泛型，枚举，可变参数以及反射的最佳解决方法。<br><img src="/uploads/book2.jpg" alt=""></p>
<h1 id="Head-First-Java"><a href="#Head-First-Java" class="headerlink" title="Head First Java"></a>Head First Java</h1><p>本书，你可以了解到类，对象，线程，集合等编程知识，还可以了解到泛型，枚举，可变参数和自动装箱等语言特性。本书中还涉及到了Java高级编程中的Swing，网络编程，IO操作等<br><img src="/uploads/book3.jpg" alt=""></p>
<h1 id="Java-编程思想"><a href="#Java-编程思想" class="headerlink" title="Java 编程思想"></a>Java 编程思想</h1><p>本书共22章，包括操作符、控制执行流程、访问权限控制、复用类、多态、接口、通过异常处理错误、字符串、泛型、数组、容器深入研究、Java I/O系统、枚举类型、并发以及图形化用户界面等内容。<br><img src="/uploads/book4.jpg" alt=""></p>
<h1 id="重构-改善既有代码的设计"><a href="#重构-改善既有代码的设计" class="headerlink" title="重构 改善既有代码的设计"></a>重构 改善既有代码的设计</h1><p><img src="/uploads/book5.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      一些看过或者了解过的书
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>如何在github上下载单个文件夹</title>
    <link href="http://yoursite.com/2016/05/07/%E5%85%B3%E4%BA%8E%E8%B5%84%E6%96%99%E4%BB%8Egithub%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2016/05/07/关于资料从github下载/</id>
    <published>2016-05-07T13:50:25.000Z</published>
    <updated>2016-05-11T17:20:17.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在github上下载单个文件夹"><a href="#如何在github上下载单个文件夹" class="headerlink" title="如何在github上下载单个文件夹?"></a>如何在github上下载单个文件夹?</h1><p>比如把一些资料放到github上做分类归档，怎样才能下载单一分类文件(夹)</p>
<h1 id="最方便"><a href="#最方便" class="headerlink" title="最方便"></a>最方便</h1><p>点击<a href="http://kinolien.github.io/gitzip/" target="_blank" rel="external">这里</a><br><img src="/uploads/githubdownload1.jpg" alt=""><br>输入单个文件夹的路径，点击Download直接下载该文件夹;<br>点击Search,列出该文件夹下的列表,可以单独下载<br><img src="/uploads/githubdownload2.jpg" alt=""><br>也可以点进该列表内的文件夹,继续列出文件夹内的列表</p>
<h1 id="利用谷歌插件"><a href="#利用谷歌插件" class="headerlink" title="利用谷歌插件"></a>利用谷歌插件</h1><p><img src="/uploads/githubdownload3.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      很多代码资源都存放在github上，但是又不想整个下载，只下载单个文件或文件夹
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Trie（数字树、字典树、前缀树）</title>
    <link href="http://yoursite.com/2016/05/05/%E5%89%8D%E7%BC%80%E6%A0%91/"/>
    <id>http://yoursite.com/2016/05/05/前缀树/</id>
    <published>2016-05-05T05:50:25.000Z</published>
    <updated>2016-05-05T13:31:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Trie简介"><a href="#Trie简介" class="headerlink" title="Trie简介"></a>Trie简介</h1><p>术语<code>trie</code>取自<code>retrieval</code>，也被称为数字树、字典树或前缀树，是一种有序树数据结构，哈希树的变种。<br>根据词源学，<code>trie</code> 的发明者<code>Edward Fredkin</code>把它读作<code>/ˈtriː/ &quot;tree&quot;</code>。但是，其他作者把它读作<code>/ˈtraɪ/ &quot;try&quot;</code>。<br>与二叉查找树不同，树中节点不存储与节点关联的键，而是通过树中的位置定义键。一个节点的所有子孙节点拥有与该节点相同的字符串前缀，根节点与空字符串相关联。并不是每个节点都与值关联，仅叶节点和部分内部节点与值关联。<br><img src="/uploads/trie1.jpg" alt=""><br>含有键为”A”、”to”、”tea”、”ted”、”ten”、”i”、”in”和”inn”的trie示例。</p>
<p><code>trie</code>中的键通常是字符串，但也可以是其它的结构。<code>trie</code>的算法可以很容易地修改为处理其它结构的有序序列，比如一串数字或者形状的排列。比如，<code>bitwise trie</code>中的键是一串位元，可以用于表示整数或者内存地址。<br>字符串集合X中不存在一个串是另外一个串的前缀 。如何满足这个要求呢？我们可以在X中的每个串后面加入一个特殊字符$(这个字符将不会出现在字母表中)。这样，集合X{bear$、bell$、…. bi$、bid$}一定会满足这个要求。</p>
<h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><ul>
<li>根节点不包含字符，除根节点外每一个节点都只包含一个字符；</li>
<li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串；</li>
<li>每个节点的所有子节点包含的字符都不相同。</li>
</ul>
<p>总结：一个存储长度为n，来自大小为d的字母表中s个串的集合X的标准trie具有性质如下：</p>
<ol>
<li>树中每个内部结点至多有d个子结点。</li>
<li>树有s个外部结点。</li>
<li>树的高度等于X中最长串的长度。</li>
<li>树中的结点数为O(n)。</li>
</ol>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="替代其他数据结构"><a href="#替代其他数据结构" class="headerlink" title="替代其他数据结构"></a>替代其他数据结构</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>trie数据查找与不完美哈希表（链表实现，完美哈希表为数组实现）在最差情况下更快：对于<code>trie</code>，最差情况为O(m)，m为查找字符串的长度； 对于不完美哈希表，会有键冲突（不同键哈希相同），最差情况为O(N)，N为全部字符产集合个数。典型情况下是O(m)用于哈希计算、O(1)用于数据查找。</li>
<li>trie中不同键没有冲突</li>
<li>trie的桶与哈希表用于存储键冲突的桶类似，仅在单个键与多个值关联时需要</li>
<li>当更多的键加入trie，无需提供哈希方法或改变哈希方法</li>
<li>tire通过键为条目提供了字母顺序</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>trie数据查找在某些情况下（尤其当数据直接从磁盘或随机访问时间远远高于主内存的辅助存储设备时）比哈希表慢</li>
<li>当键为某些类型时（例如浮点数）之类的键，前缀链很长且前缀不是特别有意义。然而bitwise trie能够处理标注IEEE单精度和双精度浮点数。</li>
<li>一些trie会比哈希表消耗更多空间：对于trie，每个字符串的每个字符都可能需要分配内存；对于大多数哈希表，为整个条目分配一块内存。</li>
</ul>
<h2 id="字典表示"><a href="#字典表示" class="headerlink" title="字典表示"></a>字典表示</h2><p>Trie树是一种<strong>哈希树的变种</strong>，典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来节约存储空间，最大限度地减少无谓的字符串比较，查询效率比哈希表高。<br>典型应用是预测文本排序（常被搜索引擎系统用于文本词频统计）、字典自动完成、字符串近似匹配（拼写检查、断字）。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>trie基本操作有：查找、插入和删除。</p>
<p>trie数据查找的方法为</p>
<ol>
<li>从根结点开始一次搜索；</li>
<li>取得要查找关键词的第一个字母，并根据该字母选择对应的子树并转到该子树继续进行检索；</li>
<li>在相应的子树上，取得要查找关键词的第二个字母,并进一步选择对应的子树进行检索。</li>
<li>迭代过程……</li>
<li>在某个结点处，关键词的所有字母已被取出，则读取附在该结点上的信息，即完成查找。</li>
</ol>
<p>Test类<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Trie;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> class TrieTest &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Trie trie;</div><div class="line">	</div><div class="line">	@Before</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setUp() &#123;</div><div class="line">		trie = <span class="keyword">new</span> Trie(); </div><div class="line">		trie.addWord(<span class="string">"to"</span>);</div><div class="line">		trie.addWord(<span class="string">"tea"</span>);</div><div class="line">		trie.addWord(<span class="string">"ted"</span>);</div><div class="line">		trie.addWord(<span class="string">"ten"</span>);</div><div class="line">		trie.addWord(<span class="string">"inn"</span>);</div><div class="line">		trie.addWord(<span class="string">"a"</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">//增加字符串</span></div><div class="line">	@Test</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>()&#123;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">		<span class="comment">//因为trie中的root属性是私有的,所以要通过暴力反射来得到它</span></div><div class="line">		Field fieldY = trie.getClass().getDeclaredField(<span class="string">"root"</span>);</div><div class="line">		fieldY.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射</span></div><div class="line">		Node node = (Node)fieldY.<span class="built_in">get</span>(trie);</div><div class="line">		<span class="comment">//打印出这个前缀树,每个字符后面对应一个数字,代表节点层次，好画节点图</span></div><div class="line">		printTrie(node,<span class="number">1</span>);</div><div class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		 </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//判断该前缀树中是否有该字符串或前缀</span></div><div class="line">	@Test</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> hasStr()&#123;</div><div class="line">		<span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"toaa"</span>;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">str</span> != <span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(trie.containsWord(<span class="built_in">str</span>))&#123;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="built_in">str</span> + <span class="string">" is a word"</span>);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">if</span>(trie.containsPrefix(<span class="built_in">str</span>))&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="built_in">str</span> + <span class="string">" is a prefix"</span>);</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="built_in">str</span> + <span class="string">" not found"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//打印出这个前缀树,每个字符后面对应一个数字,代表节点层次，好画节点图</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> printTrie(Node node,<span class="built_in">int</span> i)&#123;</div><div class="line">		<span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">		<span class="comment">//因为node中的children属性是私有的,所以要通过暴力反射来得到它</span></div><div class="line">		Field fieldY = node.getClass().getDeclaredField(<span class="string">"children"</span>);</div><div class="line">		fieldY.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射</span></div><div class="line">		@SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">		Map&lt;Character,Node&gt; children = (Map&lt;Character,Node&gt;)fieldY.<span class="built_in">get</span>(node);</div><div class="line">		<span class="keyword">for</span>(<span class="built_in">char</span> c :children.keySet())&#123;</div><div class="line">			System.out.<span class="built_in">print</span>(<span class="string">""</span>+c + i+<span class="string">"\t"</span>);</div><div class="line">			printTrie(node.getChild(c),i+<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Trie类及对应Node类<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Trie;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123; </div><div class="line">	  </div><div class="line">	   <span class="keyword">private</span> Node root = <span class="keyword">new</span> Node(<span class="string">""</span>); </div><div class="line">	  </div><div class="line">	   <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;&#125; </div><div class="line">	  </div><div class="line">	   <span class="comment">//将数据列表加入到前缀树中</span></div><div class="line">	   <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">(List&lt;String&gt; argInitialWords)</span> </span>&#123; </div><div class="line">	      <span class="keyword">for</span> (String word:argInitialWords) &#123; </div><div class="line">	    	  <span class="comment">//将一个字符串加入到前缀树中</span></div><div class="line">	         addWord(word); </div><div class="line">	      &#125; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="comment">//将一个字符串加入到前缀树中</span></div><div class="line">	   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String argWord)</span> </span>&#123; </div><div class="line">	      <span class="keyword">char</span> argChars[] = argWord.toCharArray(); </div><div class="line">	      Node currentNode = root; </div><div class="line">	  </div><div class="line">	      <span class="comment">//判断该字符的每一个字符是否在前缀树中，如果在的话，Node=子Node,循环判断</span></div><div class="line">	      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argChars.length; i++) &#123; </div><div class="line">	         <span class="keyword">if</span> (!currentNode.containsChildValue(argChars[i])) &#123; </div><div class="line">	            currentNode.addChild(argChars[i], <span class="keyword">new</span> Node(currentNode.getValue() + argChars[i])); </div><div class="line">	         &#125; </div><div class="line">	  </div><div class="line">	         currentNode = currentNode.getChild(argChars[i]); </div><div class="line">	      &#125; </div><div class="line">	  </div><div class="line">	      currentNode.setIsWord(<span class="keyword">true</span>); </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="comment">//是否包含了前缀(不用考虑node.isWord())</span></div><div class="line">	   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">containsPrefix</span><span class="params">(String argPrefix)</span> </span>&#123; </div><div class="line">	      <span class="function"><span class="keyword">return</span> <span class="title">contains</span><span class="params">(argPrefix, <span class="keyword">false</span>)</span></span>; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="comment">//是否包含了字符串(包含，并且node.isWord() == true)</span></div><div class="line">	   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">containsWord</span><span class="params">(String argWord)</span> </span>&#123; </div><div class="line">	      <span class="function"><span class="keyword">return</span> <span class="title">contains</span><span class="params">(argWord, <span class="keyword">true</span>)</span></span>; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="comment">//得到该字符串对应的Node(node.isWord() == true)</span></div><div class="line">	   <span class="keyword">public</span> <span class="function">Node <span class="title">getWord</span><span class="params">(String argString)</span> </span>&#123; </div><div class="line">	      Node node = getNode(argString); </div><div class="line">	      <span class="keyword">return</span> node != <span class="keyword">null</span> &amp;&amp; node.isWord() ? node : <span class="keyword">null</span>; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="comment">//得到该前缀的Node,(不用考虑node.isWord())</span></div><div class="line">	   <span class="keyword">public</span> <span class="function">Node <span class="title">getPrefix</span><span class="params">(String argString)</span> </span>&#123; </div><div class="line">	      <span class="function"><span class="keyword">return</span> <span class="title">getNode</span><span class="params">(argString)</span></span>; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	  </div><div class="line">	   <span class="keyword">private</span> <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String argString, <span class="keyword">boolean</span> argIsWord)</span> </span>&#123; </div><div class="line">	      Node node = getNode(argString); </div><div class="line">	      <span class="keyword">return</span> (node != <span class="keyword">null</span> &amp;&amp; node.isWord() &amp;&amp; argIsWord) || </div><div class="line">	                  (!argIsWord &amp;&amp; node != <span class="keyword">null</span>); </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="comment">//得到该前缀的Node,(不用考虑node.isWord())</span></div><div class="line">	   <span class="keyword">private</span> <span class="function">Node <span class="title">getNode</span><span class="params">(String argString)</span> </span>&#123; </div><div class="line">	      Node currentNode = root; </div><div class="line">	      <span class="keyword">char</span> argChars[] = argString.toCharArray(); </div><div class="line">	      <span class="comment">//一个字符一个字符往下找,如果最后找到的Node为null,则说明该字符串没有;如果不为null就返回这个node,在这个node的value属性对应了该字符串</span></div><div class="line">	      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argChars.length &amp;&amp; currentNode != <span class="keyword">null</span>; i++) &#123; </div><div class="line">	         currentNode = currentNode.getChild(argChars[i]); </div><div class="line">	         <span class="keyword">if</span> (currentNode == <span class="keyword">null</span>) &#123; </div><div class="line">	            <span class="keyword">return</span> <span class="keyword">null</span>; </div><div class="line">	         &#125; </div><div class="line">	      &#125; </div><div class="line">	  </div><div class="line">	      <span class="keyword">return</span> currentNode; </div><div class="line">	   &#125; </div><div class="line">	&#125; </div><div class="line">	  </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 该类一共有三个属性</div><div class="line">	 * 1.value指的是到该节点的前缀字符串</div><div class="line">	 * 2.children指的是该节点下的所有节点;key用以存放下一个字符,value用以存放对应字符的Node</div><div class="line">	 * 3.isValidWord判断该Node是否对应一个字符串  </div><div class="line">	 * <span class="doctag">@author</span> YH</div><div class="line">	 *</div><div class="line">	 */</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123; </div><div class="line">	  </div><div class="line">	   <span class="keyword">private</span> <span class="keyword">final</span> String value; </div><div class="line">	   <span class="keyword">private</span> Map&lt;Character,Node&gt; children = <span class="keyword">new</span> HashMap&lt;Character,Node&gt;(); </div><div class="line">	   <span class="keyword">private</span> <span class="keyword">boolean</span> isValidWord; </div><div class="line">	  </div><div class="line">	   <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String argValue)</span> </span>&#123; </div><div class="line">	      value = argValue; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">addChild</span><span class="params">(<span class="keyword">char</span> c, Node argChild)</span> </span>&#123; </div><div class="line">	      children.put(c, argChild); </div><div class="line">	      <span class="keyword">return</span> <span class="keyword">true</span>; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">containsChildValue</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; </div><div class="line">	      <span class="function"><span class="keyword">return</span> children.<span class="title">containsKey</span><span class="params">(c)</span></span>; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="keyword">public</span> <span class="function">String <span class="title">getValue</span><span class="params">()</span> </span>&#123; </div><div class="line">	      <span class="function"><span class="keyword">return</span> value.<span class="title">toString</span><span class="params">()</span></span>; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="comment">//children是一个Map集合,key用以存放字符,value用以存放对应字符的Node</span></div><div class="line">	   <span class="keyword">public</span> <span class="function">Node <span class="title">getChild</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; </div><div class="line">	      <span class="function"><span class="keyword">return</span> children.<span class="title">get</span><span class="params">(c)</span></span>; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isWord</span><span class="params">()</span> </span>&#123; </div><div class="line">	      <span class="keyword">return</span> isValidWord; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setIsWord</span><span class="params">(<span class="keyword">boolean</span> argIsWord)</span> </span>&#123; </div><div class="line">	      isValidWord = argIsWord; </div><div class="line">	  </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	   <span class="keyword">public</span> <span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123; </div><div class="line">	      <span class="keyword">return</span> value; </div><div class="line">	   &#125; </div><div class="line">	  </div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h1 id="提高"><a href="#提高" class="headerlink" title="提高"></a>提高</h1><p>上述方式用了Node的方式来进行前缀树的操作，这样做需要大量的对象，内存的耗费比较多<br>但是如果针对的是特定的内容,比如字符串,或者仅仅包含数字和字母的字符串,可以用二维数组的形式来实现前缀树</p>
<p>用二维数组的方式代替节点Node<br>二维数组的值和第一维的位置确定了一个节点<br>二维数组的第二维位置为 该节点包含的字符(可以约定对应数字代替的字符)<br>例如:<br>ch[0][1] = 1;<br>ch[1][3] = 2;<br>ch[1][3]就相当于ch[0][1]的一个子节点,它的第二维位置为该节点包含的字符</p>
]]></content>
    
    <summary type="html">
    
      术语trie取自retrieval，也被称为数字树、字典树或前缀树，是一种有序树数据结构，哈希树的变种。
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>StringToDouble源码解析</title>
    <link href="http://yoursite.com/2016/05/04/StringToDouble/"/>
    <id>http://yoursite.com/2016/05/04/StringToDouble/</id>
    <published>2016-05-04T01:50:25.000Z</published>
    <updated>2016-05-04T03:42:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于工作需要更快速的将String转换成double，不满足于现有的API方式。故我需要去查看常用的String转Value方式以及期望能写出一个更高效的实现。</p>
<h1 id="常用方法及耗时"><a href="#常用方法及耗时" class="headerlink" title="常用方法及耗时"></a>常用方法及耗时</h1><p>常用的StringToDouble方法主要有以下四种:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Test</span></div><div class="line">public void StringToDoubleValue()&#123;</div><div class="line">	<span class="selector-tag">Double</span><span class="selector-class">.parseDouble</span>(<span class="string">"1.0"</span>);</div><div class="line">	<span class="selector-tag">Double</span><span class="selector-class">.valueOf</span>(<span class="string">"1.0"</span>);</div><div class="line">	<span class="selector-tag">new</span> <span class="selector-tag">BigDecimal</span>(<span class="string">"1.0"</span>)<span class="selector-class">.doubleValue</span>();</div><div class="line">	<span class="selector-tag">try</span> &#123;</div><div class="line">	<span class="selector-tag">new</span> <span class="selector-tag">DecimalFormat</span>()<span class="selector-class">.parse</span>(<span class="string">"1.0"</span>)<span class="selector-class">.doubleValue</span>();</div><div class="line">	&#125; <span class="selector-tag">catch</span> (ParseException e) &#123;</div><div class="line">		<span class="selector-tag">e</span><span class="selector-class">.printStackTrace</span>();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中上述四种方法的耗时统计如下(100万次循环结果,时间单位ms):<br><img src="/uploads/StringToDouble1.jpg" alt=""></p>
<p>根据上图的结果可知<code>Double</code>类自带的<code>parseDouble</code>和<code>valueOf</code>方法速度较快。经过查看API可知:<br>这两个方法的具体实现都是一样的。<br><img src="/uploads/StringToDouble2.jpg" alt=""><br><img src="/uploads/StringToDouble3.jpg" alt=""><br>都是实现了<code>FloatingDecimal</code>类的<code>readJavaFormatString(String in)</code>方法<br>那么问题来了:<br>为什么方式二耗时明显低于方式一？<br>摆上我的代码:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> start1 = System.currentTimeMillis();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</div><div class="line">	<span class="keyword">double</span> d = <span class="keyword">Double</span>.parseDouble(<span class="string">"1.0"</span>);</div><div class="line">&#125;</div><div class="line">System.out.<span class="keyword">println</span>(<span class="string">"方式一："</span> + (System.currentTimeMillis()-start1));</div><div class="line"></div><div class="line"><span class="keyword">long</span> start2 = System.currentTimeMillis();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</div><div class="line">	<span class="keyword">double</span> d = <span class="keyword">Double</span>.valueOf(<span class="string">"1.0"</span>);</div><div class="line">&#125;</div><div class="line">System.out.<span class="keyword">println</span>(<span class="string">"方式二："</span> + (System.currentTimeMillis()-start2));</div></pre></td></tr></table></figure></p>
<p>这是因为方式一我是在方式二上面执行的。如果换个位置，方式二先执行，那么方式一的耗时会低很多。<br>个人观点是:这里调用了<code>FloatingDecimal.readJavaFormatString(&quot;1.0&quot;).doubleValue()</code>方法。类的加载花费了一定的时间。</p>
<p>API中的StringToDouble方法其实一共调用了2个方法:<br><code>readJavaFormatString(String in)</code>以及<code>doubleValue()</code><br>这两个方法的<strong>源码我会在最后贴出</strong>。</p>
<p>看不下去了，就两个简单的方法源码就800+行了</p>
<h1 id="附件-源码"><a href="#附件-源码" class="headerlink" title="附件(源码)"></a>附件(源码)</h1><p><code>readJavaFormatString(String in)</code>以及<code>doubleValue()</code>以及相应的辅助方法和变量被我提取到一个类中<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> MyTest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class MyFloatingDecimal &#123;</div><div class="line">	</div><div class="line">	<span class="built_in">boolean</span>    isExceptional;</div><div class="line">    <span class="built_in">boolean</span>    isNegative;</div><div class="line">    <span class="built_in">int</span>        decExponent;</div><div class="line">    <span class="built_in">char</span>    digits[];</div><div class="line">    <span class="built_in">int</span>        nDigits;</div><div class="line">    <span class="built_in">int</span>        bigIntExp;</div><div class="line">    <span class="built_in">int</span>        bigIntNBits;</div><div class="line">    <span class="built_in">boolean</span>    mustSetRoundDir = <span class="keyword">false</span>;</div><div class="line">    <span class="built_in">int</span>        roundDir; <span class="comment">// set by doubleValue</span></div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span>    signMask = <span class="number">0x8000000000000000</span>L;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span>    expMask  = <span class="number">0x7ff0000000000000</span>L;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span>    fractMask= ~(signMask|expMask);</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span>    expShift = <span class="number">52</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span>    expBias  = <span class="number">1023</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span>    fractHOB = ( <span class="number">1</span>L&lt;&lt;expShift ); <span class="comment">// assumed High-Order bit</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span>    maxDecimalDigits = <span class="number">15</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span>    maxDecimalExponent = <span class="number">308</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span>    minDecimalExponent = <span class="number">-324</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span>    bigDecimalExponent = <span class="number">324</span>; <span class="comment">// i.e. abs(minDecimalExponent)</span></div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span>    highbyte = <span class="number">0xff00000000000000</span>L;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span>    lowbytes = ~highbyte;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span>    singleSignMask =    <span class="number">0x80000000</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span>    singleExpMask  =    <span class="number">0x7f800000</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span>    singleExpShift    =   <span class="number">23</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span>    intDecimalDigits = <span class="number">9</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> small10pow[] = &#123;</div><div class="line">        <span class="number">1.0e0</span>,</div><div class="line">        <span class="number">1.0e1</span>, <span class="number">1.0e2</span>, <span class="number">1.0e3</span>, <span class="number">1.0e4</span>, <span class="number">1.0e5</span>,</div><div class="line">        <span class="number">1.0e6</span>, <span class="number">1.0e7</span>, <span class="number">1.0e8</span>, <span class="number">1.0e9</span>, <span class="number">1.0e10</span>,</div><div class="line">        <span class="number">1.0e11</span>, <span class="number">1.0e12</span>, <span class="number">1.0e13</span>, <span class="number">1.0e14</span>, <span class="number">1.0e15</span>,</div><div class="line">        <span class="number">1.0e16</span>, <span class="number">1.0e17</span>, <span class="number">1.0e18</span>, <span class="number">1.0e19</span>, <span class="number">1.0e20</span>,</div><div class="line">        <span class="number">1.0e21</span>, <span class="number">1.0e22</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> big10pow[] = &#123;</div><div class="line">        <span class="number">1e16</span>, <span class="number">1e32</span>, <span class="number">1e64</span>, <span class="number">1e128</span>, <span class="number">1e256</span> &#125;;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> tiny10pow[] = &#123;</div><div class="line">        <span class="number">1e-16</span>, <span class="number">1e-32</span>, <span class="number">1e-64</span>, <span class="number">1e-128</span>, <span class="number">1e-256</span> &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> maxSmallTen = small10pow.length<span class="number">-1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> small5pow[] = &#123;</div><div class="line">        <span class="number">1</span>,</div><div class="line">        <span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> long5pow[] = &#123;</div><div class="line">        <span class="number">1</span>L,</div><div class="line">        <span class="number">5</span>L,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        <span class="number">5</span>L*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>,</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">char</span> zero[] = &#123; <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span> &#125;;</div><div class="line"></div><div class="line">	<span class="keyword">private</span>    MyFloatingDecimal( <span class="built_in">boolean</span> negSign, <span class="built_in">int</span> decExponent, <span class="built_in">char</span> []digits, <span class="built_in">int</span> n,  <span class="built_in">boolean</span> e )</div><div class="line">    &#123;</div><div class="line">    isNegative = negSign;</div><div class="line">    isExceptional = e;</div><div class="line">    <span class="keyword">this</span>.decExponent = decExponent;</div><div class="line">    <span class="keyword">this</span>.digits = digits;</div><div class="line">    <span class="keyword">this</span>.nDigits = n;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> MyFloatingDecimal</div><div class="line">    readJavaFormatString( <span class="keyword">String</span> in ) <span class="keyword">throws</span> NumberFormatException &#123;</div><div class="line">    <span class="built_in">boolean</span> isNegative = <span class="keyword">false</span>;</div><div class="line">    <span class="built_in">boolean</span> signSeen   = <span class="keyword">false</span>;</div><div class="line">    <span class="built_in">int</span>     decExp;</div><div class="line">    <span class="built_in">char</span>    c;</div><div class="line"></div><div class="line">    parseNumber:</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        in = in.<span class="built_in">trim</span>(); <span class="comment">// don't fool around with white space.</span></div><div class="line">               <span class="comment">// throws NullPointerException if null</span></div><div class="line">        <span class="built_in">int</span>    l = in.length();</div><div class="line">        <span class="keyword">if</span> ( l == <span class="number">0</span> ) <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"empty String"</span>);</div><div class="line">        <span class="built_in">int</span>    i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">switch</span> ( c = in.charAt( i ) )&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">        isNegative = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">//FALLTHROUGH</span></div><div class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">        i++;</div><div class="line">        signSeen = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Would handle NaN and Infinity here, but it isn't</span></div><div class="line">        <span class="comment">// part of the spec!</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="built_in">char</span>[] digits = <span class="keyword">new</span> <span class="built_in">char</span>[ l ];</div><div class="line">        <span class="built_in">int</span>    nDigits= <span class="number">0</span>;</div><div class="line">        <span class="built_in">boolean</span> decSeen = <span class="keyword">false</span>;</div><div class="line">        <span class="built_in">int</span>    decPt = <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span>    nLeadZero = <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span>    nTrailZero= <span class="number">0</span>;</div><div class="line">    digitLoop:</div><div class="line">        <span class="keyword">while</span> ( i &lt; l )&#123;</div><div class="line">        <span class="keyword">switch</span> ( c = in.charAt( i ) )&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'0'</span>:</div><div class="line">            <span class="keyword">if</span> ( nDigits &gt; <span class="number">0</span> )&#123;</div><div class="line">            nTrailZero += <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">            nLeadZero += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>; <span class="comment">// out of switch.</span></div><div class="line">        <span class="keyword">case</span> <span class="string">'1'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'2'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'3'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'4'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'5'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'6'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'7'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'8'</span>:</div><div class="line">        <span class="keyword">case</span> <span class="string">'9'</span>:</div><div class="line">            <span class="keyword">while</span> ( nTrailZero &gt; <span class="number">0</span> )&#123;</div><div class="line">            digits[nDigits++] = <span class="string">'0'</span>;</div><div class="line">            nTrailZero -= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            digits[nDigits++] = c;</div><div class="line">            <span class="keyword">break</span>; <span class="comment">// out of switch.</span></div><div class="line">        <span class="keyword">case</span> <span class="string">'.'</span>:</div><div class="line">            <span class="keyword">if</span> ( decSeen )&#123;</div><div class="line">            <span class="comment">// already saw one ., this is the 2nd.</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"multiple points"</span>);</div><div class="line">            &#125;</div><div class="line">            decPt = i;</div><div class="line">            <span class="keyword">if</span> ( signSeen )&#123;</div><div class="line">            decPt -= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            decSeen = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">break</span>; <span class="comment">// out of switch.</span></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span> digitLoop;</div><div class="line">        &#125;</div><div class="line">        i++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * At this point, we've scanned all the digits and decimal</div><div class="line">         * point we're going to see. Trim off leading and trailing</div><div class="line">         * zeros, which will just confuse us later, and adjust</div><div class="line">         * our initial decimal exponent accordingly.</div><div class="line">         * To review:</div><div class="line">         * we have seen i total characters.</div><div class="line">         * nLeadZero of them were zeros before any other digits.</div><div class="line">         * nTrailZero of them were zeros after any other digits.</div><div class="line">         * if ( decSeen ), then a . was seen after decPt characters</div><div class="line">         * ( including leading zeros which have been discarded )</div><div class="line">         * nDigits characters were neither lead nor trailing</div><div class="line">         * zeros, nor point</div><div class="line">         */</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * special hack: if we saw no non-zero digits, then the</div><div class="line">         * answer is zero!</div><div class="line">         * Unfortunately, we feel honor-bound to keep parsing!</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> ( nDigits == <span class="number">0</span> )&#123;</div><div class="line">        digits = zero;</div><div class="line">        nDigits = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> ( nLeadZero == <span class="number">0</span> )&#123;</div><div class="line">            <span class="comment">// we saw NO DIGITS AT ALL,</span></div><div class="line">            <span class="comment">// not even a crummy 0!</span></div><div class="line">            <span class="comment">// this is not allowed.</span></div><div class="line">            <span class="keyword">break</span> parseNumber; <span class="comment">// go throw exception</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* Our initial exponent is decPt, adjusted by the number of</span></div><div class="line">         * discarded zeros. Or, if there was no decPt,</div><div class="line">         * then its just nDigits adjusted by discarded trailing zeros.</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> ( decSeen )&#123;</div><div class="line">        decExp = decPt - nLeadZero;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        decExp = nDigits+nTrailZero;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Look for 'e' or 'E' and an optionally signed integer.</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> ( (i &lt; l) &amp;&amp;  ((c = in.charAt(i) )==<span class="string">'e'</span>) || (c == <span class="string">'E'</span>) )&#123;</div><div class="line">        <span class="built_in">int</span> expSign = <span class="number">1</span>;</div><div class="line">        <span class="built_in">int</span> expVal  = <span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> reallyBig = Integer.MAX_VALUE / <span class="number">10</span>;</div><div class="line">        <span class="built_in">boolean</span> expOverflow = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">switch</span>( in.charAt(++i) )&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</div><div class="line">            expSign = <span class="number">-1</span>;</div><div class="line">            <span class="comment">//FALLTHROUGH</span></div><div class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">int</span> expAt = i;</div><div class="line">        expLoop:</div><div class="line">        <span class="keyword">while</span> ( i &lt; l  )&#123;</div><div class="line">            <span class="keyword">if</span> ( expVal &gt;= reallyBig )&#123;</div><div class="line">            <span class="comment">// the next character will cause integer</span></div><div class="line">            <span class="comment">// overflow.</span></div><div class="line">            expOverflow = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">switch</span> ( c = in.charAt(i++) )&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'0'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'1'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'2'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'3'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'4'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'5'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'6'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'7'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'8'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'9'</span>:</div><div class="line">            expVal = expVal*<span class="number">10</span> + ( (<span class="built_in">int</span>)c - (<span class="built_in">int</span>)<span class="string">'0'</span> );</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">            i--;           <span class="comment">// back up.</span></div><div class="line">            <span class="keyword">break</span> expLoop; <span class="comment">// stop parsing exponent.</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">int</span> expLimit = bigDecimalExponent+nDigits+nTrailZero;</div><div class="line">        <span class="keyword">if</span> ( expOverflow || ( expVal &gt; expLimit ) )&#123;</div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="comment">// The intent here is to end up with</span></div><div class="line">            <span class="comment">// infinity or zero, as appropriate.</span></div><div class="line">            <span class="comment">// The reason for yielding such a small decExponent,</span></div><div class="line">            <span class="comment">// rather than something intuitive such as</span></div><div class="line">            <span class="comment">// expSign*Integer.MAX_VALUE, is that this value</span></div><div class="line">            <span class="comment">// is subject to further manipulation in</span></div><div class="line">            <span class="comment">// doubleValue() and floatValue(), and I don't want</span></div><div class="line">            <span class="comment">// it to be able to cause overflow there!</span></div><div class="line">            <span class="comment">// (The only way we can get into trouble here is for</span></div><div class="line">            <span class="comment">// really outrageous nDigits+nTrailZero, such as 2 billion. )</span></div><div class="line">            <span class="comment">//</span></div><div class="line">            decExp = expSign*expLimit;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// this should not overflow, since we tested</span></div><div class="line">            <span class="comment">// for expVal &gt; (MAX+N), where N &gt;= abs(decExp)</span></div><div class="line">            decExp = decExp + expSign*expVal;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// if we saw something not a digit ( or end of string )</span></div><div class="line">        <span class="comment">// after the [Ee][+-], without seeing any digits at all</span></div><div class="line">        <span class="comment">// this is certainly an error. If we saw some digits,</span></div><div class="line">        <span class="comment">// but then some trailing garbage, that might be ok.</span></div><div class="line">        <span class="comment">// so we just fall through in that case.</span></div><div class="line">        <span class="comment">// HUMBUG</span></div><div class="line">                <span class="keyword">if</span> ( i == expAt ) </div><div class="line">            <span class="keyword">break</span> parseNumber; <span class="comment">// certainly bad</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * We parsed everything we could.</div><div class="line">         * If there are leftovers, then this is not good input!</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> ( i &lt; l &amp;&amp;</div><div class="line">                ((i != l - <span class="number">1</span>) ||</div><div class="line">                (in.charAt(i) != <span class="string">'f'</span> &amp;&amp;</div><div class="line">                 in.charAt(i) != <span class="string">'F'</span> &amp;&amp;</div><div class="line">                 in.charAt(i) != <span class="string">'d'</span> &amp;&amp;</div><div class="line">                 in.charAt(i) != <span class="string">'D'</span>))) &#123;</div><div class="line">                <span class="keyword">break</span> parseNumber; <span class="comment">// go throw exception</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyFloatingDecimal( isNegative, decExp, digits, nDigits,  <span class="keyword">false</span> );</div><div class="line">    &#125; <span class="keyword">catch</span> ( StringIndexOutOfBoundsException e )&#123; &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException( in );</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">double</span></div><div class="line">    doubleValue()&#123;</div><div class="line">    <span class="built_in">int</span>    kDigits = Math.<span class="built_in">min</span>( nDigits, maxDecimalDigits+<span class="number">1</span> );</div><div class="line">    <span class="keyword">long</span>    lValue;</div><div class="line">    <span class="keyword">double</span>    dValue;</div><div class="line">    <span class="keyword">double</span>  rValue, tValue;</div><div class="line"></div><div class="line">    roundDir = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * convert the lead kDigits to a long integer.</div><div class="line">     */</div><div class="line">    <span class="comment">// (special performance hack: start to do it using int)</span></div><div class="line">    <span class="built_in">int</span> iValue = (<span class="built_in">int</span>)digits[<span class="number">0</span>]-(<span class="built_in">int</span>)<span class="string">'0'</span>;</div><div class="line">    <span class="built_in">int</span> iDigits = Math.<span class="built_in">min</span>( kDigits, intDecimalDigits );</div><div class="line">    <span class="keyword">for</span> ( <span class="built_in">int</span> i=<span class="number">1</span>; i &lt; iDigits; i++ )&#123;</div><div class="line">        iValue = iValue*<span class="number">10</span> + (<span class="built_in">int</span>)digits[i]-(<span class="built_in">int</span>)<span class="string">'0'</span>;</div><div class="line">    &#125;</div><div class="line">    lValue = (<span class="keyword">long</span>)iValue;</div><div class="line">    <span class="keyword">for</span> ( <span class="built_in">int</span> i=iDigits; i &lt; kDigits; i++ )&#123;</div><div class="line">        lValue = lValue*<span class="number">10</span>L + (<span class="keyword">long</span>)((<span class="built_in">int</span>)digits[i]-(<span class="built_in">int</span>)<span class="string">'0'</span>);</div><div class="line">    &#125;</div><div class="line">    dValue = (<span class="keyword">double</span>)lValue;</div><div class="line">    <span class="built_in">int</span> <span class="built_in">exp</span> = decExponent-kDigits;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * lValue now contains a long integer with the value of</div><div class="line">     * the first kDigits digits of the number.</div><div class="line">     * dValue contains the (double) of the same.</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( nDigits &lt;= maxDecimalDigits )&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * possibly an easy case.</div><div class="line">         * We know that the digits can be represented</div><div class="line">         * exactly. And if the exponent isn't too outrageous,</div><div class="line">         * the whole thing can be done with one operation,</div><div class="line">         * thus one rounding error.</div><div class="line">             * Note that all our constructors trim all leading and</div><div class="line">             * trailing zeros, so simple values (including zero)</div><div class="line">             * will always end up here</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0</span> || dValue == <span class="number">0.0</span>)</div><div class="line">                <span class="keyword">return</span> (isNegative)? -dValue : dValue; <span class="comment">// small floating integer</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">exp</span> &gt;= <span class="number">0</span> )&#123;</div><div class="line">        <span class="keyword">if</span> ( <span class="built_in">exp</span> &lt;= maxSmallTen )&#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * Can get the answer with one operation,</div><div class="line">             * thus one roundoff.</div><div class="line">             */</div><div class="line">            rValue = dValue * small10pow[<span class="built_in">exp</span>];</div><div class="line">            <span class="keyword">if</span> ( mustSetRoundDir )&#123;</div><div class="line">            tValue = rValue / small10pow[<span class="built_in">exp</span>];</div><div class="line">            roundDir = ( tValue ==  dValue ) ? <span class="number">0</span></div><div class="line">                      :( tValue &lt; dValue ) ? <span class="number">1</span></div><div class="line">                      : <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> (isNegative)? -rValue : rValue;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">int</span> slop = maxDecimalDigits - kDigits;</div><div class="line">        <span class="keyword">if</span> ( <span class="built_in">exp</span> &lt;= maxSmallTen+slop )&#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * We can multiply dValue by 10^(slop)</div><div class="line">             * and it is still "small" and exact.</div><div class="line">             * Then we can multiply by 10^(exp-slop)</div><div class="line">             * with one rounding.</div><div class="line">             */</div><div class="line">            dValue *= small10pow[slop];</div><div class="line">            rValue = dValue * small10pow[<span class="built_in">exp</span>-slop];</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ( mustSetRoundDir )&#123;</div><div class="line">            tValue = rValue / small10pow[<span class="built_in">exp</span>-slop];</div><div class="line">            roundDir = ( tValue ==  dValue ) ? <span class="number">0</span></div><div class="line">                  :( tValue &lt; dValue ) ? <span class="number">1</span></div><div class="line">                  : <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> (isNegative)? -rValue : rValue;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Else we have a hard case with a positive exp.</div><div class="line">         */</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ( <span class="built_in">exp</span> &gt;= -maxSmallTen )&#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * Can get the answer in one division.</div><div class="line">             */</div><div class="line">            rValue = dValue / small10pow[-<span class="built_in">exp</span>];</div><div class="line">            tValue = rValue * small10pow[-<span class="built_in">exp</span>];</div><div class="line">            <span class="keyword">if</span> ( mustSetRoundDir )&#123;</div><div class="line">            roundDir = ( tValue ==  dValue ) ? <span class="number">0</span></div><div class="line">                  :( tValue &lt; dValue ) ? <span class="number">1</span></div><div class="line">                  : <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> (isNegative)? -rValue : rValue;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Else we have a hard case with a negative exp.</div><div class="line">         */</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Harder cases:</div><div class="line">     * The sum of digits plus exponent is greater than</div><div class="line">     * what we think we can do with one error.</div><div class="line">     *</div><div class="line">     * Start by approximating the right answer by,</div><div class="line">     * naively, scaling by powers of 10.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> ( <span class="built_in">exp</span> &gt; <span class="number">0</span> )&#123;</div><div class="line">        <span class="keyword">if</span> ( decExponent &gt; maxDecimalExponent+<span class="number">1</span> )&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Lets face it. This is going to be</div><div class="line">         * Infinity. Cut to the chase.</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> (isNegative)? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (<span class="built_in">exp</span>&amp;<span class="number">15</span>) != <span class="number">0</span> )&#123;</div><div class="line">        dValue *= small10pow[<span class="built_in">exp</span>&amp;<span class="number">15</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (<span class="built_in">exp</span>&gt;&gt;=<span class="number">4</span>) != <span class="number">0</span> )&#123;</div><div class="line">        <span class="built_in">int</span> j;</div><div class="line">        <span class="keyword">for</span>( j = <span class="number">0</span>; <span class="built_in">exp</span> &gt; <span class="number">1</span>; j++, <span class="built_in">exp</span>&gt;&gt;=<span class="number">1</span> )&#123;</div><div class="line">            <span class="keyword">if</span> ( (<span class="built_in">exp</span>&amp;<span class="number">1</span>)!=<span class="number">0</span>)</div><div class="line">            dValue *= big10pow[j];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * The reason for the weird exp &gt; 1 condition</div><div class="line">         * in the above loop was so that the last multiply</div><div class="line">         * would get unrolled. We handle it here.</div><div class="line">         * It could overflow.</div><div class="line">         */</div><div class="line">        <span class="keyword">double</span> t = dValue * big10pow[j];</div><div class="line">        <span class="keyword">if</span> ( Double.isInfinite( t ) )&#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * It did overflow.</div><div class="line">             * Look more closely at the result.</div><div class="line">             * If the exponent is just one too large,</div><div class="line">             * then use the maximum finite as our estimate</div><div class="line">             * value. Else call the result infinity</div><div class="line">             * and punt it.</div><div class="line">             * ( I presume this could happen because</div><div class="line">             * rounding forces the result here to be</div><div class="line">             * an ULP or two larger than</div><div class="line">             * Double.MAX_VALUE ).</div><div class="line">             */</div><div class="line">            t = dValue / <span class="number">2.0</span>;</div><div class="line">            t *= big10pow[j];</div><div class="line">            <span class="keyword">if</span> ( Double.isInfinite( t ) )&#123;</div><div class="line">            <span class="keyword">return</span> (isNegative)? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;</div><div class="line">            &#125;</div><div class="line">            t = Double.MAX_VALUE;</div><div class="line">        &#125;</div><div class="line">        dValue = t;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">exp</span> &lt; <span class="number">0</span> )&#123;</div><div class="line">        <span class="built_in">exp</span> = -<span class="built_in">exp</span>;</div><div class="line">        <span class="keyword">if</span> ( decExponent &lt; minDecimalExponent<span class="number">-1</span> )&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Lets face it. This is going to be</div><div class="line">         * zero. Cut to the chase.</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> (isNegative)? <span class="number">-0.0</span> : <span class="number">0.0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (<span class="built_in">exp</span>&amp;<span class="number">15</span>) != <span class="number">0</span> )&#123;</div><div class="line">        dValue /= small10pow[<span class="built_in">exp</span>&amp;<span class="number">15</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (<span class="built_in">exp</span>&gt;&gt;=<span class="number">4</span>) != <span class="number">0</span> )&#123;</div><div class="line">        <span class="built_in">int</span> j;</div><div class="line">        <span class="keyword">for</span>( j = <span class="number">0</span>; <span class="built_in">exp</span> &gt; <span class="number">1</span>; j++, <span class="built_in">exp</span>&gt;&gt;=<span class="number">1</span> )&#123;</div><div class="line">            <span class="keyword">if</span> ( (<span class="built_in">exp</span>&amp;<span class="number">1</span>)!=<span class="number">0</span>)</div><div class="line">            dValue *= tiny10pow[j];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * The reason for the weird exp &gt; 1 condition</div><div class="line">         * in the above loop was so that the last multiply</div><div class="line">         * would get unrolled. We handle it here.</div><div class="line">         * It could underflow.</div><div class="line">         */</div><div class="line">        <span class="keyword">double</span> t = dValue * tiny10pow[j];</div><div class="line">        <span class="keyword">if</span> ( t == <span class="number">0.0</span> )&#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * It did underflow.</div><div class="line">             * Look more closely at the result.</div><div class="line">             * If the exponent is just one too small,</div><div class="line">             * then use the minimum finite as our estimate</div><div class="line">             * value. Else call the result 0.0</div><div class="line">             * and punt it.</div><div class="line">             * ( I presume this could happen because</div><div class="line">             * rounding forces the result here to be</div><div class="line">             * an ULP or two less than</div><div class="line">             * Double.MIN_VALUE ).</div><div class="line">             */</div><div class="line">            t = dValue * <span class="number">2.0</span>;</div><div class="line">            t *= tiny10pow[j];</div><div class="line">            <span class="keyword">if</span> ( t == <span class="number">0.0</span> )&#123;</div><div class="line">            <span class="keyword">return</span> (isNegative)? <span class="number">-0.0</span> : <span class="number">0.0</span>;</div><div class="line">            &#125;</div><div class="line">            t = Double.MIN_VALUE;</div><div class="line">        &#125;</div><div class="line">        dValue = t;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * dValue is now approximately the result.</div><div class="line">     * The hard part is adjusting it, by comparison</div><div class="line">     * with FDBigInt arithmetic.</div><div class="line">     * Formulate the EXACT big-number result as</div><div class="line">     * bigD0 * 10^exp</div><div class="line">     */</div><div class="line">    FDBigInt bigD0 = <span class="keyword">new</span> FDBigInt( lValue, digits, kDigits, nDigits );</div><div class="line">    <span class="built_in">exp</span>   = decExponent - nDigits;</div><div class="line"></div><div class="line">    correctionLoop:</div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">        <span class="comment">/* AS A SIDE EFFECT, THIS METHOD WILL SET THE INSTANCE VARIABLES</span></div><div class="line">         * bigIntExp and bigIntNBits</div><div class="line">         */</div><div class="line">        FDBigInt bigB = doubleToBigInt( dValue );</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Scale bigD, bigB appropriately for</div><div class="line">         * big-integer operations.</div><div class="line">         * Naively, we multiply by powers of ten</div><div class="line">         * and powers of two. What we actually do</div><div class="line">         * is keep track of the powers of 5 and</div><div class="line">         * powers of 2 we would use, then factor out</div><div class="line">         * common divisors before doing the work.</div><div class="line">         */</div><div class="line">        <span class="built_in">int</span> B2, B5; <span class="comment">// powers of 2, 5 in bigB</span></div><div class="line">        <span class="built_in">int</span>    D2, D5;    <span class="comment">// powers of 2, 5 in bigD</span></div><div class="line">        <span class="built_in">int</span> Ulp2;   <span class="comment">// powers of 2 in halfUlp.</span></div><div class="line">        <span class="keyword">if</span> ( <span class="built_in">exp</span> &gt;= <span class="number">0</span> )&#123;</div><div class="line">        B2 = B5 = <span class="number">0</span>;</div><div class="line">        D2 = D5 = <span class="built_in">exp</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        B2 = B5 = -<span class="built_in">exp</span>;</div><div class="line">        D2 = D5 = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( bigIntExp &gt;= <span class="number">0</span> )&#123;</div><div class="line">        B2 += bigIntExp;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        D2 -= bigIntExp;</div><div class="line">        &#125;</div><div class="line">        Ulp2 = B2;</div><div class="line">        <span class="comment">// shift bigB and bigD left by a number s. t.</span></div><div class="line">        <span class="comment">// halfUlp is still an integer.</span></div><div class="line">        <span class="built_in">int</span> hulpbias;</div><div class="line">        <span class="keyword">if</span> ( bigIntExp+bigIntNBits &lt;= -expBias+<span class="number">1</span> )&#123;</div><div class="line">        <span class="comment">// This is going to be a denormalized number</span></div><div class="line">        <span class="comment">// (if not actually zero).</span></div><div class="line">        <span class="comment">// half an ULP is at 2^-(expBias+expShift+1)</span></div><div class="line">        hulpbias = bigIntExp+ expBias + expShift;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        hulpbias = expShift + <span class="number">2</span> - bigIntNBits;</div><div class="line">        &#125;</div><div class="line">        B2 += hulpbias;</div><div class="line">        D2 += hulpbias;</div><div class="line">        <span class="comment">// if there are common factors of 2, we might just as well</span></div><div class="line">        <span class="comment">// factor them out, as they add nothing useful.</span></div><div class="line">        <span class="built_in">int</span> common2 = Math.<span class="built_in">min</span>( B2, Math.<span class="built_in">min</span>( D2, Ulp2 ) );</div><div class="line">        B2 -= common2;</div><div class="line">        D2 -= common2;</div><div class="line">        Ulp2 -= common2;</div><div class="line">        <span class="comment">// do multiplications by powers of 5 and 2</span></div><div class="line">        bigB = multPow52( bigB, B5, B2 );</div><div class="line">        FDBigInt bigD = multPow52( <span class="keyword">new</span> FDBigInt( bigD0 ), D5, D2 );</div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">// to recap:</span></div><div class="line">        <span class="comment">// bigB is the scaled-big-int version of our floating-point</span></div><div class="line">        <span class="comment">// candidate.</span></div><div class="line">        <span class="comment">// bigD is the scaled-big-int version of the exact value</span></div><div class="line">        <span class="comment">// as we understand it.</span></div><div class="line">        <span class="comment">// halfUlp is 1/2 an ulp of bigB, except for special cases</span></div><div class="line">        <span class="comment">// of exact powers of 2</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">// the plan is to compare bigB with bigD, and if the difference</span></div><div class="line">        <span class="comment">// is less than halfUlp, then we're satisfied. Otherwise,</span></div><div class="line">        <span class="comment">// use the ratio of difference to halfUlp to calculate a fudge</span></div><div class="line">        <span class="comment">// factor to add to the floating value, then go 'round again.</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        FDBigInt diff;</div><div class="line">        <span class="built_in">int</span> cmpResult;</div><div class="line">        <span class="built_in">boolean</span> overvalue;</div><div class="line">        <span class="keyword">if</span> ( (cmpResult = bigB.cmp( bigD ) ) &gt; <span class="number">0</span> )&#123;</div><div class="line">        overvalue = <span class="keyword">true</span>; <span class="comment">// our candidate is too big.</span></div><div class="line">        diff = bigB.sub( bigD );</div><div class="line">        <span class="keyword">if</span> ( (bigIntNBits == <span class="number">1</span>) &amp;&amp; (bigIntExp &gt; -expBias) )&#123;</div><div class="line">            <span class="comment">// candidate is a normalized exact power of 2 and</span></div><div class="line">            <span class="comment">// is too big. We will be subtracting.</span></div><div class="line">            <span class="comment">// For our purposes, ulp is the ulp of the</span></div><div class="line">            <span class="comment">// next smaller range.</span></div><div class="line">            Ulp2 -= <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> ( Ulp2 &lt; <span class="number">0</span> )&#123;</div><div class="line">            <span class="comment">// rats. Cannot de-scale ulp this far.</span></div><div class="line">            <span class="comment">// must scale diff in other direction.</span></div><div class="line">            Ulp2 = <span class="number">0</span>;</div><div class="line">            diff.lshiftMe( <span class="number">1</span> );</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( cmpResult &lt; <span class="number">0</span> )&#123;</div><div class="line">        overvalue = <span class="keyword">false</span>; <span class="comment">// our candidate is too small.</span></div><div class="line">        diff = bigD.sub( bigB );</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// the candidate is exactly right!</span></div><div class="line">        <span class="comment">// this happens with surprising frequency</span></div><div class="line">        <span class="keyword">break</span> correctionLoop;</div><div class="line">        &#125;</div><div class="line">        FDBigInt halfUlp = constructPow52( B5, Ulp2 );</div><div class="line">        <span class="keyword">if</span> ( (cmpResult = diff.cmp( halfUlp ) ) &lt; <span class="number">0</span> )&#123;</div><div class="line">        <span class="comment">// difference is small.</span></div><div class="line">        <span class="comment">// this is close enough</span></div><div class="line">        roundDir = overvalue ? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        <span class="keyword">break</span> correctionLoop;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( cmpResult == <span class="number">0</span> )&#123;</div><div class="line">        <span class="comment">// difference is exactly half an ULP</span></div><div class="line">        <span class="comment">// round to some other value maybe, then finish</span></div><div class="line">        dValue += <span class="number">0.5</span>*ulp( dValue, overvalue );</div><div class="line">        <span class="comment">// should check for bigIntNBits == 1 here??</span></div><div class="line">        roundDir = overvalue ? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        <span class="keyword">break</span> correctionLoop;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// difference is non-trivial.</span></div><div class="line">        <span class="comment">// could scale addend by ratio of difference to</span></div><div class="line">        <span class="comment">// halfUlp here, if we bothered to compute that difference.</span></div><div class="line">        <span class="comment">// Most of the time ( I hope ) it is about 1 anyway.</span></div><div class="line">        dValue += ulp( dValue, overvalue );</div><div class="line">        <span class="keyword">if</span> ( dValue == <span class="number">0.0</span> || dValue == Double.POSITIVE_INFINITY )</div><div class="line">             <span class="keyword">break</span> correctionLoop; <span class="comment">// oops. Fell off end of range.</span></div><div class="line">        <span class="keyword">continue</span>; <span class="comment">// try again.</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (isNegative)? -dValue : dValue;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">     * Make a floating double into a FDBigInt.</div><div class="line">     * This could also be structured as a FDBigInt</div><div class="line">     * constructor, but we'd have to build a lot of knowledge</div><div class="line">     * about floating-point representation into it, and we don't want to.</div><div class="line">     *</div><div class="line">     * AS A SIDE EFFECT, THIS METHOD WILL SET THE INSTANCE VARIABLES</div><div class="line">     * bigIntExp and bigIntNBits</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> FDBigInt</div><div class="line">    doubleToBigInt( <span class="keyword">double</span> dval )&#123;</div><div class="line">    <span class="keyword">long</span> lbits = Double.doubleToLongBits( dval ) &amp; ~signMask;</div><div class="line">    <span class="built_in">int</span> binexp = (<span class="built_in">int</span>)(lbits &gt;&gt;&gt; expShift);</div><div class="line">    lbits &amp;= fractMask;</div><div class="line">    <span class="keyword">if</span> ( binexp &gt; <span class="number">0</span> )&#123;</div><div class="line">        lbits |= fractHOB;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ( lbits == <span class="number">0</span>L )</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Assertion botch: doubleToBigInt(0.0)"</span>);</div><div class="line">        binexp +=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> ( (lbits &amp; fractHOB ) == <span class="number">0</span>L)&#123;</div><div class="line">        lbits &lt;&lt;= <span class="number">1</span>;</div><div class="line">        binexp -= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    binexp -= expBias;</div><div class="line">    <span class="built_in">int</span> nbits = countBits( lbits );</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * We now know where the high-order 1 bit is,</div><div class="line">     * and we know how many there are.</div><div class="line">     */</div><div class="line">    <span class="built_in">int</span> lowOrderZeros = expShift+<span class="number">1</span>-nbits;</div><div class="line">    lbits &gt;&gt;&gt;= lowOrderZeros;</div><div class="line"></div><div class="line">    bigIntExp = binexp+<span class="number">1</span>-nbits;</div><div class="line">    bigIntNBits = nbits;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FDBigInt( lbits );</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// a common operation</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FDBigInt</div><div class="line">    multPow52( FDBigInt v, <span class="built_in">int</span> p5, <span class="built_in">int</span> p2 )&#123;</div><div class="line">    <span class="keyword">if</span> ( p5 != <span class="number">0</span> )&#123;</div><div class="line">        <span class="keyword">if</span> ( p5 &lt; small5pow.length )&#123;</div><div class="line">        v = v.mult( small5pow[p5] );</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        v = v.mult( big5pow( p5 ) );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( p2 != <span class="number">0</span> )&#123;</div><div class="line">        v.lshiftMe( p2 );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> v;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// another common operation</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FDBigInt</div><div class="line">    constructPow52( <span class="built_in">int</span> p5, <span class="built_in">int</span> p2 )&#123;</div><div class="line">    FDBigInt v = <span class="keyword">new</span> FDBigInt( big5pow( p5 ) );</div><div class="line">    <span class="keyword">if</span> ( p2 != <span class="number">0</span> )&#123;</div><div class="line">        v.lshiftMe( p2 );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> v;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Compute a number that is the ULP of the given value,</div><div class="line">     * for purposes of addition/subtraction. Generally easy.</div><div class="line">     * More difficult if subtracting and the argument</div><div class="line">     * is a normalized a power of 2, as the ULP changes at these points.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span></div><div class="line">    ulp( <span class="keyword">double</span> dval, <span class="built_in">boolean</span> subtracting )&#123;</div><div class="line">    <span class="keyword">long</span> lbits = Double.doubleToLongBits( dval ) &amp; ~signMask;</div><div class="line">    <span class="built_in">int</span> binexp = (<span class="built_in">int</span>)(lbits &gt;&gt;&gt; expShift);</div><div class="line">    <span class="keyword">double</span> ulpval;</div><div class="line">    <span class="keyword">if</span> ( subtracting &amp;&amp; ( binexp &gt;= expShift ) &amp;&amp; ((lbits&amp;fractMask) == <span class="number">0</span>L) )&#123;</div><div class="line">        <span class="comment">// for subtraction from normalized, powers of 2,</span></div><div class="line">        <span class="comment">// use next-smaller exponent</span></div><div class="line">        binexp -= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( binexp &gt; expShift )&#123;</div><div class="line">        ulpval = Double.longBitsToDouble( ((<span class="keyword">long</span>)(binexp-expShift))&lt;&lt;expShift );</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( binexp == <span class="number">0</span> )&#123;</div><div class="line">        ulpval = Double.MIN_VALUE;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ulpval = Double.longBitsToDouble( <span class="number">1</span>L&lt;&lt;(binexp<span class="number">-1</span>) );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( subtracting ) ulpval = - ulpval;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ulpval;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * count number of bits from high-order 1 bit to low-order 1 bit,</div><div class="line">     * inclusive.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span></div><div class="line">    countBits( <span class="keyword">long</span> v )&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// the strategy is to shift until we get a non-zero sign bit</span></div><div class="line">    <span class="comment">// then shift until we have no bits left, counting the difference.</span></div><div class="line">    <span class="comment">// we do byte shifting as a hack. Hope it helps.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">if</span> ( v == <span class="number">0</span>L ) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( ( v &amp; highbyte ) == <span class="number">0</span>L )&#123;</div><div class="line">        v &lt;&lt;= <span class="number">8</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> ( v &gt; <span class="number">0</span>L ) &#123; <span class="comment">// i.e. while ((v&amp;highbit) == 0L )</span></div><div class="line">        v &lt;&lt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">int</span> n = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (( v &amp; lowbytes ) != <span class="number">0</span>L )&#123;</div><div class="line">        v &lt;&lt;= <span class="number">8</span>;</div><div class="line">        n += <span class="number">8</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> ( v != <span class="number">0</span>L )&#123;</div><div class="line">        v &lt;&lt;= <span class="number">1</span>;</div><div class="line">        n += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Keep big powers of 5 handy for future reference.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FDBigInt b5p[];</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> FDBigInt</div><div class="line">    big5pow( <span class="built_in">int</span> p )&#123;</div><div class="line">    <span class="keyword">if</span> ( p &lt; <span class="number">0</span> )</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( <span class="string">"Assertion botch: negative power of 5"</span>);</div><div class="line">    <span class="keyword">if</span> ( b5p == <span class="keyword">null</span> )&#123;</div><div class="line">        b5p = <span class="keyword">new</span> FDBigInt[ p+<span class="number">1</span> ];</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (b5p.length &lt;= p )&#123;</div><div class="line">        FDBigInt t[] = <span class="keyword">new</span> FDBigInt[ p+<span class="number">1</span> ];</div><div class="line">        System.arraycopy( b5p, <span class="number">0</span>, t, <span class="number">0</span>, b5p.length );</div><div class="line">        b5p = t;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( b5p[p] != <span class="keyword">null</span> )</div><div class="line">        <span class="keyword">return</span> b5p[p];</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( p &lt; small5pow.length )</div><div class="line">        <span class="keyword">return</span> b5p[p] = <span class="keyword">new</span> FDBigInt( small5pow[p] );</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( p &lt; long5pow.length )</div><div class="line">        <span class="keyword">return</span> b5p[p] = <span class="keyword">new</span> FDBigInt( long5pow[p] );</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// construct the value.</span></div><div class="line">        <span class="comment">// recursively.</span></div><div class="line">        <span class="built_in">int</span> q, r;</div><div class="line">        <span class="comment">// in order to compute 5^p,</span></div><div class="line">        <span class="comment">// compute its square root, 5^(p/2) and square.</span></div><div class="line">        <span class="comment">// or, let q = p / 2, r = p -q, then</span></div><div class="line">        <span class="comment">// 5^p = 5^(q+r) = 5^q * 5^r</span></div><div class="line">        q = p &gt;&gt; <span class="number">1</span>;</div><div class="line">        r = p - q;</div><div class="line">        FDBigInt bigq =  b5p[q];</div><div class="line">        <span class="keyword">if</span> ( bigq == <span class="keyword">null</span> )</div><div class="line">        bigq = big5pow ( q );</div><div class="line">        <span class="keyword">if</span> ( r &lt; small5pow.length )&#123;</div><div class="line">        <span class="keyword">return</span> (b5p[p] = bigq.mult( small5pow[r] ) );</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">        FDBigInt bigr = b5p[ r ];</div><div class="line">        <span class="keyword">if</span> ( bigr == <span class="keyword">null</span> )</div><div class="line">            bigr = big5pow( r );</div><div class="line">        <span class="keyword">return</span> (b5p[p] = bigq.mult( bigr ) );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      StringToDouble源码解析及更快速的实现
    
    </summary>
    
      <category term="源码" scheme="http://yoursite.com/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="FloatingDecimal" scheme="http://yoursite.com/tags/FloatingDecimal/"/>
    
  </entry>
  
  <entry>
    <title>Storm 学习笔记</title>
    <link href="http://yoursite.com/2016/04/27/Storm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/27/Storm学习笔记/</id>
    <published>2016-04-27T11:50:25.000Z</published>
    <updated>2016-05-13T07:38:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Storm的基本原理"><a href="#Storm的基本原理" class="headerlink" title="Storm的基本原理"></a>Storm的基本原理</h1><p><code>Storm</code>是一个免费开源的<strong>分布式实时计算系统</strong><br><code>Storm</code>是随着实时大数据处理的需求而生的，最早用在微博社交工具Twitter(推特)上，在分布式的环境下不间断地实时处理少量的数据。<br>目前<code>Storm</code>主要用在以下3个方面:</p>
<ul>
<li>流处理(Stream Processing)</li>
<li>连续计算(Continuous Computation)</li>
<li>分布式RPC(Distributed RPC)</li>
</ul>
<h2 id="Storm的技术核心和基本组成"><a href="#Storm的技术核心和基本组成" class="headerlink" title="Storm的技术核心和基本组成"></a>Storm的技术核心和基本组成</h2><ul>
<li>Topology(拓扑)</li>
<li>Stream(流)</li>
<li>Spout(喷口)</li>
<li>Bolt(螺栓)</li>
<li>Stream grouping(流分组)</li>
<li>Task(任务)</li>
<li>Worker(工作进程)</li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="主控节点和工作节点"><a href="#主控节点和工作节点" class="headerlink" title="主控节点和工作节点"></a>主控节点和工作节点</h3><p>Storm集群中有两类节点:<strong><em>主控节点</em></strong>(Master Node)和<strong><em>工作节点</em></strong>(Worker Node)。其中，主控节点只有一个，而工作节点可以有多个。</p>
<h3 id="Nimbus进程与Supervisor进程"><a href="#Nimbus进程与Supervisor进程" class="headerlink" title="Nimbus进程与Supervisor进程"></a>Nimbus进程与Supervisor进程</h3><p><strong><em>主控节点</em></strong>运行一个称为Nimbus的守护进程。Nimbus负责在集群中分发代码，对节点分配任务，并监视主机故障。<br>每个<strong><em>工作节点</em></strong>运行一个称为Supervisor的守护进程。Supervisor监听其主机上已经分配的主机的作业，启动和停止Nimbus已经分配的工作进程。</p>
<h3 id="storm-yaml"><a href="#storm-yaml" class="headerlink" title="storm.yaml"></a>storm.yaml</h3><p>修改 STORM_HOME 目录下的 conf/storm.yaml 文件，可以覆盖 Storm 配置的默认值。<br>storm.yaml会覆盖defaults.yaml中的任何内容。以下几个配置是必须要设置的。</p>
<h4 id="storm-zookeeper-servers"><a href="#storm-zookeeper-servers" class="headerlink" title="storm.zookeeper.servers"></a>storm.zookeeper.servers</h4><p>这是一个为Storm集群服务的ZooKeeper集群的主机列表，它的配置应该类似于:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">storm</span><span class="selector-class">.zookeeper</span><span class="selector-class">.servers</span>:</div><div class="line"><span class="selector-tag">-</span> "111<span class="selector-class">.222</span><span class="selector-class">.333</span><span class="selector-class">.444</span>"</div><div class="line"><span class="selector-tag">-</span> "555<span class="selector-class">.666</span><span class="selector-class">.777</span><span class="selector-class">.888</span>"</div><div class="line"><span class="selector-tag">-</span> "555<span class="selector-class">.666</span><span class="selector-class">.777</span><span class="selector-class">.889</span>"</div></pre></td></tr></table></figure></p>
<p>注:</p>
<ul>
<li>如果你的ZooKeeper集群使用的端口和默认的端口不相同，应该也设置“storm.zookeeper.port”的值。</li>
<li>ZooKeeper只能部署奇数个，偶数个是不可以的。<br>选举机制(FastLeaderElection算法)：sid最大且被超过集群中超过半数的机器拥护就会成为leader.<br>所以只有两种情况无法选出leader：<br>整个集群只有2台服务器（注意不是只剩2台，而是集群的总节点数为2）<br>整个集群超过半数机器挂掉。<br>所谓的偶数问题其实是另一个集群优化配置问题，即:集群的容灾数量=集群总节点数/2-1<br>假如集群有5节点，那么最多允许2个节点挂掉，如果有3节点挂了，那么整个集群的选举结果不会满足条件：集群中超过半数的机器拥护。<br>假如集群有6个节点，那么最多也只能挂掉2台，因为挂了3台时，选举结果也不会满足条件:集群中超过半数的机器拥护。<br>结果可以看出，多那一台用处并不大。所以集群总数推荐为奇数。</li>
</ul>
<h4 id="storm-local-dir"><a href="#storm-local-dir" class="headerlink" title="storm.local.dir"></a>storm.local.dir</h4><p>Nimbus 和 Supervisor 守护进程需要在本地硬盘的一个目录存储少量的状态(如jars、confs等)。应该在每台主机上创建该目录，赋予它适当的权限，然后使用该配置填写目录位置。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">storm<span class="selector-class">.local</span><span class="selector-class">.dir</span>:<span class="string">"/mnt/storm"</span></div></pre></td></tr></table></figure></p>
<h4 id="nimbus-host"><a href="#nimbus-host" class="headerlink" title="nimbus.host"></a>nimbus.host</h4><p>工作节点为了下载拓扑的jar和confs文件，需要知道哪些主机是主控节点。例如:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nimbus<span class="selector-class">.host</span>:<span class="string">"111.222.333.444"</span></div></pre></td></tr></table></figure></p>
<h4 id="supervisor-slots-ports"><a href="#supervisor-slots-ports" class="headerlink" title="supervisor.slots.ports"></a>supervisor.slots.ports</h4><p>对于每个工作节点,通过该配置项来设置该节点上运行多少个Worker。每个Worker使用一个端口接收消息,此设置定义为使用哪些端口是打开的。定义几个端口,Storm将分配几个Worker在这台主机上运行。<br>此设置默认为在端口6700、6701、6702、6703上配置运行4个Worker。<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">supervisor.slots.ports:</div><div class="line">-<span class="ruby"> <span class="number">6700</span></span></div><div class="line">-<span class="ruby"> <span class="number">6701</span></span></div><div class="line">-<span class="ruby"> <span class="number">6702</span></span></div><div class="line">-<span class="ruby"> <span class="number">6703</span></span></div></pre></td></tr></table></figure></p>
<h1 id="Storm的安装与配置"><a href="#Storm的安装与配置" class="headerlink" title="Storm的安装与配置"></a>Storm的安装与配置</h1><h1 id="ToPology组件"><a href="#ToPology组件" class="headerlink" title="ToPology组件"></a>ToPology组件</h1><h1 id="Spout组件"><a href="#Spout组件" class="headerlink" title="Spout组件"></a>Spout组件</h1><h1 id="Bolt组件"><a href="#Bolt组件" class="headerlink" title="Bolt组件"></a>Bolt组件</h1><h1 id="ZooKeeper集群"><a href="#ZooKeeper集群" class="headerlink" title="ZooKeeper集群"></a>ZooKeeper集群</h1><p>ZooKeeper 下载安装<br>下载zookeeper的安装包之后, 解压到合适目录. 进入zookeeper目录下的conf子目录, 创建zoo.cfg:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">tickTime</span>=<span class="number">2000</span>    </div><div class="line"><span class="attr">dataDir</span>=/Users/apple/zookeeper/data    </div><div class="line"><span class="attr">dataLogDir</span>=/Users/apple/zookeeper/logs    </div><div class="line"><span class="attr">clientPort</span>=<span class="number">4180</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      这是一篇关于学习和使用Storm 的教程
    
    </summary>
    
      <category term="Storm" scheme="http://yoursite.com/categories/Storm/"/>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 教程</title>
    <link href="http://yoursite.com/2016/04/18/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/18/MongoDB学习笔记/</id>
    <published>2016-04-18T11:50:25.000Z</published>
    <updated>2016-04-26T12:43:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB-简介"><a href="#MongoDB-简介" class="headerlink" title="MongoDB 简介"></a>MongoDB 简介</h1><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>
<h2 id="NoSQL-简介"><a href="#NoSQL-简介" class="headerlink" title="NoSQL 简介"></a>NoSQL 简介</h2><p>NoSQL = Not Only SQL ;指的是非关系型的数据库;是对不同于传统的关系型数据库的数据库管理系统的统称。<br>NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p>
<h3 id="RDBMS-vs-NoSQL"><a href="#RDBMS-vs-NoSQL" class="headerlink" title="RDBMS vs NoSQL"></a>RDBMS vs NoSQL</h3><p><strong>RDBMS</strong>:关系数据库管理系统</p>
<ul>
<li>高度组织化结构化数据 </li>
<li>结构化查询语言（SQL） (SQL) </li>
<li>数据和关系都存储在单独的表中。 </li>
<li>数据操纵语言，数据定义语言 </li>
<li>严格的一致性</li>
<li>基础事务</li>
</ul>
<p><strong>NoSQL</strong></p>
<ul>
<li>代表着不仅仅是SQL</li>
<li>没有声明性查询语言</li>
<li>没有预定义的模式</li>
<li>键 - 值对存储，列存储，文档存储，图形数据库</li>
<li>最终一致性，而非ACID属性</li>
<li>非结构化和不可预知的数据</li>
<li>CAP定理 </li>
<li>高性能，高可用性和可伸缩性</li>
</ul>
<h3 id="NoSQL-数据库分类"><a href="#NoSQL-数据库分类" class="headerlink" title="NoSQL 数据库分类"></a>NoSQL 数据库分类</h3><p><img src="/uploads/mongo1.jpg" alt=""></p>
<h2 id="MongoDB-简介-1"><a href="#MongoDB-简介-1" class="headerlink" title="MongoDB 简介"></a>MongoDB 简介</h2><p><strong>什么是MongoDB？</strong></p>
<ul>
<li>MongoDB 是由C++语言编写的，是一个<strong>基于分布式文件存储</strong>的开源数据库系统。</li>
<li>在高负载的情况下，添加更多的节点，可以<strong>保证服务器性能</strong>。</li>
<li>MongoDB 旨在为WEB应用提供可扩展的<strong>高性能数据存储</strong>解决方案。</li>
<li>MongoDB 将数据存储为一个文档，数据结构由<strong>键值(key=&gt;value)对</strong>组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</li>
</ul>
<p><img src="/uploads/mongo2.jpg" alt=""><br><strong>主要特点</strong></p>
<ul>
<li>MongoDB提供了一个<strong>面向文档存储</strong>，操作起来比较简单和容易。</li>
<li>你可以在MongoDB记录中<strong>设置任何属性的索引</strong> (如：FirstName=”Sameer”,Address=”8 Gandhi Road”)来实现更快的排序。</li>
<li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li>
<li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的<strong>其他节点</strong>上这就是所谓的<strong>分片</strong>。</li>
<li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li>
<li>MongoDb 使用<strong>update()</strong>命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li>
<li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li>
<li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li>
<li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li>
<li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li>
<li>MongoDB允许在<strong>服务端执行脚本</strong>，可以用<strong>Javascript</strong>编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li>
<li>MongoDB支持各种编程语言:RUBY，PYTHON，<strong>JAVA</strong>，C++，PHP，C#等多种语言。</li>
<li>MongoDB安装简单。</li>
</ul>
<h1 id="MongoDB-使用"><a href="#MongoDB-使用" class="headerlink" title="MongoDB 使用"></a>MongoDB 使用</h1><h2 id="MongoDB-概念解析"><a href="#MongoDB-概念解析" class="headerlink" title="MongoDB 概念解析"></a>MongoDB 概念解析</h2><p>在mongodb中基本的概念是文档、集合、数据库。<br><img src="/uploads/mongo3.jpg" alt=""><br>通过实例了解Mongo中的一些概念：<br><img src="/uploads/mongo4.jpg" alt=""></p>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><ul>
<li>一个mongodb中可以建立多个数据库。</li>
<li>MongoDB的默认数据库为”db”，该数据库存储在data目录中。</li>
<li>MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</li>
</ul>
<p><strong><em>首先安装MongoDB</em></strong><br><img src="/uploads/mongo7.jpg" alt=""><br>MongoDB for Windows 64-bit 适合 64 位的 Windows Server 2008 R2, Windows 7 , 及最新版本的 Window 系统。<br><img src="/uploads/mongo8.jpg" alt=""><br><strong><em>创建数据目录</em></strong><br>MongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，我们在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\ 或者 D:\ 等 )。<br>在本教程中，我们已经在C：盘 安装了 mongodb，现在让我们创建一个data的目录然后在data目录里创建db目录。<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="title">c</span>:\&gt;cd c:\</div><div class="line"></div><div class="line"><span class="title">c</span>:\&gt;mkdir <span class="class"><span class="keyword">data</span></span></div><div class="line"></div><div class="line"><span class="title">c</span>:\&gt;cd <span class="class"><span class="keyword">data</span></span></div><div class="line"></div><div class="line"><span class="title">c</span>:\<span class="class"><span class="keyword">data</span>&gt;mkdir db</span></div><div class="line"></div><div class="line"><span class="title">c</span>:\<span class="class"><span class="keyword">data</span>&gt;cd db</span></div><div class="line"></div><div class="line"><span class="title">c</span>:\<span class="class"><span class="keyword">data</span>\db&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong><em>命令行下运行 MongoDB 服务器</em></strong><br>为了从命令提示符下运行MongoDB服务器，你必须从MongoDB目录的bin目录中执行mongod.exe文件。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod<span class="selector-class">.exe</span> --dbpath c:\data\db</div></pre></td></tr></table></figure></p>
<p>如果执行成功，会输出如下信息：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 <span class="keyword">or</span> later update is <span class="keyword">not</span></div><div class="line">installed, will zero-out data files</div><div class="line">2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal <span class="attribute">dir</span>=c:\data\db\j</div><div class="line">ournal</div><div class="line">2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : <span class="literal">no</span> journal fil</div><div class="line">es present, <span class="literal">no</span> recovery needed</div><div class="line">2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started</div><div class="line">2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : <span class="attribute">pid</span>=2</div><div class="line">488 <span class="attribute">port</span>=27017 <span class="attribute">dbpath</span>=c:\data\db 64-bit <span class="attribute">host</span>=WIN-1VONBJOCE88</div><div class="line">2015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7/W</div><div class="line">indows<span class="built_in"> Server </span>2008 R2</div><div class="line">2015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6</div></pre></td></tr></table></figure></p>
<h2 id="MongoDB增删改查"><a href="#MongoDB增删改查" class="headerlink" title="MongoDB增删改查"></a>MongoDB增删改查</h2><p>在使用MongoDB时，一定要开启MongoDB服务器<br><img src="/uploads/mongo11.jpg" alt=""><br><img src="/uploads/mongo12.jpg" alt=""><br>从cmd里面进入mongo:<br><img src="/uploads/mongo13.jpg" alt=""></p>
<h3 id="MongoDB创建数据库"><a href="#MongoDB创建数据库" class="headerlink" title="MongoDB创建数据库"></a>MongoDB创建数据库</h3><p>创建数据库命令:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果数据库不存在，则创建数据库，否则切换到指定数据库</span></div><div class="line"><span class="keyword">use</span> DATABASE_NAME</div></pre></td></tr></table></figure></p>
<p>实例:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> use mytest</span></div><div class="line">switched to db mytest</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db</span></div><div class="line">mytest</div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></p>
<h3 id="查看所有数据库命令"><a href="#查看所有数据库命令" class="headerlink" title="查看所有数据库命令:"></a>查看所有数据库命令:</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; show dbs</div><div class="line">local  0.078GB</div><div class="line"><span class="keyword">test   </span>0.078GB</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>我们刚刚创建的数据库 mytest 并不在数据库的列表中， 要显示它，我们需要向 mytest 数据库插入一些数据。</p>
<h3 id="插入数据命令"><a href="#插入数据命令" class="headerlink" title="插入数据命令:"></a>插入数据命令:</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; db.mytest.insert(&#123;"name":"杨辉的博客"&#125;)</div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line">&gt; show dbs</div><div class="line">local   0.078GB</div><div class="line">yanghuii  0.078GB</div><div class="line"><span class="keyword">test    </span>0.078GB</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>注:MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中</p>
<h3 id="删除数据库命令"><a href="#删除数据库命令" class="headerlink" title="删除数据库命令:"></a>删除数据库命令:</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//删除当前数据库，默认为 <span class="keyword">test</span>，你可以使用 <span class="built_in">db</span> 命令查看当前数据库名</div><div class="line"><span class="built_in">db</span>.dropDatabase()</div></pre></td></tr></table></figure>
<p>实例:<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//首先，查看所有数据库</div><div class="line">&gt; show dbs</div><div class="line">local   0.000GB</div><div class="line">mytest  0.000GB</div><div class="line"><span class="keyword">test    </span>0.000GB</div><div class="line">//接下来我们切换到数据库 mytest</div><div class="line">&gt; use mytest</div><div class="line">switched to db mytest</div><div class="line">&gt; </div><div class="line">//执行删除命令</div><div class="line">&gt; db.dropDatabase()</div><div class="line">&#123; "dropped" : "mytest", "ok" : 1 &#125;</div><div class="line">//最后，我们再通过 show dbs 命令数据库是否删除成功：</div><div class="line">&gt; show dbs</div><div class="line">local  0.000GB</div><div class="line"><span class="keyword">test   </span>0.000GB</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h3 id="MongoDB-插入文档"><a href="#MongoDB-插入文档" class="headerlink" title="MongoDB 插入文档"></a>MongoDB 插入文档</h3><p>将数据插入到MongoDB的集合中<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MongoDB 使用 insert() 或 save() 方法向集合中插入文档，语法如下：</span></div><div class="line">db<span class="selector-class">.COLLECTION_NAME</span><span class="selector-class">.insert</span>(document)</div></pre></td></tr></table></figure></p>
<p>实例：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以下文档可以存储在 MongoDB 的 mytest 数据库 的 col集合中：</span></div><div class="line"><span class="comment">//以上实例中 col 是我们的集合名，如果该集合不在该数据库中， MongoDB 会自动创建该集合比插入文档。</span></div><div class="line">&gt;<span class="selector-tag">db</span><span class="selector-class">.col</span><span class="selector-class">.insert</span>(&#123;<span class="attribute">title</span>: <span class="string">'MongoDB 教程'</span>, </div><div class="line">    <span class="attribute">description</span>: <span class="string">'MongoDB 是一个 Nosql 数据库'</span>,</div><div class="line">    <span class="attribute">by</span>: <span class="string">'杨辉的博客'</span>,</div><div class="line">    <span class="attribute">url</span>: <span class="string">'http://www.yanghuii.com'</span>,</div><div class="line">    <span class="attribute">tags</span>: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</div><div class="line">    <span class="attribute">likes</span>: <span class="number">100</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我们也可以将数据定义为一个变量，如下所示:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">document</span>=(&#123;title: <span class="string">'MongoDB 教程'</span>, </div><div class="line">    description: <span class="string">'MongoDB 是一个 Nosql 数据库'</span>,</div><div class="line">    by: <span class="string">'杨辉的博客'</span>,</div><div class="line">    url: <span class="string">'http://www.yanghuii.com'</span>,</div><div class="line">    tags: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</div><div class="line">    likes: 100</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行后显示结果如下:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        <span class="attr">"title"</span> : <span class="string">"MongoDB 教程"</span>,</div><div class="line">        <span class="attr">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</div><div class="line">        <span class="attr">"by"</span> : <span class="string">"杨辉的博客"</span>,</div><div class="line">        <span class="attr">"url"</span> : <span class="string">"http://www.yanghuii.com"</span>,</div><div class="line">        <span class="attr">"tags"</span> : [</div><div class="line">                <span class="string">"mongodb"</span>,</div><div class="line">                <span class="string">"database"</span>,</div><div class="line">                <span class="string">"NoSQL"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"likes"</span> : <span class="number">100</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行插入操作:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db<span class="selector-class">.col</span><span class="selector-class">.insert</span>(document)</div><div class="line"><span class="function"><span class="title">WriteResult</span><span class="params">(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span></span></div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>注:插入文档你也可以使用 db.col.save(document) 命令。如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据。</p>
<h3 id="查看已插入文档"><a href="#查看已插入文档" class="headerlink" title="查看已插入文档"></a>查看已插入文档</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; db<span class="selector-class">.col</span><span class="selector-class">.find</span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"56064886ade2f21f36b03134"</span>), <span class="string">"title"</span> : <span class="string">"MongoDB 教程"</span>, </div><div class="line"><span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>, <span class="string">"by"</span> : <span class="string">"杨辉的博客"</span>, </div><div class="line"><span class="string">"url"</span> : <span class="string">"http://www.yanghuii.com"</span>, <span class="string">"tags"</span> : [ <span class="string">"mongodb"</span>, <span class="string">"database"</span>, <span class="string">"NoSQL"</span> ],</div><div class="line"><span class="string">"likes"</span> : <span class="number">100</span> &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h3 id="MongoDB-更新文档"><a href="#MongoDB-更新文档" class="headerlink" title="MongoDB 更新文档"></a>MongoDB 更新文档</h3><p>MongoDB 使用 <strong>update()</strong> 和 <strong>save()</strong> 方法来更新集合中的文档。</p>
<h4 id="update-方法"><a href="#update-方法" class="headerlink" title="update() 方法"></a>update() 方法</h4><p>update() 方法命令:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//update() 方法用于更新已存在的文档。语法格式如下</span></div><div class="line">db.collection.update(</div><div class="line">   <span class="params">&lt;query&gt;</span>,</div><div class="line">   <span class="params">&lt;update&gt;</span>,</div><div class="line">   &#123;</div><div class="line"><span class="symbol">     upsert:</span> <span class="params">&lt;boolean&gt;</span>,</div><div class="line"><span class="symbol">     multi:</span> <span class="params">&lt;boolean&gt;</span>,</div><div class="line"><span class="symbol">     writeConcern:</span> <span class="params">&lt;document&gt;</span></div><div class="line">   &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p><strong>参数说明</strong>:</p>
<ul>
<li>query : update的查询条件，类似sql update查询内where后面的。</li>
<li>update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</li>
<li>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li>
<li>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>
<li>writeConcern :可选，抛出异常的级别。</li>
</ul>
<p>实例<br>我们在集合 col 中插入如下数据：</p>
<blockquote>
<p>db.col.insert({<br>    title: ‘MongoDB 教程’,<br>    description: ‘MongoDB 是一个 Nosql 数据库’,<br>    by: ‘杨辉的博客’,<br>    url: ‘<a href="http://www.yanghuii.com" target="_blank" rel="external">http://www.yanghuii.com</a>‘,<br>    tags: [‘mongodb’, ‘database’, ‘NoSQL’],<br>    likes: 100<br>})<br>接着我们通过 update() 方法来更新标题(title):<br>db.col.update({‘title’:’MongoDB 教程’},{$set:{‘title’:’MongoDB’}})<br>WriteResult({ “nMatched” : 1, “nUpserted” : 0, “nModified” : 1 })   # 输出信息<br>db.col.find().pretty()//加上.pretty()可以用来排版<br>{<br>        “_id” : ObjectId(“56064f89ade2f21f36b03136”),<br>        “title” : “MongoDB”,<br>        “description” : “MongoDB 是一个 Nosql 数据库”,<br>        “by” : “杨辉的博客”,<br>        “url” : “<a href="http://www.yanghuii.com" target="_blank" rel="external">http://www.yanghuii.com</a>“,<br>        “tags” : [<br>                “mongodb”,<br>                “database”,<br>                “NoSQL”<br>        ],<br>        “likes” : 100<br>}</p>
<p>可以看到标题(title)由原来的 “MongoDB 教程” 更新为了 “MongoDB”。<br>注:以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.<span class="keyword">update</span>(&#123;<span class="string">'title'</span>:<span class="string">'MongoDB 教程'</span>&#125;,&#123;$set:&#123;<span class="string">'title'</span>:<span class="string">'MongoDB'</span>&#125;&#125;,&#123;multi:true&#125;)</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="save-方法"><a href="#save-方法" class="headerlink" title="save() 方法"></a>save() 方法</h4><p>save() 方法通过传入的文档来替换已有文档。语法格式如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span><span class="selector-class">.collection</span><span class="selector-class">.save</span>(</div><div class="line">   &lt;<span class="selector-tag">document</span>&gt;,</div><div class="line">   &#123;</div><div class="line">     <span class="attribute">writeConcern</span>: &lt;document&gt;</div><div class="line">   &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>参数说明：<br>document : 文档数据。<br>writeConcern :可选，抛出异常的级别。<br>实例<br>以下实例中我们替换了 _id 为 56064f89ade2f21f36b03136 的文档数据：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;db<span class="selector-class">.col</span><span class="selector-class">.save</span>(&#123;</div><div class="line">	<span class="string">"_id"</span> : ObjectId(<span class="string">"56064f89ade2f21f36b03136"</span>),</div><div class="line">    <span class="string">"title"</span> : <span class="string">"MongoDB"</span>,</div><div class="line">    <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</div><div class="line">    <span class="string">"by"</span> : <span class="string">"yanghui"</span>,</div><div class="line">    <span class="string">"url"</span> : <span class="string">"http://www.yanghuii.com"</span>,</div><div class="line">    <span class="string">"tags"</span> : [</div><div class="line">            <span class="string">"mongodb"</span>,</div><div class="line">            <span class="string">"NoSQL"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"likes"</span> : <span class="number">110</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>替换成功后，我们可以通过 find() 命令来查看替换后的数据<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;db<span class="selector-class">.col</span><span class="selector-class">.find</span>().pretty()</div><div class="line">&#123;</div><div class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"56064f89ade2f21f36b03136"</span>),</div><div class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB"</span>,</div><div class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</div><div class="line">        <span class="string">"by"</span> : <span class="string">"yanghui"</span>,</div><div class="line">        <span class="string">"url"</span> : <span class="string">"http://www.yanghuii.com"</span>,</div><div class="line">        <span class="string">"tags"</span> : [</div><div class="line">                <span class="string">"mongodb"</span>,</div><div class="line">                <span class="string">"NoSQL"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"likes"</span> : <span class="number">110</span></div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h3 id="MongoDB-删除文档"><a href="#MongoDB-删除文档" class="headerlink" title="MongoDB 删除文档"></a>MongoDB 删除文档</h3><p>MongoDB remove()函数是用来移除集合中的数据。<br>在执行remove()函数前先执行find()命令来判断执行的条件是否正确。<br>remove() 方法命令:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db<span class="selector-class">.collection</span><span class="selector-class">.remove</span>(</div><div class="line">   &lt;query&gt;,</div><div class="line">   &lt;justOne&gt;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>如果你的 MongoDB 是 2.6 版本以后的，语法格式如下:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span><span class="selector-class">.collection</span><span class="selector-class">.remove</span>(</div><div class="line">   &lt;<span class="selector-tag">query</span>&gt;,</div><div class="line">   &#123;</div><div class="line">     <span class="attribute">justOne</span>: &lt;boolean&gt;,</div><div class="line">     writeConcern: &lt;document&gt;</div><div class="line">   &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li>query :（可选）删除的文档的条件。</li>
<li>justOne : （可选）如果设为 true 或 1，则只删除一个文档。</li>
<li>writeConcern :（可选）抛出异常的级别。</li>
</ul>
<p>实例<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//先查询</div><div class="line">&gt; db.<span class="keyword">col</span>.<span class="keyword">find</span>().pretty()</div><div class="line">//再移除</div><div class="line">//移除 title 为 <span class="string">'MongoDB 教程'</span> 的文档</div><div class="line">&gt;db.<span class="keyword">col</span>.<span class="built_in">remove</span>(&#123;<span class="string">'title'</span>:<span class="string">'MongoDB 教程'</span>&#125;)</div><div class="line">WriteResult(&#123; <span class="string">"nRemoved"</span> : <span class="number">2</span> &#125;)           # 删除了两条数据</div><div class="line">&gt;db.<span class="keyword">col</span>.<span class="keyword">find</span>()</div><div class="line">……                                        # 没有数据</div></pre></td></tr></table></figure></p>
<p>如果你只想删除第一条找到的记录可以设置 justOne 为 1，如下所示：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//命令</span></div><div class="line">&gt;db<span class="selector-class">.COLLECTION_NAME</span><span class="selector-class">.remove</span>(DELETION_CRITERIA,<span class="number">1</span>)</div><div class="line"><span class="comment">//实例</span></div><div class="line">&gt;db<span class="selector-class">.col</span><span class="selector-class">.remove</span>(&#123;<span class="string">'title'</span>:<span class="string">'MongoDB 教程'</span>&#125;,<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>如果你想<strong>删除所有数据</strong>，可以使用以下方式（类似常规 SQL 的 truncate 命令）：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">db.col.remove(&#123;&#125;)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">db.col.find()</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></p>
<h3 id="MongoDB-查询文档"><a href="#MongoDB-查询文档" class="headerlink" title="MongoDB 查询文档"></a>MongoDB 查询文档</h3><p>MongoDB 查询数据命令<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//find() 方法以非结构化的方式来显示所有文档</span></div><div class="line">&gt;db<span class="selector-class">.COLLECTION_NAME</span><span class="selector-class">.find</span>()</div><div class="line"><span class="comment">//以易读的方式来读取数据，可以使用 pretty() 方法;pretty() 方法以格式化的方式来显示所有文档</span></div><div class="line">&gt;db<span class="selector-class">.col</span><span class="selector-class">.find</span>().pretty()</div></pre></td></tr></table></figure></p>
<p>实例<br>以下实例我们查询了集合 col 中的数据：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; db<span class="selector-class">.col</span><span class="selector-class">.find</span>().pretty()</div><div class="line">&#123;</div><div class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"56063f17ade2f21f36b03133"</span>),</div><div class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB 教程"</span>,</div><div class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</div><div class="line">        <span class="string">"by"</span> : <span class="string">"杨辉的博客"</span>,</div><div class="line">        <span class="string">"url"</span> : <span class="string">"http://www.yanghuii.com"</span>,</div><div class="line">        <span class="string">"tags"</span> : [</div><div class="line">                <span class="string">"mongodb"</span>,</div><div class="line">                <span class="string">"database"</span>,</div><div class="line">                <span class="string">"NoSQL"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"likes"</span> : <span class="number">100</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注:除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档</p>
<h4 id="MongoDB-与-RDBMS-Where-语句比较"><a href="#MongoDB-与-RDBMS-Where-语句比较" class="headerlink" title="MongoDB 与 RDBMS Where 语句比较"></a>MongoDB 与 RDBMS Where 语句比较</h4><p>如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：<br><img src="/uploads/mongo14.jpg" alt=""></p>
<h4 id="MongoDB-AND-条件"><a href="#MongoDB-AND-条件" class="headerlink" title="MongoDB AND 条件"></a>MongoDB AND 条件</h4><p>MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="selector-tag">db</span><span class="selector-class">.col</span><span class="selector-class">.find</span>(&#123;<span class="attribute">key1</span>:value1, <span class="attribute">key2</span>:value2&#125;)<span class="selector-class">.pretty</span>()</div></pre></td></tr></table></figure></p>
<p>实例<br>以下实例通过 by 和 title 键来查询 杨辉的博客 中 MongoDB 教程 的数据<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt; db<span class="selector-class">.col</span><span class="selector-class">.find</span>(&#123;<span class="string">"by"</span>:<span class="string">"杨辉的博客"</span>, <span class="string">"title"</span>:<span class="string">"MongoDB 教程"</span>&#125;).pretty()</div><div class="line"></div><div class="line">&#123;</div><div class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"56063f17ade2f21f36b03133"</span>),</div><div class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB 教程"</span>,</div><div class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</div><div class="line">        <span class="string">"by"</span> : <span class="string">"杨辉的博客"</span>,</div><div class="line">        <span class="string">"url"</span> : <span class="string">"http://www.yanghuii.com"</span>,</div><div class="line">        <span class="string">"tags"</span> : [</div><div class="line">                <span class="string">"mongodb"</span>,</div><div class="line">                <span class="string">"database"</span>,</div><div class="line">                <span class="string">"NoSQL"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"likes"</span> : <span class="number">100</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上实例中类似于 WHERE 语句：WHERE by=’杨辉的博客’ AND title=’MongoDB 教程’</p>
<h4 id="MongoDB-OR-条件"><a href="#MongoDB-OR-条件" class="headerlink" title="MongoDB OR 条件"></a>MongoDB OR 条件</h4><p>MongoDB OR 条件语句使用了关键字 $or,语法格式如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="selector-tag">db</span><span class="selector-class">.col</span><span class="selector-class">.find</span>(</div><div class="line">   &#123;</div><div class="line">      $<span class="attribute">or</span>: [</div><div class="line">	     &#123;<span class="attribute">key1</span>: value1&#125;, &#123;<span class="attribute">key2</span>:value2&#125;</div><div class="line">      ]</div><div class="line">   &#125;</div><div class="line">)<span class="selector-class">.pretty</span>()</div></pre></td></tr></table></figure></p>
<p>实例<br>以下实例中，我们演示了查询键 by 值为 杨辉的博客 或键 title 值为 MongoDB 教程 的文档。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.find(&#123;$or:[&#123;<span class="string">"by"</span>:<span class="string">"杨辉的博客"</span>&#125;,&#123;<span class="string">"title"</span>: <span class="string">"MongoDB 教程"</span>&#125;]&#125;).pretty()</div><div class="line">&#123;</div><div class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"56063f17ade2f21f36b03133"</span>),</div><div class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB 教程"</span>,</div><div class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</div><div class="line">        <span class="string">"by"</span> : <span class="string">"杨辉的博客"</span>,</div><div class="line">        <span class="string">"url"</span> : <span class="string">"http://www.yanghuii.com"</span>,</div><div class="line">        <span class="string">"tags"</span> : [</div><div class="line">                <span class="string">"mongodb"</span>,</div><div class="line">                <span class="string">"database"</span>,</div><div class="line">                <span class="string">"NoSQL"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"likes"</span> : <span class="number">100</span></div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h4 id="AND-和-OR-联合使用"><a href="#AND-和-OR-联合使用" class="headerlink" title="AND 和 OR 联合使用"></a>AND 和 OR 联合使用</h4><p>以下实例演示了 AND 和 OR 联合使用，类似常规 SQL 语句为： ‘where likes&gt;50 AND (by = ‘杨辉的博客’ OR title = ‘MongoDB 教程’)’<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.find(&#123;<span class="string">"likes"</span>: &#123;$gt:<span class="number">50</span>&#125;, $or: [&#123;<span class="string">"by"</span>: <span class="string">"杨辉的博客"</span>&#125;,&#123;<span class="string">"title"</span>: <span class="string">"MongoDB 教程"</span>&#125;]&#125;).pretty()</div><div class="line">&#123;</div><div class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"56063f17ade2f21f36b03133"</span>),</div><div class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB 教程"</span>,</div><div class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</div><div class="line">        <span class="string">"by"</span> : <span class="string">"杨辉的博客"</span>,</div><div class="line">        <span class="string">"url"</span> : <span class="string">"http://www.yanghuii.com"</span>,</div><div class="line">        <span class="string">"tags"</span> : [</div><div class="line">                <span class="string">"mongodb"</span>,</div><div class="line">                <span class="string">"database"</span>,</div><div class="line">                <span class="string">"NoSQL"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"likes"</span> : <span class="number">100</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="MongoDB高级操作"><a href="#MongoDB高级操作" class="headerlink" title="MongoDB高级操作"></a>MongoDB高级操作</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h4><p>MongoDB中条件操作符有：</p>
<ul>
<li>(&gt;) 大于 - $gt</li>
<li>(&lt;) 小于 - $lt</li>
<li>(&gt;=) 大于等于 - $gte</li>
<li>(&lt;= ) 小于等于 - $lte</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果你想获取 "col" 集合中 "likes" 大于 100 的数据，你可以使用以下命令：</span></div><div class="line">db.col.find(&#123;<span class="string">"likes"</span> : &#123;$gt : <span class="number">100</span>&#125;&#125;)	<span class="comment">//其他的条件操作符也类似</span></div><div class="line"><span class="comment">//类似于SQL语句：</span></div><div class="line"><span class="keyword">Select</span> * from col <span class="keyword">where</span> likes &gt; <span class="number">100</span>;</div><div class="line"><span class="comment">//如果你想获取"col"集合中 "likes" 大于100，小于 200 的数据，你可以使用以下命令：</span></div><div class="line">db.col.find(&#123;likes : &#123;$lt :<span class="number">200</span>, $gt : <span class="number">100</span>&#125;&#125;)</div><div class="line"><span class="comment">//类似于SQL语句：</span></div><div class="line"><span class="keyword">Select</span> * from col <span class="keyword">where</span> likes&gt;<span class="number">100</span> <span class="literal">AND</span>  likes&lt;<span class="number">200</span>;</div></pre></td></tr></table></figure>
<p>#### </p>
<p>参考资料:点<a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="external">这里</a> </p>
]]></content>
    
    <summary type="html">
    
      这是一篇关于学习和使用MongoDB 的教程
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring访问数据</title>
    <link href="http://yoursite.com/2016/04/06/%E4%BD%BF%E7%94%A8Spring%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2016/04/06/使用Spring访问数据/</id>
    <published>2016-04-06T01:39:25.000Z</published>
    <updated>2016-04-11T14:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="统一的数据访问异常层次体系"><a href="#统一的数据访问异常层次体系" class="headerlink" title="统一的数据访问异常层次体系"></a>统一的数据访问异常层次体系</h1><p>为了统一和简化相关的数据访问操作，J2EE核心模式提出了DAO(Data Access Object，数据访问对象)模式。使用DAO模式，可以完全分离数据的访问和存储，很好地屏蔽了各种数据访问方式的差异性。不论数据存储在普通的文本文件或者csv文件，还是关系数据库(RDBMS)或者LDAP(Lightweight Directory Access Protocol,轻量级目录访问协议)系统中，使用DAO模式访问数据的客户端代码可以完全忽视这种差异，而以统一的接口来访问相应数据。</p>
<p>当数据访问接口的实现类随着需求而发生变化时，客户端代码(service层代码)可以完全忽视这种变化，唯一需要变动的地方可能只是Factory对象的几行代码，甚至只是IoC容器配置文件中简单的class类型替换而已，客户端代码无需任何变动。所以，DAO模式对屏蔽不同数据访问机制的差异性起到举足轻重的作用。</p>
<h2 id="异常导致接口无法定义"><a href="#异常导致接口无法定义" class="headerlink" title="异常导致接口无法定义"></a>异常导致接口无法定义</h2><p><strong>那么问题来了:</strong><br>当DAO实现类出现异常的时候,如何捕获SQLException呢？如果直接在DAO实现类处理掉的话，客户端代码就不知道在数据访问期间发生的问题。所以只好先将SQLException抛给客户端。但是这样会产生2个问题:<br><strong>问题1:</strong><br>我们的数据访问接口对于客户端来说是通用的，不管数据访问对象因为数据访问机制的不同而如何变更，客户端代码不应该受其牵连。但是，现在因为使用JDBC做数据访问，需要抛出特定的SQLException，那么客户端代码就需要捕捉该异常并做相应的处理。这是与数据访问对象模式的设计初衷相背离的。<br><strong>问题2:</strong><br>在引入另一种数据访问机制时，问题更是接踵而来。当换了一个Dao实现，需要抛出另一个Exception，例如:NamingException,如果要保证方法被实现就需要更改方法签名。这样更糟糕了，我们把统一的访问接口给改了。<br>因为数据访问机制的不同，我们的数据访问接口的定义变成了空中楼阁，我们无法最终定义并确定这个接口。</p>
<h2 id="Spring-数据访问异常层次体系"><a href="#Spring-数据访问异常层次体系" class="headerlink" title="Spring 数据访问异常层次体系"></a>Spring 数据访问异常层次体系</h2><p>Spring 框架中统一的异常层次体系所涉及的大部分异常类型都定义在<code>org.springframework.dao</code>包中，处于这个体系的所有异常类型均以<code>org.springframework.dao.DataAccessException</code>为“统领”，然后根据职能划分为不同的异常子类型，总体上看，整个异常层次体系如下图所示:<br><img src="/uploads/Spring6.jpg" alt=""></p>
<h1 id="JDBC-API-的最佳实践"><a href="#JDBC-API-的最佳实践" class="headerlink" title="JDBC API 的最佳实践"></a>JDBC API 的最佳实践</h1><h2 id="基于Template的JDBC使用方式"><a href="#基于Template的JDBC使用方式" class="headerlink" title="基于Template的JDBC使用方式"></a>基于<code>Template</code>的<code>JDBC</code>使用方式</h2><p>由于<code>JDBC API</code>在使用中容易出错，使用繁琐;为了解决它在实际使用中的尴尬局面，<code>Spring</code>框架提出了<code>org.springframework.jdbc.core.jdbcTemplate</code>作为数据访问的<code>Helper</code>类。抓住<code>JdbcTemplate</code>，就抓住了<code>Spring</code>框架<code>JDBC API</code>最佳实践的核心。<br><strong><code>JdbcTemplate</code>主要关注如下两个事情</strong>:</p>
<ul>
<li>封装所有基于JDBC的数据访问代码，以统一的格式和规范来使用JDBC API。所有基于JDBC的数据访问需求现在全部通过JdbcTemplate进行，从而避免了让烦琐易错的基于JDBC API的数据访问代码散落于系统各处。</li>
<li>对SQLException所提供的异常信息在框架内进行统一转译，将基于JDBC的数据访问异常纳入Spring自身的异常层次体系中，统一了数据接口的定义，简化了客户端代码对数据访问异常的处理。</li>
</ul>
<p>JdbcTemplate主要通过模板方法模式对基于JDBC的数据访问代码进行统一封装。<br><strong>模板方法模式</strong>:主要用于对算法或者行为逻辑进行封装，即如果多个类中存在某些相似的算法逻辑或者行为逻辑，可以将这些相似的逻辑提取到模板方法类中实现，然后让相应的子类根据需要实现某些自定义逻辑。</p>
]]></content>
    
    <summary type="html">
    
      包括统一的数据访问异常层次体系和JDBCAPI以及统一集成各种ORM方案
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP 框架</title>
    <link href="http://yoursite.com/2016/04/06/SpringAOP/"/>
    <id>http://yoursite.com/2016/04/06/SpringAOP/</id>
    <published>2016-04-06T01:39:25.000Z</published>
    <updated>2016-04-06T08:49:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP简述"><a href="#AOP简述" class="headerlink" title="AOP简述"></a>AOP简述</h1><p>AOP全称为Aspect-Oriented Programming ，中文通常翻译为面向方面编程。使用AOP，我们可以对类似于Logging和Security等系统需求进行模块化的组织，简化系统需求与实现之间的对比关系，进而使得整个系统的实现更具模块化。<br>AOP引入了Aspect的概念，用来以模块化的形式对系统中的横切关注点进行封装。Aspect之对于AOP，就相当于Class之对于OOP。AOP仅是对OOP方法的一种补足。<br><img src="/uploads/Spring4.jpg" alt=""></p>
<h2 id="静态AOP时代-第一代AOP"><a href="#静态AOP时代-第一代AOP" class="headerlink" title="静态AOP时代(第一代AOP)"></a>静态AOP时代(第一代AOP)</h2><ul>
<li>优点:Aspect直接以Java字节码的形式编译到Java类中,Java虚拟机可以像通常一样加载Java类运行，不会对整个系统的运行造成任何的性能损失。</li>
<li>缺点:不够灵活</li>
</ul>
<h2 id="动态AOP时代-第二代AOP"><a href="#动态AOP时代-第二代AOP" class="headerlink" title="动态AOP时代(第二代AOP)"></a>动态AOP时代(第二代AOP)</h2><p>动态AOP引入了灵活性以及易用性，也不可避免地引入了相应的性能问题;大多数情况下，这种性能损失是可以容忍的。</p>
<h2 id="Java平台上的AOP实现机制"><a href="#Java平台上的AOP实现机制" class="headerlink" title="Java平台上的AOP实现机制"></a>Java平台上的AOP实现机制</h2><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>Spring AOP 默认情况下采用这种机制实现AOP机能。(动态代理机制只针对接口有效)</p>
<h3 id="动态字节码增强"><a href="#动态字节码增强" class="headerlink" title="动态字节码增强"></a>动态字节码增强</h3><p>使用动态字节码增强技术，即使模块类没有实现相应的接口，我们依然可以对其进行扩展，而不用像动态代理那样受限于接口。</p>
<h1 id="Spring-AOP概述及其实现机制"><a href="#Spring-AOP概述及其实现机制" class="headerlink" title="Spring AOP概述及其实现机制"></a>Spring AOP概述及其实现机制</h1><h2 id="Spring-AOP-概述"><a href="#Spring-AOP-概述" class="headerlink" title="Spring AOP 概述"></a>Spring AOP 概述</h2><p>Spring AOP 是 Spring核心框架的重要组成部分，通常认为它与Spring的IoC容器以及Spring框架对其他JavaEE服务的集成共同组成了Spring框架的”质量三角”。<br><img src="/uploads/Spring5.jpg" alt=""></p>
<h2 id="Spring-AOP-的实现机制"><a href="#Spring-AOP-的实现机制" class="headerlink" title="Spring AOP 的实现机制"></a>Spring AOP 的实现机制</h2><p>Spring AOP 属于第二代AOP，采用动态代理机制和字节码生成技术实现。动态代理机制和字节码生成都是在运行期间为目标对象生成一个代理对象，而将横切逻辑织入到这个代理对象中，系统最终使用的是织入了横切逻辑的代理对象，而不是真正的目标对象。</p>
<h3 id="设计模式之代理模式"><a href="#设计模式之代理模式" class="headerlink" title="设计模式之代理模式"></a>设计模式之代理模式</h3><p>在代理模式中，通常涉及4种角色</p>
<ul>
<li>ISubject:该接口是对被访问者或者被访问资源的抽象。</li>
<li>SubjectImpl:被访问者或者被访问资源的具体实现类</li>
<li>SubjectProxy:被访问者或者被访问资源的代理实现类，该类持有一个ISubject接口的具体实例。在这个场景中，我们要对SubjectImpl进行代理，那么SubjectProxy现在持有的就是SubjectImpl的实例。</li>
<li>Client:代表访问者的抽象角色，Client将会访问ISubject类型的对象或者资源。在这个场景中，Client将会请求具体的SubjectImpl实例，但Client无法直接请求其真正要访问的资源SubjectImpl，而是必须要通过ISubject资源的访问代理类SubjectProxy进行。</li>
</ul>
<p>SubjectImpl和SubjectProxy都实现了相同的接口ISubject，而SubjectProxy内部持有SubjectImpl的引用。当Client通过request()请求服务的时候，SubjectProxy将转发该请求给SubjectImpl。从这个角度来说，SubjectProxy反而有多此一举之嫌了。不过，SubjectProxy的作用不只局限于请求的转发，更多时候是对请求添加更多访问限制。<br>SubjectImpl和SubjectProxy之间的调用关系如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectProxy</span> <span class="keyword">implements</span> <span class="title">ISubject</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> ISubject subject;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">request</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//add pre-process logic if necessary</span></div><div class="line"></div><div class="line">	String originalResult = subject.request();</div><div class="line"></div><div class="line">	<span class="comment">//add post process logic if necessary</span></div><div class="line">	<span class="keyword">return</span> <span class="string">"Proxy:"</span> + originalResult;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> ISubject <span class="title">getSubject</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> subject;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubject</span><span class="params">(ISubject subject)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.subject = subject;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代理对象SubjectProxy就像是SubjectImpl的影子，只不过这个影子通常拥有更多的功能。</p>
<h4 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h4><p>动态代理机制的实现主要由一个类和一个接口组成，即java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口。<br>InvocationHandler实现:<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestCtrlInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(RequestCtrlInvocationHandler.class);</div><div class="line">	<span class="keyword">private</span> Object <span class="keyword">target</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">RequestCtrlInvocationHandler</span><span class="params">(Object <span class="keyword">target</span>)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.<span class="keyword">target</span> = <span class="keyword">target</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span><span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">		<span class="keyword">if</span>(method.getName().equals(<span class="string">"request"</span>))&#123;</div><div class="line">			TimeOfDay startTime = <span class="keyword">new</span> TimeOfDay(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">			TimeOfDay endTime = <span class="keyword">new</span> TimeOfDay(<span class="number">5</span>,<span class="number">59</span>,<span class="number">59</span>);</div><div class="line">			TimeOfDay currentTime = <span class="keyword">new</span> TimeOfDay();</div><div class="line">			<span class="keyword">if</span>(currentTime.isAfter(startTime) &amp;&amp; currentTime.isBefore(endTime))&#123;</div><div class="line">				logger.warn(<span class="string">"service is not available now."</span>);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="function"><span class="keyword">return</span> method.<span class="title">invoke</span><span class="params">(<span class="keyword">target</span>, args)</span></span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用Proxy和RequestCtrlInvocationHandler创建不同类型目标对象的动态代理<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ISubject subject = (ISubject)Proxy.<span class="keyword">new</span><span class="type">ProxyInstance</span>(</div><div class="line">	ProxyRunner.class.getClassLoader(),</div><div class="line">	<span class="keyword">new</span> <span class="type">Class</span>[]&#123;ISubject.class&#125;,</div><div class="line">	<span class="keyword">new</span> <span class="type">RequestCtrlInvocationHandler</span>(<span class="keyword">new</span> <span class="type">SubjectImpl</span>())</div><div class="line">	);</div><div class="line">subject.request();</div><div class="line"></div><div class="line">IRequestable requestable = (IRequestable)Proxy.<span class="keyword">new</span><span class="type">ProxyInstance</span>(</div><div class="line">	ProxyRunnable.class.getClassLoader(),</div><div class="line">	<span class="keyword">new</span> <span class="type">Class</span>[]&#123;IRequestable.class&#125;,</div><div class="line">	<span class="keyword">new</span> <span class="type">RequestCtrlInvocationHandler</span>(<span class="keyword">new</span> <span class="type">RequestableImpl</span>())</div><div class="line">	);</div><div class="line">requestable.request();</div></pre></td></tr></table></figure></p>
<h4 id="动态字节码生成"><a href="#动态字节码生成" class="headerlink" title="动态字节码生成"></a>动态字节码生成</h4><p>略</p>
<h1 id="AOP引用案例"><a href="#AOP引用案例" class="headerlink" title="AOP引用案例"></a>AOP引用案例</h1><h2 id="Java异常处理"><a href="#Java异常处理" class="headerlink" title="Java异常处理"></a>Java异常处理</h2><h2 id="安全检查"><a href="#安全检查" class="headerlink" title="安全检查"></a>安全检查</h2><p>javax.servlet.Filter是Servlet规范为我们提供的一种AOP支持，通过它，我们可以为基于Servlet的Web应用添加相应的资源访问控制。</p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>使用AOP为系统添加缓存(实例代码没有添加同步逻辑，在生产环境下需要考虑这一点)<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Aspect</div><div class="line"><span class="keyword">public</span> class CachingAspect&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map cache = <span class="keyword">new</span> LRUMap(<span class="number">5</span>);</div><div class="line"></div><div class="line">	@Around(<span class="string">"..."</span>)</div><div class="line">	<span class="keyword">public</span> <span class="keyword">Object</span> doCache(ProceedingJoinPoint pjp, <span class="keyword">Object</span> <span class="built_in">key</span>) <span class="keyword">throws</span> Throwable&#123;</div><div class="line">		<span class="keyword">if</span>(cache.containsKey(<span class="built_in">key</span>))&#123;</div><div class="line">			<span class="keyword">return</span> cache.<span class="built_in">get</span>(<span class="built_in">key</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">Object</span> retValue = pjp.proceed();</div><div class="line">			cache.put(<span class="built_in">key</span>,retValue);</div><div class="line">			<span class="keyword">return</span> retValue;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      Spring AOP 概述及其实现机制和扩展
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring概述与IoC容器</title>
    <link href="http://yoursite.com/2016/04/02/SpringIoC/"/>
    <id>http://yoursite.com/2016/04/02/SpringIoC/</id>
    <published>2016-04-02T11:35:25.000Z</published>
    <updated>2016-04-06T01:33:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h1><p><code>Spring</code>是于2003年兴起的一个轻量级的<code>Java</code>开发框架<br><code>Spring</code>框架理念:基于<strong>POJO</strong>(<code>Plain Old Java Object</code>，简单<code>Java</code>对象)的<strong>轻量级</strong>开发理念<br><code>Spring</code>框架总体结构:<br><img src="/uploads/Spring1.jpg" alt=""><br>组成整个<code>Spring</code>框架的各种服务实现被划分到了多个相互独立却又相互依赖的模块当中。这些模块组成了<code>Spring</code>框架的核心骨架<br><code>ORM</code>(<code>Object Relational Mapping</code>对象关系映射)产品:<code>Hibernate</code>/<code>iBATIS</code>/<code>Toplink</code>/<code>JPA</code>等</p>
<h2 id="Core模块"><a href="#Core模块" class="headerlink" title="Core模块"></a>Core模块</h2><p>整个<code>Spring</code>框架构建在<code>Core</code>核心模块之上，它是整个框架的基础。在该模块中，<code>Spring</code>为我们提供了一个<strong>IoC容器实现</strong>，用于帮助我们以<strong>依赖注入</strong>的方式管理对象之间的依赖关系。<code>Core</code>核心模块还包括框架内部使用的各种工具类</p>
<h1 id="Spring的IoC容器"><a href="#Spring的IoC容器" class="headerlink" title="Spring的IoC容器"></a>Spring的IoC容器</h1><p><code>Spring</code>的<code>IoC</code>容器是整个<code>Spring</code>框架的核心和基础</p>
<h2 id="IoC的基本概念"><a href="#IoC的基本概念" class="headerlink" title="IoC的基本概念"></a>IoC的基本概念</h2><p><code>IOC</code>(<code>Inversion of Control</code>控制反转)概念:程序中对象的获取方式发生反转，由最初的<code>new</code>方式创建，转变为由第三方框架创建、注入。<br><code>IOC</code>控制由<code>DI</code>(依赖注入)方式实现。<code>DI</code>是实现<code>IOC</code>的主要技术途径。</p>
<h3 id="三种依赖注入的方式"><a href="#三种依赖注入的方式" class="headerlink" title="三种依赖注入的方式"></a>三种依赖注入的方式</h3><h4 id="构造方法-构造器-注入"><a href="#构造方法-构造器-注入" class="headerlink" title="构造方法(构造器)注入"></a>构造方法(构造器)注入</h4><p>构造方法注入，就是被注入对象可以通过在其构造方法中声明依赖对象的参数列表，让外部(通常是<code>IoC</code>容器)知道它需要哪些依赖对象。<br><code>IoC Service Provider</code>会检查被注入对象的构造方法，取得它所需要的依赖对象列表，进而为其注入相应的对象。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 构造器注入 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO"</span> <span class="attr">class</span>=<span class="string">"dao.OracleDriver"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">constructor-argindex="0"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="setter-方法注入"><a href="#setter-方法注入" class="headerlink" title="setter 方法注入"></a>setter 方法注入</h4><p>对于<code>JavaBean</code>对象来说，通常会通过<code>setXXX()</code>和<code>getXXX()</code>方法来访问对应属性。这些<code>setXXX()</code>方法统称为<code>setter</code>方法，<code>getXXX()</code>称为<code>getter</code>方法。<br>当前对象只要为其依赖对象所对应的属性添加<code>setter</code>方法，就可以通过<code>setter</code>方法将相应的依赖对象设置到被注入对象中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- setter注入 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 使用&lt;property&gt;标签为基于setter注入的&lt;bean&gt;元素内 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"dao.JDBCDataSource"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 注入属性 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"oracle.jdbc.OracleDriver"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 注入Bean对象 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span>&gt;</span><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.dao.OracleYserDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="接口注入"><a href="#接口注入" class="headerlink" title="接口注入"></a>接口注入</h4><p>被注入对象如果想要<code>IoC Service Provider</code>为其注入依赖对象，就必须实现某个接口。这个接口提供一个方法，用来为其注入依赖对象。<code>IoC Service Provider</code>最终通过这些接口来了解应该为被注入对象注入什么依赖对象。</p>
<h4 id="三种注入方式的比较"><a href="#三种注入方式的比较" class="headerlink" title="三种注入方式的比较"></a>三种注入方式的比较</h4><ul>
<li>接口注入:不提倡，它强制被注入对象实现不必要的接口，带有侵入性。</li>
<li>构造方法注入:优点是构造完成后就可以马上进入就绪状态;缺点是依赖对象较多时，构造方法的参数列表比较长，通过反射构造对象时，对相同类型的参数处理比较困难，维护和使用上也比较麻烦。而且在<code>Java</code>中，构造方法无法被继承，无法设置默认值。对于非必须的依赖处理，可能需要引入多个构造方法，而参数数量的变动可能造成维护上的不便。</li>
<li><code>setter</code>方法注入:优点是<code>setter</code>方法可以被继承，允许设置默认值，而且有良好的IDE支持。缺点是对象无法在构造完成后马上进入就绪状态。</li>
</ul>
<p>经过对比，<code>setter</code>方法注入是相对最好的。</p>
<h3 id="IoC的好处"><a href="#IoC的好处" class="headerlink" title="IoC的好处"></a>IoC的好处</h3><p>不会对业务对象构成很强的侵入性，使用<code>IoC</code>后对象具有更好的可测试性、可重用性和可扩展性等。<br><code>IoC</code>是一种可以帮助我们解耦各业务对象间依赖关系的对象绑定方式!</p>
<h2 id="IoC-Service-Provider"><a href="#IoC-Service-Provider" class="headerlink" title="IoC Service Provider"></a>IoC Service Provider</h2><p><code>IoC Service Provider</code>是一个抽象的概念，可以指代任何将IoC场景中的<strong>业务对象绑定</strong>到一起的<strong>实现方式</strong>。它可以是一段代码，也可以是一组相关的类，甚至可以是比较通用的<code>IoC</code>框架或者<code>IoC</code>容器实现。<br><code>Spring</code>的<code>IoC</code>容器就是一个提供依赖注入服务的<code>IoC Service Provider</code>。</p>
<h3 id="IoC-Service-Provider-的职责"><a href="#IoC-Service-Provider-的职责" class="headerlink" title="IoC Service Provider 的职责"></a>IoC Service Provider 的职责</h3><h4 id="业务对象的构建管理"><a href="#业务对象的构建管理" class="headerlink" title="业务对象的构建管理"></a>业务对象的构建管理</h4><p>在<code>IoC</code>场景中，业务对象无需关心所依赖的对象如何构建如何取得，但这部分工作始终需要有人来做。所以，<code>IoC Service Provider</code>需要将对象的构建逻辑从客户端对象那里剥离出来，以免这部分逻辑污染业务对象的实现。<br>客户端对象:这里指代使用某个对象或者某种服务的对象。如果对象A需要引用对象B，那么A就是B的客户端对象，而不管A处于<code>Service</code>层还是数据访问层。</p>
<h4 id="业务对象间的依赖绑定"><a href="#业务对象间的依赖绑定" class="headerlink" title="业务对象间的依赖绑定"></a>业务对象间的依赖绑定</h4><p>最艰巨也是最重要的职责;<br><code>IoC Service Provider</code>通过结合之前构建和管理的所有业务对象，以及各个业务对象间可以识别的依赖关系，将这些对象所依赖的对象注入绑定，从而保证每个业务对象在使用的时候，可以处于就绪状态。</p>
<h3 id="对象间依赖关系管理"><a href="#对象间依赖关系管理" class="headerlink" title="对象间依赖关系管理"></a>对象间依赖关系管理</h3><h4 id="直接编码方式"><a href="#直接编码方式" class="headerlink" title="直接编码方式"></a>直接编码方式</h4><p>当前大部分的IoC容器都应该支持直接编码方式，比如PicoContainer、Spring、Avalon等<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">IoContainer container = ... ;</div><div class="line">container.register(FXNewsProvider.class,<span class="keyword">new</span> <span class="type">FXNewsProvider</span>());</div><div class="line">container.register(IFXNewsListener.class,<span class="keyword">new</span> <span class="type">DowJonesNewsListener</span>());</div><div class="line">...</div><div class="line">FXNewsProvider <span class="keyword">new</span><span class="type">sProvider</span> = (FXNewsProvider)container.<span class="keyword">get</span>(FXNewsProvider.class);</div><div class="line"><span class="keyword">new</span><span class="type">Provider</span>.getAndPersistNews();</div></pre></td></tr></table></figure></p>
<h4 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"newsProvider"</span> <span class="built_in">class</span>=<span class="string">"..FXNewsProvider"</span>&gt;</div><div class="line">	&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"newsListener"</span>&gt;&lt;<span class="keyword">ref</span> bean=<span class="string">"djNewsListener"</span>/&gt;&lt;/<span class="keyword">property</span>&gt;</div><div class="line">	&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"newPersistener"</span>&gt;&lt;<span class="keyword">ref</span> bean=<span class="string">"djNewsPersister"</span>/&gt;&lt;/<span class="keyword">property</span>&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"djNewsListener"</span> <span class="built_in">class</span>=<span class="string">"..impl.DowJonesNewsListener"</span>&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"djNewsPersister"</span> <span class="built_in">class</span>=<span class="string">"..impl.DowJonesNewsPersister"</span>&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<h4 id="元数据-注解-方式"><a href="#元数据-注解-方式" class="headerlink" title="元数据(注解)方式"></a>元数据(注解)方式</h4><p>元数据是关于数据的数据。在编程语言上下文中，元数据是添加到程序元素如方法、字段、类和包上的额外信息。<br>注解最终也要通过代码处理来确定最终的注入关系，从这点儿来说，注解方式可以算作编码方式的一种特殊情况。</p>
<h2 id="Spring的IoC容器类型"><a href="#Spring的IoC容器类型" class="headerlink" title="Spring的IoC容器类型"></a>Spring的IoC容器类型</h2><p><code>Spring</code>提供了两种容器类型:<code>BeanFactory</code>和<code>ApplicationContext</code></p>
<h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>基础类型<code>IoC</code>容器，提供完整的<code>IoC</code>服务支持。如果没有特殊指定，默认采用延迟初始化策略(<code>lazy-load</code>)。只有当客户端对象需要访问容器中的某个受管对象的时候，才对该受管对象进行初始化以及依赖注入操作。所以相对来说，容器启动初期速度较快。</p>
<h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p><code>ApplicationContext</code>在<code>BeanFactory</code>的基础上构建，是相对比较高级的容器实现，除了拥有<code>BeanFactory</code>的所有支持，<code>ApplicationContext</code>还提供了其他高级特性，比如事件发布、国际化信息支持等。<code>ApplicationContext</code>所管理的对象，在该类型容器启动之后，默认全部初始化并绑定完成。因为在启动时就完成所有初始化，容器启动时间较<code>BeanFactory</code>更长一些。<br><img src="/uploads/Spring2.jpg" alt=""><br><code>ApplicationContext</code>间接继承自<code>BeanFactory</code>，所以说它是构建于<code>BeanFactory</code>之上的IoC容器。</p>
<h2 id="BeanFactory-1"><a href="#BeanFactory-1" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>Spring 的 IoC 容器之 BeanFactory</p>
<h3 id="BeanFactory-作用"><a href="#BeanFactory-作用" class="headerlink" title="BeanFactory 作用"></a>BeanFactory 作用</h3><p><code>BeanFactory</code>，顾名思义，就是生产<code>Bean</code>的工厂。<code>Spring</code>框架提倡使用<code>POJO</code>(简单<code>Java</code>对象，就是普通的<code>JavaBeans</code>)，把每个业务对象看做一个<code>JavaBean</code>对象。<br><code>BeanFactory</code>可以完成作为<code>IoC Service Provider</code>的所有职责，包括<strong>业务对象的注册</strong>和<strong>对象间依赖关系的绑定</strong>。</p>
<h3 id="BeanFactory-的对象注册与依赖绑定方式"><a href="#BeanFactory-的对象注册与依赖绑定方式" class="headerlink" title="BeanFactory 的对象注册与依赖绑定方式"></a>BeanFactory 的对象注册与依赖绑定方式</h3><h4 id="直接编码方式-1"><a href="#直接编码方式-1" class="headerlink" title="直接编码方式"></a>直接编码方式</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)&#123;</div><div class="line">	DefaultListableBeanFactory beanRegistry = <span class="keyword">new</span> <span class="type">DefaultListableBeanFactory</span>();</div><div class="line">	BeanFactory container = (BeanFactory)bindViaCode(beanRegistry);</div><div class="line">	FXNewsProvider <span class="keyword">new</span><span class="type">sProvider</span> = (FXNewsProvider)container.getBean(<span class="string">"djNewsProvider"</span>);</div><div class="line">	<span class="keyword">new</span><span class="type">sProvider</span>.getAndPersistNews();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> BeanFactory bindViaCode(BeanDefinitionRegistry registry)&#123;</div><div class="line">	AbstractBeanDefinition <span class="keyword">new</span><span class="type">sProvider</span> = <span class="keyword">new</span> <span class="type">RootBeanDefinition</span>(FXNewsProvider.class,<span class="literal">true</span>);</div><div class="line">	AbstractBeanDefinition <span class="keyword">new</span><span class="type">sListener</span> = <span class="keyword">new</span> <span class="type">RootBeanDefinition</span>(DowJonesNewsListener.class,<span class="literal">true</span>);</div><div class="line">	AbstractBeanDefinition <span class="keyword">new</span><span class="type">sPersister</span> = <span class="keyword">new</span> <span class="type">RootBeanDefinition</span>(DowJonesNewsPersister.class,<span class="literal">true</span>);</div><div class="line">	<span class="comment">//将bean定义注册到容器中</span></div><div class="line">	registry.registerBeanDefinition(<span class="string">"djNewsProvider"</span>,<span class="keyword">new</span><span class="type">sProvider</span>);</div><div class="line">	registry.registerBeanDefinition(<span class="string">"djListener"</span>,<span class="keyword">new</span><span class="type">sListener</span>);</div><div class="line">	registry.registerBeanDefinition(<span class="string">"djPersister"</span>,<span class="keyword">new</span><span class="type">sPersister</span>);</div><div class="line">	<span class="comment">//指定依赖关系</span></div><div class="line">	<span class="comment">// 1.可以通过构造方法注入方式</span></div><div class="line">	ConstructorArgumentValues argValues = <span class="keyword">new</span> <span class="type">ConstructorArgumentValues</span>();</div><div class="line">	argValues.addIndexedArgumentValue(<span class="number">0</span>,<span class="keyword">new</span><span class="type">sListener</span>);</div><div class="line">	argValues.addIndexedArgumentValue(<span class="number">1</span>,<span class="keyword">new</span><span class="type">sPersister</span>);</div><div class="line">	<span class="keyword">new</span><span class="type">sProvider</span>.setConstructorArgumentValues(argValues);</div><div class="line">	<span class="comment">// 2.或者通过setter方法注入方式</span></div><div class="line">	MutablePropertyValues propertyValues = <span class="keyword">new</span> <span class="type">MutablePropertyValues</span>();</div><div class="line">	propertyValues.addPropertyValue(<span class="keyword">new</span> <span class="type">ropertyValue</span>(<span class="string">"newsListener"</span>,<span class="keyword">new</span><span class="type">sListener</span>));</div><div class="line">	propertyValues.addPropertyValue(<span class="keyword">new</span> <span class="type">ropertyValue</span>(<span class="string">"newsPersistener"</span>,<span class="keyword">new</span><span class="type">sPersister</span>));</div><div class="line">	<span class="keyword">new</span><span class="type">sProvider</span>.setPropertyValues(propertyValues);</div><div class="line">	<span class="comment">//绑定完成</span></div><div class="line">	<span class="keyword">return</span> (BeanFactory)registry;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>main</code>方法中，首先构造一个<code>DefaultListableBeanFactory</code>作为<code>BeanDefinitionRegistry</code>,然后将其交给<code>bindViaCode</code>方法进行具体的对象注册和相关依赖管理，然后通过<code>bindViaCode</code>返回的 <code>BeanFactory</code>取得需要的对象，最后执行相应逻辑。</li>
<li>在<code>bindViaCode</code>方法中，首先针对相应的业务对象构造与其相对应的<code>BeanDefinition</code>,使用了<code>RootBeanDefinition</code>作为<code>BeanDefinition</code>的实现类。构造完成后，将这些<code>BeanDefinition</code>注册到通过方法参数传进来的<code>BeanDefinitionRegistry</code>中。因为我们的<code>FXNewsProvider</code>是采用的构造方法注入，所以，需要通过<code>ConstructorArgumentValues</code>为其注入相关依赖。在这里为了同时说明<code>setter</code>方法注入，也同时展示了在<code>Spring</code>中如何使用代码实现<code>setter</code>方法注入。如果要运行这段代码，需要把<code>setter</code>方法注入的4行代码注释掉。最后，以<code>BeanFactory</code>的形式返回已经注册并绑定了所有相关业务对象的<code>BeanDefinitionRegistry</code>实例。</li>
</ul>
<h4 id="外部配置文件方式"><a href="#外部配置文件方式" class="headerlink" title="外部配置文件方式"></a>外部配置文件方式</h4><p><code>Spring</code>的<code>IoC</code>容器支持两种配置文件格式:</p>
<ul>
<li><code>Properties</code>文件格式</li>
<li><code>XML</code>文件格式</li>
</ul>
<h5 id="Properties配置格式的加载"><a href="#Properties配置格式的加载" class="headerlink" title="Properties配置格式的加载"></a>Properties配置格式的加载</h5><p><code>Spring</code>提供了<code>org.springframework.beans.factory.support.PropertiesBeanDefinitionReader</code>类用于Properties格式配置文件的加载，所以，我们不用自己去实现<code>BeanDefinitionReader</code>，只要根据该类的<strong>读取规则</strong>，提供相应的配置文件即可。</p>
<p><code>Properties</code>格式表达的依赖注入配置内容<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">djNewsProvider.(<span class="keyword">class</span>)=..FXNewsProvider</div><div class="line">#---------------通过构造方法注入的时候--------</div><div class="line">djNewsProvider.$<span class="number">0</span>(ref)=djListener</div><div class="line">djNewsProvider.$<span class="number">1</span>(ref)=djPersister</div><div class="line">#---------------通过setter方法注入的时候------</div><div class="line"># djNewsProvider.newsListener(ref)=djListener</div><div class="line"># djNewsProvider.newPersistener(ref)=djPersister</div><div class="line"></div><div class="line">djListener.(<span class="keyword">class</span>)=..impl.DowJonesNewsListener</div><div class="line"></div><div class="line">djPersister.(<span class="keyword">class</span>)=..impl.DowJonesNewsPersister</div></pre></td></tr></table></figure></p>
<ul>
<li><code>djNewsProvider</code>作为<code>beanName</code>，后面通过.(class)表明对应的实现类是什么，实际上使用djNewsProvider.class=…的形式也是可以的，但是<code>Spring 1.2.6</code>之后不再提倡使用，而提倡使用.(class)的形式。其他两个类的注册，<code>djListener</code>和<code>djPersister</code>，也是相同的道理。</li>
<li>通过在表示<code>beanName</code>的名称后添加<code>.$[number]</code>后缀的形式，来表示当前<code>beanName</code>对应的对象需要通过构造方法注入的方式注入相应依赖对象。在这里，我们分别将构造方法的第一个参数和第二个参数对应到<code>djListener</code>和<code>djPersister</code>。需要注意的一点，就是$0和$1后面的(ref)，(ref)用来表示所依赖的是引用对象，而不是普通的类型。如果不加(ref)，<code>PropertiesBeanDefinitionReader</code>会将<code>djListener</code>和<code>djPersister</code>作为简单的<code>String</code>类型进行注入，异常自然不可避免。</li>
<li><code>setter</code>方法注入使用相应的属性名称来指定注入。<code>newsListener</code>和<code>newPersistener</code>恰好就是我们的<code>FXNewsProvider</code>类中所声明的属性名称。同时不要忘了(ref)的作用。</li>
<li>构造方法注入和<code>setter</code>方法注入差异:构造方法注入无法通过参数名称来标识注入的确切位置，而<code>setter</code>方法注入则可以通过属性名称来明确标识注入。</li>
</ul>
<p>加载Properties配置的BeanFactory的使用演示<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)&#123;</div><div class="line">	DefaultListableBeanFactory beanRegistry = <span class="keyword">new</span> <span class="type">DefaultListableBeanFactory</span>();</div><div class="line">	BeanFactory container = (BeanFactory)bindViaPropertiesFile(beanRegistry);</div><div class="line">	FXNewsProvider <span class="keyword">new</span><span class="type">sProvider</span> = (FXNewsProvider)container.getBean(<span class="string">"jdNewsProvider"</span>);</div><div class="line">	<span class="keyword">new</span><span class="type">sProvider</span>.getAndPersistNews();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> BeanFactory bindViaPropertiesFile(BeanDefinitionRegistry registry)&#123;</div><div class="line">	PropertiesBeanDefinitionReader reader = <span class="keyword">new</span> <span class="type">PropertiesBeanDefinitionReader</span>(registry);</div><div class="line">	reader.loadBeanDefinitions(<span class="string">"classpath:.../../binding-config.properties"</span>);</div><div class="line">	<span class="keyword">return</span> (BeanFactory)registry;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="XML-配置格式的加载"><a href="#XML-配置格式的加载" class="headerlink" title="XML 配置格式的加载"></a>XML 配置格式的加载</h5><p>XML配置格式是Spring支持最完整，功能最强大的表达方式。<br>XML配置文件内容:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml veersion=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"</span></div><div class="line">"http://www.springframework.org/dtd/spring-beans.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"djNewsProvider"</span> <span class="attr">class</span>=<span class="string">"..FXNewsProvider"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"djNewsListener"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"djNewsPersister"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"djNewsListener"</span> <span class="attr">class</span>=<span class="string">"..impl.DowJonesNewsListener"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"djNewsPersister"</span> <span class="attr">class</span>=<span class="string">"..impl.DowJonesNewsPersister"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>加载XML配置文件的BeanFactory的使用演示<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)&#123;</div><div class="line">	DefaultListableBeanFactory beanRegistry = <span class="keyword">new</span> <span class="type">DefaultListableBeanFactory</span>();</div><div class="line">	BeanFactory container = (BeanFactory)bindViaXMLFile(beanRegistry);</div><div class="line">	FXNewsProvider <span class="keyword">new</span><span class="type">sProvider</span> = (FXNewsProvider)container.getBean(<span class="string">"djNewsProvider"</span>);</div><div class="line">	<span class="keyword">new</span><span class="type">sProvider</span>.getAndPersistNews();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> BeanFactory bindViaXMLFile(BeanDefinitionRegistry registry)&#123;</div><div class="line">	XmlBeanDefinitionReader reader = <span class="keyword">new</span> <span class="type">XmlBeanDefinitionReader</span>(registry);</div><div class="line">	reader.loadBeanDefinitions(<span class="string">"classpath:../news-config.xml"</span>);</div><div class="line">	<span class="keyword">return</span> (BeanFactory)registry;</div><div class="line">	<span class="comment">//或者直接</span></div><div class="line">	<span class="comment">//return new XmlBeanFactory(new ClassPathResource("../news-config.xml"));</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h5><ul>
<li>在<code>Spring 2.5</code>发布之前，<code>Spring</code>框架并没有正式支持基于注解方式的依赖注入;</li>
<li><code>Spring 2.5</code>发布的基于注解的依赖注入方式，如果不使用<code>classpath-scanning</code>功能的话，依然部分依赖于”基于XML配置文件”的依赖注入方式。</li>
<li>注解是<code>Java5</code>之后才引入的，所以，一下内容只适用于引用程序使用了<code>Spring 2.5</code>以及<code>Java 5</code>或者更高版本情况下。<br>使用指定注解标注的相关类<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FXNewsProvider</span>&#123;</span></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> IFXNewsListener newsListener;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Spring.xml里面需要配置 组件扫描</span></div><div class="line">&lt;<span class="string">context:</span>component-scan base-<span class="keyword">package</span>=<span class="string">"cn.base.package"</span>/&gt;</div></pre></td></tr></table></figure>
<p><context:component-scan>会到指定的包(package)下面扫描标注有 <code>@Component</code> 的类，如果找到，则将他们添加到容器进行管理，并根据它们所标注的 <code>@Autowired</code> 为这些类注入符合条件的依赖对象。<br>注解完成后，加载配置并演示<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)&#123;</div><div class="line">	ApplicationContext ctx = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">"配置文件路径"</span>);</div><div class="line">	FXNewsProvider <span class="keyword">new</span><span class="type">sProvider</span> = (FXNewsProvider)container.getBean(<span class="string">"FXNewsProvider"</span>);</div><div class="line">	<span class="keyword">new</span><span class="type">sProvider</span>.getAndPersistNews();</div></pre></td></tr></table></figure></context:component-scan></p>
<h3 id="BeanFactory的XML配置文件"><a href="#BeanFactory的XML配置文件" class="headerlink" title="BeanFactory的XML配置文件"></a>BeanFactory的XML配置文件</h3><p>每一个对象在XML中的映射自然而然地对应一个叫做<bean>的元素</bean></p>
<p><beans>是XML配置文件中最顶层的元素，它下面可以包含0或者1个<description>和多个<bean>以及<import>或者<alias></alias></import></bean></description></beans></p>
<p><beans>拥有相应的属性(attribute)对所辖的<bean>进行统一的默认行为设置，包括:</bean></beans></p>
<ul>
<li><strong>default-lazy-init</strong>  其值可以指定为true或者false，默认为false。用来标志是否对所有的<bean>进行延迟初始化。</bean></li>
<li><strong>default-autowire</strong>   可以取值为no、byName、byType、constructor以及autodetect。默认值为no，如果使用自动绑定的话，用来标志全体bean使用哪一种默认绑定方式。</li>
</ul>
<p><description><br>可以通过<description>在配置的文件中指定一些描述性的信息。通常情况下，该元素是省略的。</description></description></p>
<p><import><br>在主要的配置文件中通过<import>元素对其所依赖的配置文件进行引用。比如:如果A.xml中的<bean>定义可能依赖B.xml中的某些<bean>定义，那么就可以在A.xml中使用<import>将B.xml引入到A.xml，以类似于<import resource="B.xml">的形式。</import></import></bean></bean></import></import></p>
<p><alias></alias></p>
<p><alias name="dataSourceForMasterDatabase" alias="masterDataSource"><br>为某些<bean>起一些”外号”(别名)，两个名称都可以引用这个<bean></bean></bean></alias></p>
<h3 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="scope(作用域)"></a>scope(作用域)</h3><h4 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h4><ul>
<li>对象实例数量:singleton类型的bean定义，在一个容器中只存在一个共享实例。所有对该类型bean的依赖都引用这一单一实例。</li>
<li>对象存活时间:singleton类型bean定义，从容器启动，到它第一次被请求而实例化开始，只要容器不销毁或者退出，该类型bean的单一实例就会一直存活。</li>
</ul>
<p>通常如果不指定bean的scope，singleton便是容器默认的scope;下面三种配置达到的效果是一样的:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"mockObject"</span> <span class="attribute">class</span>=<span class="string">"...MockBusinessObject"</span>/&gt;</div><div class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"mockObject"</span> <span class="attribute">class</span>=<span class="string">"...MockBusinessObject"</span> <span class="attribute">singleton</span>=<span class="string">"true"</span>/&gt;</div><div class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"mockObject"</span> <span class="attribute">class</span>=<span class="string">"...MockBusinessObject"</span> <span class="attribute">scope</span>=<span class="string">"singleton"</span>/&gt;</div></pre></td></tr></table></figure></p>
<h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><p>针对声明为拥有prototype scope的bean定义，容器在接到该类型对象的请求的时候，会每次都重新生成一个新的对象实例给请求方。</p>
<h3 id="IoC容器实现两个阶段"><a href="#IoC容器实现两个阶段" class="headerlink" title="IoC容器实现两个阶段"></a>IoC容器实现两个阶段</h3><p><img src="/uploads/Spring3.jpg" alt=""><br>Spring的IoC容器的实现可以划分为两个阶段:</p>
<ul>
<li>容器启动阶段</li>
<li>Bean实例化阶段</li>
</ul>
<h4 id="容器启动阶段"><a href="#容器启动阶段" class="headerlink" title="容器启动阶段"></a>容器启动阶段</h4><p>容器启动伊始，首先会通过某种途径加载Configuration MetaData。除了代码方式比较直接，在大部分情况下，容器需要依赖某些工具类(BeanDefinitionReader)对加载的Configuration MetaData进行解析和分析,并将分析后的信息编组为相应的BeanDefinition，最后把这些保存了bean定义必要信息的BeanDefinition，注册到相应的BeanDefinitionRegistry，这样容器启动工作就完成了。</p>
<h4 id="Bean实例化阶段"><a href="#Bean实例化阶段" class="headerlink" title="Bean实例化阶段"></a>Bean实例化阶段</h4><p>当某个请求方通过容器的getBean方法明确地请求某个对象，或者因依赖关系容器需要隐式地调用getBean方法时，就会触发第二阶段的活动。</p>
<p>容器启动之后，并不会马上就实例化相应的bean定义。容器现在仅仅拥有所有对象的BeanDefinition来保存实例化阶段将要用的必要信息。只有当请求方通过BeanFactory的getBean()方法来请求某个对象实例的时候，才有可能触发Bean实例化阶段的活动。</p>
<ul>
<li>对于BeanFactory来说，对象实例化默认采用延迟初始化。通常情况下，当对象A被请求而需要第一次实例化的时候，如果它所依赖的对象B之前同样没有被实例化，那么容器会先实例化对象A所依赖的对象。这种情况是容器内部调用getBean()，对于本次请求的请求方是隐式的。</li>
<li>ApplicationContext启动后会实例化所有的bean定义</li>
</ul>
<p>第二次被调用则会直接返回容器缓存的第一次实例化完的对象实例(prototype类型bean除外)。</p>
<h2 id="ApplicationContext-1"><a href="#ApplicationContext-1" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><h2 id="基于注解的依赖注入"><a href="#基于注解的依赖注入" class="headerlink" title="基于注解的依赖注入"></a>基于注解的依赖注入</h2><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>将自动绑定的标志用注解来表示时，也就得到了基于注解的依赖注入，或者更确切地称为基于注解的自动绑定。<br>@Autowired 是基于注解的依赖注入的核心注解，它的存在可以让容器知道需要为当前类注入哪些依赖。<br>与原有的byType类型的自动绑定方式类似， @Autowired 也是按照类型匹配进行依赖注入的，只不过，它要比byType更加灵活，也更加强大。 @Autowired 可以标注于类定义的多个位置，包括如下几个:</p>
<ul>
<li>域(Filed)或者说属性(Property):不管它们声明的访问限制符是private、protected还是public，只要标注了 @Autowired ，它们所需要的依赖注入需求就都能够被满足。</li>
<li>构造方法定义(Constructor):标注于类的构造方法之上的 @Autowired，相当于抢夺了原有自动绑定功能中”constructor”方式的权利，它将根据构造方法参数类型，来决定将什么样的依赖对象注入给当前对象。</li>
<li>方法定义(Method): @Autowired 不仅可以标注于传统的setter方法之上，而且还可以标注于任意名称的方法定义之上，只要该方法定义了需要被注入的参数。</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//属性使用 @Autowired </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FXNewsProvider</span></span></div><div class="line">&#123;</div><div class="line">@Autowired</div><div class="line"><span class="keyword">private</span> IFXNewsListener <span class="keyword">new</span><span class="type">sListener</span>;</div><div class="line">@Autowired</div><div class="line"><span class="keyword">private</span> IFXNewsPersister <span class="keyword">new</span><span class="type">Persistener</span>;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造方法使用 @Autowired </span></div><div class="line">@Autowired</div><div class="line"><span class="keyword">public</span> FXNewsProvider(IFXNewsListener <span class="keyword">new</span><span class="type">sListner</span>,IFXNewsPersister <span class="keyword">new</span><span class="type">sPersister</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">this</span>.<span class="keyword">new</span><span class="type">sListener</span> = <span class="keyword">new</span><span class="type">sListner</span>;</div><div class="line"><span class="built_in">this</span>.<span class="keyword">new</span><span class="type">Persistener</span> = <span class="keyword">new</span><span class="type">sPersister</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 标注于方法之上的 @Autowired 代码示例</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FXNewsProvider</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">private</span> IFXNewsListener <span class="keyword">new</span><span class="type">sListener</span>;</div><div class="line"><span class="keyword">private</span> IFXNewsPersister <span class="keyword">new</span><span class="type">Persistener</span>;</div><div class="line">@Autowired</div><div class="line"><span class="keyword">public</span> void setUp(IFXNewsListener <span class="keyword">new</span><span class="type">sListener</span>,IFXNewsPersister <span class="keyword">new</span><span class="type">Persistener</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">this</span>.<span class="keyword">new</span><span class="type">sListener</span> = <span class="keyword">new</span><span class="type">sListener</span>;</div><div class="line"><span class="built_in">this</span>.<span class="keyword">new</span><span class="type">Persistener</span> = <span class="keyword">new</span><span class="type">Persistener</span>;</div><div class="line">&#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="classpath-scanning"><a href="#classpath-scanning" class="headerlink" title="classpath-scanning"></a>classpath-scanning</h3><p>classpath-scanning 功能可以从某一顶层包(base package) 开始扫描。当扫描到某个类标注了相应的注解之后，就会提取该类的相关信息，构建对应的BeanDefinition，然后把构建完的BeanDefinition注册到容器中。<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">"org.yhpackage"</span>/&gt;</div><div class="line">//如果要扫描的类定义存在于不同的源码包下面，也可以为base-<span class="keyword">package</span>指定多个以逗号分隔的扫描路径。</div><div class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">"org.yhpackage,org.yhpackage1,org.yhpackage2"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p><context:component-scan>默认扫描的注解类型是 @Component。不过，在 @Component语义基础上细化后的 @Repository、 @Service和 @Controller也同样可以获得<context:component-scan>的青睐。 @Component的语义更广、更宽泛，而 @Repository、 @Service和 @Controller的语义则更具体。所以，同样对于服务层的类定义来说，使用 @Service 标注它，要比使用 @Component更为确切，对于其他两种注解也是同样的道理。</context:component-scan></context:component-scan></p>
<p><context:component-scan>在扫描相关类定义并将它们添加到容器的时候,会通过Bean命名规范，来生成那些添加到容器的bean定义的名称(beanName)。</context:component-scan></p>
]]></content>
    
    <summary type="html">
    
      Spring的IOC容器的概念与实现
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
</feed>
